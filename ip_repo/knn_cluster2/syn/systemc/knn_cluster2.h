// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _knn_cluster2_HH_
#define _knn_cluster2_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "update_knn6.h"
#include "update_knn7.h"
#include "update_knn8.h"
#include "update_knn9.h"
#include "update_knn10.h"
#include "fifo_w32_d1024_A.h"
#include "start_for_update_ibs.h"
#include "start_for_update_jbC.h"
#include "start_for_update_kbM.h"
#include "start_for_update_lbW.h"

namespace ap_rtl {

struct knn_cluster2 : public sc_module {
    // Port declarations 12
    sc_in< sc_lv<32> > Input_1_V_V;
    sc_out< sc_lv<32> > Output_1_V_V;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > Input_1_V_V_ap_vld;
    sc_out< sc_logic > Input_1_V_V_ap_ack;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > Output_1_V_V_ap_vld;
    sc_in< sc_logic > Output_1_V_V_ap_ack;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > ap_idle;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    knn_cluster2(sc_module_name name);
    SC_HAS_PROCESS(knn_cluster2);

    ~knn_cluster2();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    update_knn6* update_knn6_U0;
    update_knn7* update_knn7_U0;
    update_knn8* update_knn8_U0;
    update_knn9* update_knn9_U0;
    update_knn10* update_knn10_U0;
    fifo_w32_d1024_A* knn_out1_V_V_U;
    fifo_w32_d1024_A* knn_out2_V_V_U;
    fifo_w32_d1024_A* knn_out3_V_V_U;
    fifo_w32_d1024_A* knn_out4_V_V_U;
    start_for_update_ibs* start_for_update_ibs_U;
    start_for_update_jbC* start_for_update_jbC_U;
    start_for_update_kbM* start_for_update_kbM_U;
    start_for_update_lbW* start_for_update_lbW_U;
    sc_signal< sc_logic > update_knn6_U0_ap_start;
    sc_signal< sc_logic > update_knn6_U0_ap_done;
    sc_signal< sc_logic > update_knn6_U0_ap_continue;
    sc_signal< sc_logic > update_knn6_U0_ap_idle;
    sc_signal< sc_logic > update_knn6_U0_ap_ready;
    sc_signal< sc_logic > update_knn6_U0_start_out;
    sc_signal< sc_logic > update_knn6_U0_start_write;
    sc_signal< sc_logic > update_knn6_U0_Input_1_V_V_ap_ack;
    sc_signal< sc_lv<32> > update_knn6_U0_Output_1_V_V_din;
    sc_signal< sc_logic > update_knn6_U0_Output_1_V_V_write;
    sc_signal< sc_logic > update_knn7_U0_ap_start;
    sc_signal< sc_logic > update_knn7_U0_ap_done;
    sc_signal< sc_logic > update_knn7_U0_ap_continue;
    sc_signal< sc_logic > update_knn7_U0_ap_idle;
    sc_signal< sc_logic > update_knn7_U0_ap_ready;
    sc_signal< sc_logic > update_knn7_U0_start_out;
    sc_signal< sc_logic > update_knn7_U0_start_write;
    sc_signal< sc_logic > update_knn7_U0_Input_1_V_V_read;
    sc_signal< sc_lv<32> > update_knn7_U0_Output_1_V_V_din;
    sc_signal< sc_logic > update_knn7_U0_Output_1_V_V_write;
    sc_signal< sc_logic > update_knn8_U0_ap_start;
    sc_signal< sc_logic > update_knn8_U0_ap_done;
    sc_signal< sc_logic > update_knn8_U0_ap_continue;
    sc_signal< sc_logic > update_knn8_U0_ap_idle;
    sc_signal< sc_logic > update_knn8_U0_ap_ready;
    sc_signal< sc_logic > update_knn8_U0_start_out;
    sc_signal< sc_logic > update_knn8_U0_start_write;
    sc_signal< sc_logic > update_knn8_U0_Input_1_V_V_read;
    sc_signal< sc_lv<32> > update_knn8_U0_Output_1_V_V_din;
    sc_signal< sc_logic > update_knn8_U0_Output_1_V_V_write;
    sc_signal< sc_logic > update_knn9_U0_ap_start;
    sc_signal< sc_logic > update_knn9_U0_ap_done;
    sc_signal< sc_logic > update_knn9_U0_ap_continue;
    sc_signal< sc_logic > update_knn9_U0_ap_idle;
    sc_signal< sc_logic > update_knn9_U0_ap_ready;
    sc_signal< sc_logic > update_knn9_U0_start_out;
    sc_signal< sc_logic > update_knn9_U0_start_write;
    sc_signal< sc_logic > update_knn9_U0_Input_1_V_V_read;
    sc_signal< sc_lv<32> > update_knn9_U0_Output_1_V_V_din;
    sc_signal< sc_logic > update_knn9_U0_Output_1_V_V_write;
    sc_signal< sc_logic > update_knn10_U0_ap_start;
    sc_signal< sc_logic > update_knn10_U0_ap_done;
    sc_signal< sc_logic > update_knn10_U0_ap_continue;
    sc_signal< sc_logic > update_knn10_U0_ap_idle;
    sc_signal< sc_logic > update_knn10_U0_ap_ready;
    sc_signal< sc_logic > update_knn10_U0_Input_1_V_V_read;
    sc_signal< sc_lv<32> > update_knn10_U0_Output_1_V_V;
    sc_signal< sc_logic > update_knn10_U0_Output_1_V_V_ap_vld;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_logic > knn_out1_V_V_full_n;
    sc_signal< sc_lv<32> > knn_out1_V_V_dout;
    sc_signal< sc_logic > knn_out1_V_V_empty_n;
    sc_signal< sc_logic > knn_out2_V_V_full_n;
    sc_signal< sc_lv<32> > knn_out2_V_V_dout;
    sc_signal< sc_logic > knn_out2_V_V_empty_n;
    sc_signal< sc_logic > knn_out3_V_V_full_n;
    sc_signal< sc_lv<32> > knn_out3_V_V_dout;
    sc_signal< sc_logic > knn_out3_V_V_empty_n;
    sc_signal< sc_logic > knn_out4_V_V_full_n;
    sc_signal< sc_lv<32> > knn_out4_V_V_dout;
    sc_signal< sc_logic > knn_out4_V_V_empty_n;
    sc_signal< sc_logic > ap_sync_done;
    sc_signal< sc_logic > ap_sync_ready;
    sc_signal< sc_lv<1> > start_for_update_knn7_U0_din;
    sc_signal< sc_logic > start_for_update_knn7_U0_full_n;
    sc_signal< sc_lv<1> > start_for_update_knn7_U0_dout;
    sc_signal< sc_logic > start_for_update_knn7_U0_empty_n;
    sc_signal< sc_lv<1> > start_for_update_knn8_U0_din;
    sc_signal< sc_logic > start_for_update_knn8_U0_full_n;
    sc_signal< sc_lv<1> > start_for_update_knn8_U0_dout;
    sc_signal< sc_logic > start_for_update_knn8_U0_empty_n;
    sc_signal< sc_lv<1> > start_for_update_knn9_U0_din;
    sc_signal< sc_logic > start_for_update_knn9_U0_full_n;
    sc_signal< sc_lv<1> > start_for_update_knn9_U0_dout;
    sc_signal< sc_logic > start_for_update_knn9_U0_empty_n;
    sc_signal< sc_lv<1> > start_for_update_knn10_U0_din;
    sc_signal< sc_logic > start_for_update_knn10_U0_full_n;
    sc_signal< sc_lv<1> > start_for_update_knn10_U0_dout;
    sc_signal< sc_logic > start_for_update_knn10_U0_empty_n;
    sc_signal< sc_logic > update_knn10_U0_start_full_n;
    sc_signal< sc_logic > update_knn10_U0_start_write;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_Input_1_V_V_ap_ack();
    void thread_Output_1_V_V();
    void thread_Output_1_V_V_ap_vld();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sync_continue();
    void thread_ap_sync_done();
    void thread_ap_sync_ready();
    void thread_start_for_update_knn10_U0_din();
    void thread_start_for_update_knn7_U0_din();
    void thread_start_for_update_knn8_U0_din();
    void thread_start_for_update_knn9_U0_din();
    void thread_update_knn10_U0_ap_continue();
    void thread_update_knn10_U0_ap_start();
    void thread_update_knn10_U0_start_full_n();
    void thread_update_knn10_U0_start_write();
    void thread_update_knn6_U0_ap_continue();
    void thread_update_knn6_U0_ap_start();
    void thread_update_knn7_U0_ap_continue();
    void thread_update_knn7_U0_ap_start();
    void thread_update_knn8_U0_ap_continue();
    void thread_update_knn8_U0_ap_start();
    void thread_update_knn9_U0_ap_continue();
    void thread_update_knn9_U0_ap_start();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
