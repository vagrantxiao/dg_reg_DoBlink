// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module update_knn16 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        Input_1_V_V,
        Input_1_V_V_ap_vld,
        Input_1_V_V_ap_ack,
        Output_1_V_V_din,
        Output_1_V_V_full_n,
        Output_1_V_V_write
);

parameter    ap_ST_fsm_state1 = 45'd1;
parameter    ap_ST_fsm_state2 = 45'd2;
parameter    ap_ST_fsm_state3 = 45'd4;
parameter    ap_ST_fsm_state4 = 45'd8;
parameter    ap_ST_fsm_state5 = 45'd16;
parameter    ap_ST_fsm_state6 = 45'd32;
parameter    ap_ST_fsm_state7 = 45'd64;
parameter    ap_ST_fsm_state8 = 45'd128;
parameter    ap_ST_fsm_state9 = 45'd256;
parameter    ap_ST_fsm_state10 = 45'd512;
parameter    ap_ST_fsm_pp1_stage0 = 45'd1024;
parameter    ap_ST_fsm_pp1_stage1 = 45'd2048;
parameter    ap_ST_fsm_pp1_stage2 = 45'd4096;
parameter    ap_ST_fsm_pp1_stage3 = 45'd8192;
parameter    ap_ST_fsm_pp1_stage4 = 45'd16384;
parameter    ap_ST_fsm_pp1_stage5 = 45'd32768;
parameter    ap_ST_fsm_pp1_stage6 = 45'd65536;
parameter    ap_ST_fsm_pp1_stage7 = 45'd131072;
parameter    ap_ST_fsm_state20 = 45'd262144;
parameter    ap_ST_fsm_state21 = 45'd524288;
parameter    ap_ST_fsm_state22 = 45'd1048576;
parameter    ap_ST_fsm_state23 = 45'd2097152;
parameter    ap_ST_fsm_state24 = 45'd4194304;
parameter    ap_ST_fsm_state25 = 45'd8388608;
parameter    ap_ST_fsm_state26 = 45'd16777216;
parameter    ap_ST_fsm_state27 = 45'd33554432;
parameter    ap_ST_fsm_state28 = 45'd67108864;
parameter    ap_ST_fsm_state29 = 45'd134217728;
parameter    ap_ST_fsm_state30 = 45'd268435456;
parameter    ap_ST_fsm_state31 = 45'd536870912;
parameter    ap_ST_fsm_state32 = 45'd1073741824;
parameter    ap_ST_fsm_state33 = 45'd2147483648;
parameter    ap_ST_fsm_state34 = 45'd4294967296;
parameter    ap_ST_fsm_state35 = 45'd8589934592;
parameter    ap_ST_fsm_pp2_stage0 = 45'd17179869184;
parameter    ap_ST_fsm_state48 = 45'd34359738368;
parameter    ap_ST_fsm_pp3_stage0 = 45'd68719476736;
parameter    ap_ST_fsm_state51 = 45'd137438953472;
parameter    ap_ST_fsm_state52 = 45'd274877906944;
parameter    ap_ST_fsm_state53 = 45'd549755813888;
parameter    ap_ST_fsm_state54 = 45'd1099511627776;
parameter    ap_ST_fsm_state55 = 45'd2199023255552;
parameter    ap_ST_fsm_state56 = 45'd4398046511104;
parameter    ap_ST_fsm_state57 = 45'd8796093022208;
parameter    ap_ST_fsm_state58 = 45'd17592186044416;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] Input_1_V_V;
input   Input_1_V_V_ap_vld;
output   Input_1_V_V_ap_ack;
output  [31:0] Output_1_V_V_din;
input   Output_1_V_V_full_n;
output   Output_1_V_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg Input_1_V_V_ap_ack;
reg[31:0] Output_1_V_V_din;
reg Output_1_V_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [44:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [0:0] index_4;
reg   [8:0] training_set_V_address0;
reg    training_set_V_ce0;
reg    training_set_V_we0;
wire   [255:0] training_set_V_d0;
wire   [255:0] training_set_V_q0;
reg   [10:0] knn_set_4_0;
reg   [10:0] knn_set_4_1;
reg   [10:0] knn_set_4_2;
reg   [10:0] knn_set_4_3;
reg   [10:0] knn_set_4_4;
reg   [10:0] knn_set_4_5;
reg    Input_1_V_V_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln6860_fu_411_p2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_pp1_stage0;
wire   [0:0] icmp_ln6874_fu_449_p2;
wire    ap_CS_fsm_pp1_stage1;
wire    ap_block_pp1_stage1;
reg   [0:0] icmp_ln6874_reg_1217;
wire    ap_CS_fsm_pp1_stage2;
wire    ap_block_pp1_stage2;
wire    ap_CS_fsm_pp1_stage3;
wire    ap_block_pp1_stage3;
wire    ap_CS_fsm_pp1_stage4;
wire    ap_block_pp1_stage4;
wire    ap_CS_fsm_pp1_stage5;
wire    ap_block_pp1_stage5;
wire    ap_CS_fsm_pp1_stage6;
wire    ap_block_pp1_stage6;
wire    ap_CS_fsm_pp1_stage7;
wire    ap_block_pp1_stage7;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state35;
reg    Output_1_V_V_blk_n;
reg    ap_enable_reg_pp1_iter1;
wire    ap_CS_fsm_state51;
wire    ap_CS_fsm_state52;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state54;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state56;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state58;
reg   [10:0] i1_0_reg_204;
reg   [8:0] indvar_flatten_reg_215;
reg   [1:0] j_0_reg_226;
reg   [7:0] i4_0_reg_237;
reg   [2:0] indvar_flatten11_reg_248;
reg   [1:0] i_0_i_reg_259;
reg   [31:0] tmp_V_183_reg_270;
reg   [31:0] label_list_2_8_reg_281;
reg   [31:0] label_list_1_5_reg_292;
reg   [31:0] tmp_V_180_reg_303;
reg   [31:0] min_distance_list_2_18_reg_314;
reg   [31:0] min_distance_list_1_10_reg_325;
reg   [1:0] j_0_i_reg_336;
reg   [31:0] reg_376;
reg    ap_block_state2;
reg    ap_block_state11_pp1_stage0_iter0;
reg    ap_block_state19_pp1_stage0_iter1;
reg    ap_block_pp1_stage0_11001;
reg    ap_block_state12_pp1_stage1_iter0;
reg    ap_block_pp1_stage1_11001;
reg    ap_block_state13_pp1_stage2_iter0;
reg    ap_block_pp1_stage2_11001;
reg    ap_block_state14_pp1_stage3_iter0;
reg    ap_block_pp1_stage3_11001;
reg    ap_block_state15_pp1_stage4_iter0;
reg    ap_block_pp1_stage4_11001;
reg    ap_block_state16_pp1_stage5_iter0;
reg    ap_block_pp1_stage5_11001;
reg    ap_block_state17_pp1_stage6_iter0;
reg    ap_block_pp1_stage6_11001;
reg    ap_block_state18_pp1_stage7_iter0;
reg    ap_block_pp1_stage7_11001;
reg    ap_block_state22;
reg   [31:0] reg_382;
reg    ap_block_state23;
reg   [31:0] reg_386;
reg    ap_block_state24;
reg   [31:0] reg_390;
reg    ap_block_state25;
reg   [31:0] reg_394;
reg    ap_block_state26;
reg   [31:0] reg_398;
reg    ap_block_state27;
reg   [31:0] reg_402;
wire   [0:0] index_4_load_load_fu_407_p1;
reg   [0:0] index_4_load_reg_1205;
reg    ap_block_state1;
wire   [8:0] i_fu_417_p2;
reg   [8:0] i_reg_1212;
wire   [10:0] i_9_fu_455_p2;
reg   [10:0] i_9_reg_1221;
wire   [3:0] trunc_ln414_fu_503_p1;
reg   [3:0] trunc_ln414_reg_1226;
reg    ap_block_state21;
reg   [31:0] tmp_V_187_reg_1231;
reg   [31:0] tmp_V_188_reg_1236;
reg   [31:0] tmp_V_189_reg_1241;
reg   [31:0] tmp_V_190_reg_1246;
wire   [195:0] lhs_V_fu_507_p8;
reg   [195:0] lhs_V_reg_1251;
wire   [0:0] icmp_ln6944_fu_552_p2;
reg   [0:0] icmp_ln6944_reg_1256;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state36_pp2_stage0_iter0;
wire    ap_block_state37_pp2_stage0_iter1;
wire    ap_block_state38_pp2_stage0_iter2;
wire    ap_block_state39_pp2_stage0_iter3;
wire    ap_block_state40_pp2_stage0_iter4;
wire    ap_block_state41_pp2_stage0_iter5;
wire    ap_block_state42_pp2_stage0_iter6;
wire    ap_block_state43_pp2_stage0_iter7;
wire    ap_block_state44_pp2_stage0_iter8;
wire    ap_block_state45_pp2_stage0_iter9;
wire    ap_block_state46_pp2_stage0_iter10;
wire    ap_block_state47_pp2_stage0_iter11;
wire    ap_block_pp2_stage0_11001;
reg   [0:0] icmp_ln6944_reg_1256_pp2_iter1_reg;
reg   [0:0] icmp_ln6944_reg_1256_pp2_iter2_reg;
reg   [0:0] icmp_ln6944_reg_1256_pp2_iter3_reg;
reg   [0:0] icmp_ln6944_reg_1256_pp2_iter4_reg;
reg   [0:0] icmp_ln6944_reg_1256_pp2_iter5_reg;
reg   [0:0] icmp_ln6944_reg_1256_pp2_iter6_reg;
reg   [0:0] icmp_ln6944_reg_1256_pp2_iter7_reg;
reg   [0:0] icmp_ln6944_reg_1256_pp2_iter8_reg;
reg   [0:0] icmp_ln6944_reg_1256_pp2_iter9_reg;
reg   [0:0] icmp_ln6944_reg_1256_pp2_iter10_reg;
wire   [8:0] add_ln6944_fu_558_p2;
reg    ap_enable_reg_pp2_iter0;
wire   [7:0] select_ln6951_fu_570_p3;
reg   [7:0] select_ln6951_reg_1265;
reg   [7:0] select_ln6951_reg_1265_pp2_iter1_reg;
wire   [1:0] select_ln6951_1_fu_588_p3;
reg   [1:0] select_ln6951_1_reg_1270;
wire   [14:0] mul_ln6951_fu_600_p2;
reg   [14:0] mul_ln6951_reg_1275;
wire   [2:0] select_ln6951_2_fu_624_p3;
reg   [2:0] select_ln6951_2_reg_1280;
reg   [2:0] select_ln6951_2_reg_1280_pp2_iter1_reg;
reg   [2:0] select_ln6951_2_reg_1280_pp2_iter2_reg;
reg   [2:0] select_ln6951_2_reg_1280_pp2_iter3_reg;
reg   [2:0] select_ln6951_2_reg_1280_pp2_iter4_reg;
reg   [2:0] select_ln6951_2_reg_1280_pp2_iter5_reg;
reg   [2:0] select_ln6951_2_reg_1280_pp2_iter6_reg;
reg   [2:0] select_ln6951_2_reg_1280_pp2_iter7_reg;
reg   [2:0] select_ln6951_2_reg_1280_pp2_iter8_reg;
reg   [2:0] select_ln6951_2_reg_1280_pp2_iter9_reg;
reg   [2:0] select_ln6951_2_reg_1280_pp2_iter10_reg;
wire   [0:0] select_ln6951_3_fu_638_p3;
reg   [0:0] select_ln6951_3_reg_1285;
reg   [0:0] select_ln6951_3_reg_1285_pp2_iter1_reg;
reg   [0:0] select_ln6951_3_reg_1285_pp2_iter2_reg;
reg   [0:0] select_ln6951_3_reg_1285_pp2_iter3_reg;
reg   [0:0] select_ln6951_3_reg_1285_pp2_iter4_reg;
reg   [0:0] select_ln6951_3_reg_1285_pp2_iter5_reg;
reg   [0:0] select_ln6951_3_reg_1285_pp2_iter6_reg;
reg   [0:0] select_ln6951_3_reg_1285_pp2_iter7_reg;
reg   [0:0] select_ln6951_3_reg_1285_pp2_iter8_reg;
reg   [0:0] select_ln6951_3_reg_1285_pp2_iter9_reg;
wire   [7:0] i_10_fu_646_p2;
reg   [8:0] trunc_ln6951_mid2_reg_1297;
wire   [195:0] ret_V_fu_681_p2;
reg   [195:0] ret_V_reg_1307;
wire   [8:0] select_ln4141_26_fu_722_p3;
reg   [8:0] select_ln4141_26_reg_1312;
wire   [8:0] select_ln4141_27_fu_738_p3;
reg   [8:0] select_ln4141_27_reg_1317;
wire   [0:0] icmp_ln4141_2_fu_745_p2;
reg   [0:0] icmp_ln4141_2_reg_1322;
wire   [1:0] select_ln4141_30_fu_765_p3;
reg   [1:0] select_ln4141_30_reg_1327;
wire   [0:0] icmp_ln4454_fu_878_p2;
reg   [0:0] icmp_ln4454_reg_1338;
wire    ap_CS_fsm_pp3_stage0;
wire    ap_block_state49_pp3_stage0_iter0;
wire    ap_block_state50_pp3_stage0_iter1;
wire    ap_block_pp3_stage0_11001;
wire   [2:0] add_ln4454_fu_884_p2;
reg    ap_enable_reg_pp3_iter0;
wire   [1:0] select_ln4454_fu_940_p3;
wire   [31:0] min_distance_list_0_fu_982_p8;
reg   [31:0] min_distance_list_0_reg_1352;
wire   [1:0] j_fu_1000_p2;
wire   [31:0] select_ln4474_fu_1124_p3;
reg    ap_enable_reg_pp3_iter1;
wire   [31:0] min_distance_list_2_21_fu_1132_p3;
wire   [31:0] select_ln4474_16_fu_1167_p3;
wire   [31:0] select_ln4474_17_fu_1175_p3;
wire   [31:0] select_ln4479_19_fu_1183_p3;
wire   [31:0] select_ln4479_20_fu_1191_p3;
wire    ap_CS_fsm_state10;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state11;
reg    ap_block_pp1_stage7_subdone;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state36;
reg    ap_enable_reg_pp2_iter1;
reg    ap_enable_reg_pp2_iter2;
reg    ap_enable_reg_pp2_iter3;
reg    ap_enable_reg_pp2_iter4;
reg    ap_enable_reg_pp2_iter5;
reg    ap_enable_reg_pp2_iter6;
reg    ap_enable_reg_pp2_iter7;
reg    ap_enable_reg_pp2_iter8;
reg    ap_enable_reg_pp2_iter9;
reg    ap_enable_reg_pp2_iter10;
reg    ap_enable_reg_pp2_iter11;
wire    ap_CS_fsm_state48;
wire    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state49;
wire   [7:0] grp_popcount_fu_347_ap_return;
reg   [8:0] i_0_reg_192;
reg   [10:0] ap_phi_mux_i1_0_phi_fu_208_p4;
reg   [1:0] ap_phi_mux_j_0_phi_fu_230_p4;
wire    ap_block_pp2_stage0;
wire    ap_block_pp3_stage0;
wire   [63:0] zext_ln6863_fu_423_p1;
wire   [63:0] zext_ln6950_fu_672_p1;
reg    ap_block_state20;
wire   [10:0] zext_ln4150_21_fu_836_p1;
wire   [0:0] icmp_ln4149_fu_785_p2;
wire   [2:0] add_ln4150_fu_791_p2;
reg   [10:0] ap_sig_allocacmp_knn_set_4_0_load;
reg   [10:0] grp_load_fu_352_p1;
wire   [10:0] zext_ln4150_22_fu_826_p1;
reg   [10:0] ap_sig_allocacmp_knn_set_4_1_load;
reg   [10:0] grp_load_fu_360_p1;
wire   [10:0] zext_ln4150_23_fu_816_p1;
reg   [10:0] ap_sig_allocacmp_knn_set_4_2_load;
reg   [10:0] grp_load_fu_368_p1;
wire   [10:0] zext_ln4150_24_fu_806_p1;
reg   [10:0] ap_sig_allocacmp_knn_set_4_3_load;
reg   [10:0] grp_load_fu_356_p1;
wire   [10:0] zext_ln4150_25_fu_796_p1;
reg   [10:0] ap_sig_allocacmp_knn_set_4_4_load;
reg   [10:0] grp_load_fu_364_p1;
wire   [10:0] zext_ln4150_fu_846_p1;
reg   [10:0] ap_sig_allocacmp_knn_set_4_5_load;
reg   [10:0] grp_load_fu_372_p1;
reg    ap_block_pp1_stage1_01001;
reg    ap_block_pp1_stage2_01001;
reg    ap_block_pp1_stage3_01001;
reg    ap_block_pp1_stage4_01001;
reg    ap_block_pp1_stage5_01001;
reg    ap_block_pp1_stage6_01001;
reg    ap_block_pp1_stage7_01001;
reg    ap_block_pp1_stage0_01001;
wire   [0:0] trunc_ln6951_fu_528_p1;
wire   [2:0] shl_ln_fu_532_p3;
wire   [2:0] zext_ln6951_fu_524_p1;
wire   [0:0] icmp_ln6947_fu_564_p2;
wire   [1:0] add_ln6944_1_fu_578_p2;
wire   [1:0] mul_ln6951_fu_600_p1;
wire   [0:0] trunc_ln6951_1_fu_606_p1;
wire   [2:0] shl_ln6951_mid1_fu_610_p3;
wire   [2:0] zext_ln6951_1_fu_584_p1;
wire   [2:0] sub_ln6951_1_fu_618_p2;
wire   [2:0] sub_ln6951_fu_540_p2;
wire   [0:0] icmp_ln4141_7_fu_632_p2;
wire   [0:0] icmp_ln4141_fu_546_p2;
wire   [31:0] mul_ln6951_1_fu_1198_p2;
wire   [8:0] zext_ln6947_fu_664_p1;
wire   [8:0] add_ln6950_fu_667_p2;
wire   [195:0] rhs_V_fu_677_p1;
wire   [8:0] trunc_ln4141_fu_686_p1;
wire   [8:0] trunc_ln4141_21_fu_690_p1;
wire   [8:0] trunc_ln4141_22_fu_701_p1;
wire   [8:0] trunc_ln4141_23_fu_705_p1;
wire   [8:0] select_ln4141_25_fu_709_p3;
wire   [8:0] select_ln4141_fu_694_p3;
wire   [0:0] icmp_ln4141_1_fu_716_p2;
wire   [8:0] trunc_ln4141_24_fu_730_p1;
wire   [8:0] trunc_ln4141_25_fu_734_p1;
wire   [0:0] or_ln4141_fu_759_p2;
wire   [1:0] select_ln4141_29_fu_751_p3;
wire   [8:0] zext_ln4141_fu_773_p1;
wire   [8:0] select_ln4141_28_fu_777_p3;
wire   [2:0] zext_ln4141_5_fu_782_p1;
wire   [0:0] trunc_ln4463_fu_860_p1;
wire   [2:0] shl_ln5_fu_864_p3;
wire   [2:0] zext_ln4463_fu_856_p1;
wire   [0:0] icmp_ln4456_fu_890_p2;
wire   [1:0] add_ln4454_5_fu_904_p2;
wire   [0:0] trunc_ln4463_9_fu_914_p1;
wire   [2:0] shl_ln4463_mid1_fu_918_p3;
wire   [2:0] zext_ln4463_32_fu_910_p1;
wire   [2:0] sub_ln4463_5_fu_926_p2;
wire   [2:0] sub_ln4463_fu_872_p2;
wire   [1:0] select_ln4463_11_fu_896_p3;
wire   [2:0] select_ln4463_12_fu_932_p3;
wire   [2:0] zext_ln4463_5_fu_948_p1;
wire   [31:0] min_distance_list_0_fu_982_p1;
wire   [31:0] min_distance_list_0_fu_982_p2;
wire   [31:0] min_distance_list_0_fu_982_p3;
wire   [31:0] min_distance_list_0_fu_982_p4;
wire   [31:0] min_distance_list_0_fu_982_p5;
wire   [31:0] min_distance_list_0_fu_982_p6;
wire   [2:0] min_distance_list_0_fu_982_p7;
wire   [0:0] icmp_ln4463_fu_1006_p2;
wire   [0:0] not_icmp_ln4463_fu_1024_p2;
wire   [0:0] icmp_ln4463_1_fu_1019_p2;
wire   [5:0] phitmp_i_1_cast_cast_fu_1030_p1;
wire   [5:0] select_ln4463_fu_1011_p3;
wire   [5:0] select_ln4463_9_fu_1034_p3;
wire   [3:0] tmp_12_fu_1051_p4;
wire   [0:0] icmp_ln4463_8_fu_1061_p2;
wire   [1:0] trunc_ln4463_10_fu_1042_p1;
wire   [1:0] phitmp_i_2_fu_1067_p3;
wire   [0:0] icmp_ln4463_2_fu_1046_p2;
wire   [5:0] phitmp_i_2_cast_cast_fu_1075_p1;
wire   [5:0] select_ln4463_10_fu_1079_p3;
wire   [4:0] tmp_13_fu_1087_p4;
wire   [0:0] icmp_ln4479_fu_1103_p2;
wire   [0:0] icmp_ln4474_fu_1097_p2;
wire   [31:0] select_ln4479_fu_1109_p3;
wire   [31:0] min_distance_list_2_20_fu_1117_p3;
wire   [0:0] icmp_ln4479_1_fu_1146_p2;
wire   [0:0] icmp_ln4474_1_fu_1140_p2;
wire   [31:0] label_list_2_9_fu_1152_p3;
wire   [31:0] min_distance_list_2_22_fu_1160_p3;
wire   [16:0] mul_ln6951_1_fu_1198_p0;
wire   [14:0] mul_ln6951_1_fu_1198_p1;
reg   [44:0] ap_NS_fsm;
reg    ap_block_pp1_stage1_subdone;
reg    ap_block_pp1_stage2_subdone;
reg    ap_block_pp1_stage3_subdone;
reg    ap_block_pp1_stage4_subdone;
reg    ap_block_pp1_stage5_subdone;
reg    ap_block_pp1_stage6_subdone;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
wire   [31:0] mul_ln6951_1_fu_1198_p10;
wire   [14:0] mul_ln6951_fu_600_p10;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 45'd1;
#0 index_4 = 1'd0;
#0 knn_set_4_0 = 11'd0;
#0 knn_set_4_1 = 11'd0;
#0 knn_set_4_2 = 11'd0;
#0 knn_set_4_3 = 11'd0;
#0 knn_set_4_4 = 11'd0;
#0 knn_set_4_5 = 11'd0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter4 = 1'b0;
#0 ap_enable_reg_pp2_iter5 = 1'b0;
#0 ap_enable_reg_pp2_iter6 = 1'b0;
#0 ap_enable_reg_pp2_iter7 = 1'b0;
#0 ap_enable_reg_pp2_iter8 = 1'b0;
#0 ap_enable_reg_pp2_iter9 = 1'b0;
#0 ap_enable_reg_pp2_iter10 = 1'b0;
#0 ap_enable_reg_pp2_iter11 = 1'b0;
end

update_knn16_traibkb #(
    .DataWidth( 256 ),
    .AddressRange( 450 ),
    .AddressWidth( 9 ))
training_set_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(training_set_V_address0),
    .ce0(training_set_V_ce0),
    .we0(training_set_V_we0),
    .d0(training_set_V_d0),
    .q0(training_set_V_q0)
);

popcount grp_popcount_fu_347(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .x_V(ret_V_reg_1307),
    .ap_return(grp_popcount_fu_347_ap_return)
);

knn_cluster4_mux_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
knn_cluster4_mux_cud_U2(
    .din0(min_distance_list_0_fu_982_p1),
    .din1(min_distance_list_0_fu_982_p2),
    .din2(min_distance_list_0_fu_982_p3),
    .din3(min_distance_list_0_fu_982_p4),
    .din4(min_distance_list_0_fu_982_p5),
    .din5(min_distance_list_0_fu_982_p6),
    .din6(min_distance_list_0_fu_982_p7),
    .dout(min_distance_list_0_fu_982_p8)
);

knn_cluster4_mul_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 32 ))
knn_cluster4_mul_dEe_U3(
    .din0(mul_ln6951_1_fu_1198_p0),
    .din1(mul_ln6951_1_fu_1198_p1),
    .dout(mul_ln6951_1_fu_1198_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state58))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state11) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp1_stage7_subdone) & (1'b1 == ap_CS_fsm_pp1_stage7)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state36) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state35))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state36)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state36);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter10 <= ap_enable_reg_pp2_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter11 <= ap_enable_reg_pp2_iter10;
        end else if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state35))) begin
            ap_enable_reg_pp2_iter11 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter9 <= ap_enable_reg_pp2_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state49) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state48)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state49))) begin
            ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state49);
        end else if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
        end else if ((1'b1 == ap_CS_fsm_state48)) begin
            ap_enable_reg_pp3_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i1_0_reg_204 <= 11'd0;
    end else if (((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i1_0_reg_204 <= i_9_reg_1221;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6944_fu_552_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        i4_0_reg_237 <= i_10_fu_646_p2;
    end else if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state35))) begin
        i4_0_reg_237 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        i_0_i_reg_259 <= 2'd0;
    end else if (((icmp_ln4454_fu_878_p2 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        i_0_i_reg_259 <= select_ln4454_fu_940_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (index_4_load_load_fu_407_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_192 <= 9'd0;
    end else if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state9))) begin
        i_0_reg_192 <= i_reg_1212;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        indvar_flatten11_reg_248 <= 3'd0;
    end else if (((icmp_ln4454_fu_878_p2 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        indvar_flatten11_reg_248 <= add_ln4454_fu_884_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6944_fu_552_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        indvar_flatten_reg_215 <= add_ln6944_fu_558_p2;
    end else if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state35))) begin
        indvar_flatten_reg_215 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        j_0_i_reg_336 <= 2'd0;
    end else if (((icmp_ln4454_fu_878_p2 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        j_0_i_reg_336 <= j_fu_1000_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6944_reg_1256 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        j_0_reg_226 <= select_ln6951_1_reg_1270;
    end else if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state35))) begin
        j_0_reg_226 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((3'd0 == add_ln4150_fu_791_p2) & (icmp_ln4149_fu_785_p2 == 1'd1) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter11 == 1'b1))) begin
                knn_set_4_0[8 : 0] <= zext_ln4150_21_fu_836_p1[8 : 0];
    end else if ((~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state20))) begin
                knn_set_4_0[0] <= 1'b0;
        knn_set_4_0[1] <= 1'b0;
        knn_set_4_0[2] <= 1'b0;
        knn_set_4_0[3] <= 1'b0;
        knn_set_4_0[4] <= 1'b0;
        knn_set_4_0[5] <= 1'b0;
        knn_set_4_0[6] <= 1'b0;
        knn_set_4_0[7] <= 1'b0;
        knn_set_4_0[8] <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if (((3'd1 == add_ln4150_fu_791_p2) & (icmp_ln4149_fu_785_p2 == 1'd1) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter11 == 1'b1))) begin
                knn_set_4_1[8 : 0] <= zext_ln4150_22_fu_826_p1[8 : 0];
    end else if ((~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state20))) begin
                knn_set_4_1[0] <= 1'b0;
        knn_set_4_1[1] <= 1'b0;
        knn_set_4_1[2] <= 1'b0;
        knn_set_4_1[3] <= 1'b0;
        knn_set_4_1[4] <= 1'b0;
        knn_set_4_1[5] <= 1'b0;
        knn_set_4_1[6] <= 1'b0;
        knn_set_4_1[7] <= 1'b0;
        knn_set_4_1[8] <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if (((3'd2 == add_ln4150_fu_791_p2) & (icmp_ln4149_fu_785_p2 == 1'd1) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter11 == 1'b1))) begin
                knn_set_4_2[8 : 0] <= zext_ln4150_23_fu_816_p1[8 : 0];
    end else if ((~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state20))) begin
                knn_set_4_2[0] <= 1'b0;
        knn_set_4_2[1] <= 1'b0;
        knn_set_4_2[2] <= 1'b0;
        knn_set_4_2[3] <= 1'b0;
        knn_set_4_2[4] <= 1'b0;
        knn_set_4_2[5] <= 1'b0;
        knn_set_4_2[6] <= 1'b0;
        knn_set_4_2[7] <= 1'b0;
        knn_set_4_2[8] <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if (((3'd3 == add_ln4150_fu_791_p2) & (icmp_ln4149_fu_785_p2 == 1'd1) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter11 == 1'b1))) begin
                knn_set_4_3[8 : 0] <= zext_ln4150_24_fu_806_p1[8 : 0];
    end else if ((~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state20))) begin
                knn_set_4_3[0] <= 1'b0;
        knn_set_4_3[1] <= 1'b0;
        knn_set_4_3[2] <= 1'b0;
        knn_set_4_3[3] <= 1'b0;
        knn_set_4_3[4] <= 1'b0;
        knn_set_4_3[5] <= 1'b0;
        knn_set_4_3[6] <= 1'b0;
        knn_set_4_3[7] <= 1'b0;
        knn_set_4_3[8] <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if (((3'd4 == add_ln4150_fu_791_p2) & (icmp_ln4149_fu_785_p2 == 1'd1) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter11 == 1'b1))) begin
                knn_set_4_4[8 : 0] <= zext_ln4150_25_fu_796_p1[8 : 0];
    end else if ((~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state20))) begin
                knn_set_4_4[0] <= 1'b0;
        knn_set_4_4[1] <= 1'b0;
        knn_set_4_4[2] <= 1'b0;
        knn_set_4_4[3] <= 1'b0;
        knn_set_4_4[4] <= 1'b0;
        knn_set_4_4[5] <= 1'b0;
        knn_set_4_4[6] <= 1'b0;
        knn_set_4_4[7] <= 1'b0;
        knn_set_4_4[8] <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if ((~(3'd4 == add_ln4150_fu_791_p2) & ~(3'd3 == add_ln4150_fu_791_p2) & ~(3'd2 == add_ln4150_fu_791_p2) & ~(3'd1 == add_ln4150_fu_791_p2) & ~(3'd0 == add_ln4150_fu_791_p2) & (icmp_ln4149_fu_785_p2 == 1'd1) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter11 == 1'b1))) begin
                knn_set_4_5[8 : 0] <= zext_ln4150_fu_846_p1[8 : 0];
    end else if ((~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state20))) begin
                knn_set_4_5[0] <= 1'b0;
        knn_set_4_5[1] <= 1'b0;
        knn_set_4_5[2] <= 1'b0;
        knn_set_4_5[3] <= 1'b0;
        knn_set_4_5[4] <= 1'b0;
        knn_set_4_5[5] <= 1'b0;
        knn_set_4_5[6] <= 1'b0;
        knn_set_4_5[7] <= 1'b0;
        knn_set_4_5[8] <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        label_list_1_5_reg_292 <= reg_376;
    end else if (((icmp_ln4454_reg_1338 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        label_list_1_5_reg_292 <= select_ln4479_19_fu_1183_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        label_list_2_8_reg_281 <= tmp_V_190_reg_1246;
    end else if (((icmp_ln4454_reg_1338 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        label_list_2_8_reg_281 <= select_ln4474_16_fu_1167_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        min_distance_list_1_10_reg_325 <= tmp_V_188_reg_1236;
    end else if (((icmp_ln4454_reg_1338 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        min_distance_list_1_10_reg_325 <= select_ln4479_20_fu_1191_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        min_distance_list_2_18_reg_314 <= tmp_V_187_reg_1231;
    end else if (((icmp_ln4454_reg_1338 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        min_distance_list_2_18_reg_314 <= select_ln4474_17_fu_1175_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        tmp_V_180_reg_303 <= reg_402;
    end else if (((icmp_ln4454_reg_1338 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        tmp_V_180_reg_303 <= min_distance_list_2_21_fu_1132_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        tmp_V_183_reg_270 <= tmp_V_189_reg_1241;
    end else if (((icmp_ln4454_reg_1338 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        tmp_V_183_reg_270 <= select_ln4474_fu_1124_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i_9_reg_1221 <= i_9_fu_455_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln6860_fu_411_p2 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_1212 <= i_fu_417_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6944_reg_1256_pp2_iter9_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln4141_2_reg_1322 <= icmp_ln4141_2_fu_745_p2;
        select_ln4141_26_reg_1312 <= select_ln4141_26_fu_722_p3;
        select_ln4141_27_reg_1317 <= select_ln4141_27_fu_738_p3;
        select_ln4141_30_reg_1327 <= select_ln4141_30_fu_765_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        icmp_ln4454_reg_1338 <= icmp_ln4454_fu_878_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln6874_reg_1217 <= icmp_ln6874_fu_449_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln6944_reg_1256 <= icmp_ln6944_fu_552_p2;
        icmp_ln6944_reg_1256_pp2_iter1_reg <= icmp_ln6944_reg_1256;
        select_ln6951_2_reg_1280_pp2_iter1_reg <= select_ln6951_2_reg_1280;
        select_ln6951_3_reg_1285_pp2_iter1_reg <= select_ln6951_3_reg_1285;
        select_ln6951_reg_1265_pp2_iter1_reg <= select_ln6951_reg_1265;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp2_stage0_11001)) begin
        icmp_ln6944_reg_1256_pp2_iter10_reg <= icmp_ln6944_reg_1256_pp2_iter9_reg;
        icmp_ln6944_reg_1256_pp2_iter2_reg <= icmp_ln6944_reg_1256_pp2_iter1_reg;
        icmp_ln6944_reg_1256_pp2_iter3_reg <= icmp_ln6944_reg_1256_pp2_iter2_reg;
        icmp_ln6944_reg_1256_pp2_iter4_reg <= icmp_ln6944_reg_1256_pp2_iter3_reg;
        icmp_ln6944_reg_1256_pp2_iter5_reg <= icmp_ln6944_reg_1256_pp2_iter4_reg;
        icmp_ln6944_reg_1256_pp2_iter6_reg <= icmp_ln6944_reg_1256_pp2_iter5_reg;
        icmp_ln6944_reg_1256_pp2_iter7_reg <= icmp_ln6944_reg_1256_pp2_iter6_reg;
        icmp_ln6944_reg_1256_pp2_iter8_reg <= icmp_ln6944_reg_1256_pp2_iter7_reg;
        icmp_ln6944_reg_1256_pp2_iter9_reg <= icmp_ln6944_reg_1256_pp2_iter8_reg;
        select_ln6951_2_reg_1280_pp2_iter10_reg <= select_ln6951_2_reg_1280_pp2_iter9_reg;
        select_ln6951_2_reg_1280_pp2_iter2_reg <= select_ln6951_2_reg_1280_pp2_iter1_reg;
        select_ln6951_2_reg_1280_pp2_iter3_reg <= select_ln6951_2_reg_1280_pp2_iter2_reg;
        select_ln6951_2_reg_1280_pp2_iter4_reg <= select_ln6951_2_reg_1280_pp2_iter3_reg;
        select_ln6951_2_reg_1280_pp2_iter5_reg <= select_ln6951_2_reg_1280_pp2_iter4_reg;
        select_ln6951_2_reg_1280_pp2_iter6_reg <= select_ln6951_2_reg_1280_pp2_iter5_reg;
        select_ln6951_2_reg_1280_pp2_iter7_reg <= select_ln6951_2_reg_1280_pp2_iter6_reg;
        select_ln6951_2_reg_1280_pp2_iter8_reg <= select_ln6951_2_reg_1280_pp2_iter7_reg;
        select_ln6951_2_reg_1280_pp2_iter9_reg <= select_ln6951_2_reg_1280_pp2_iter8_reg;
        select_ln6951_3_reg_1285_pp2_iter2_reg <= select_ln6951_3_reg_1285_pp2_iter1_reg;
        select_ln6951_3_reg_1285_pp2_iter3_reg <= select_ln6951_3_reg_1285_pp2_iter2_reg;
        select_ln6951_3_reg_1285_pp2_iter4_reg <= select_ln6951_3_reg_1285_pp2_iter3_reg;
        select_ln6951_3_reg_1285_pp2_iter5_reg <= select_ln6951_3_reg_1285_pp2_iter4_reg;
        select_ln6951_3_reg_1285_pp2_iter6_reg <= select_ln6951_3_reg_1285_pp2_iter5_reg;
        select_ln6951_3_reg_1285_pp2_iter7_reg <= select_ln6951_3_reg_1285_pp2_iter6_reg;
        select_ln6951_3_reg_1285_pp2_iter8_reg <= select_ln6951_3_reg_1285_pp2_iter7_reg;
        select_ln6951_3_reg_1285_pp2_iter9_reg <= select_ln6951_3_reg_1285_pp2_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_ap_vld)) & (index_4_load_reg_1205 == 1'd0) & (1'b1 == ap_CS_fsm_state20))) begin
        index_4 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        index_4_load_reg_1205 <= index_4;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state35))) begin
        lhs_V_reg_1251 <= lhs_V_fu_507_p8;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln4454_fu_878_p2 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        min_distance_list_0_reg_1352 <= min_distance_list_0_fu_982_p8;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6944_fu_552_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        mul_ln6951_reg_1275 <= mul_ln6951_fu_600_p2;
        select_ln6951_2_reg_1280 <= select_ln6951_2_fu_624_p3;
        select_ln6951_3_reg_1285 <= select_ln6951_3_fu_638_p3;
        select_ln6951_reg_1265 <= select_ln6951_fu_570_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state35)) | (~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state22)) | ((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == ap_block_pp1_stage7_11001) & (1'b1 == ap_CS_fsm_pp1_stage7) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == ap_block_pp1_stage6_11001) & (1'b1 == ap_CS_fsm_pp1_stage6) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == ap_block_pp1_stage5_11001) & (1'b1 == ap_CS_fsm_pp1_stage5) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == ap_block_pp1_stage4_11001) & (1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == ap_block_pp1_stage3_11001) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == ap_block_pp1_stage2_11001) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln6874_fu_449_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | (~((icmp_ln6860_fu_411_p2 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld)) & (icmp_ln6860_fu_411_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        reg_376 <= Input_1_V_V;
    end
end

always @ (posedge ap_clk) begin
    if (((~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state23)) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state3)))) begin
        reg_382 <= Input_1_V_V;
    end
end

always @ (posedge ap_clk) begin
    if (((~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state24)) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state4)))) begin
        reg_386 <= Input_1_V_V;
    end
end

always @ (posedge ap_clk) begin
    if (((~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state25)) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state5)))) begin
        reg_390 <= Input_1_V_V;
    end
end

always @ (posedge ap_clk) begin
    if (((~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state26)) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state6)))) begin
        reg_394 <= Input_1_V_V;
    end
end

always @ (posedge ap_clk) begin
    if (((~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state27)) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state7)))) begin
        reg_398 <= Input_1_V_V;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state29)) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state8)))) begin
        reg_402 <= Input_1_V_V;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6944_reg_1256_pp2_iter2_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        ret_V_reg_1307 <= ret_V_fu_681_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6944_fu_552_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        select_ln6951_1_reg_1270 <= select_ln6951_1_fu_588_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state30))) begin
        tmp_V_187_reg_1231 <= Input_1_V_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state31))) begin
        tmp_V_188_reg_1236 <= Input_1_V_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state33))) begin
        tmp_V_189_reg_1241 <= Input_1_V_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state34))) begin
        tmp_V_190_reg_1246 <= Input_1_V_V;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state21))) begin
        trunc_ln414_reg_1226 <= trunc_ln414_fu_503_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6944_reg_1256 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        trunc_ln6951_mid2_reg_1297 <= {{mul_ln6951_1_fu_1198_p2[30:22]}};
    end
end

always @ (*) begin
    if ((((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state35)) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state34)) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state33)) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state32)) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state31)) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state30)) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state29)) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state28)) | (~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state27)) | (~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state26)) | (~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state25)) | (~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state24)) | (~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state23)) | (~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state22)) | (~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state21)) | (~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state20)) | ((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == ap_block_pp1_stage7_11001) & (1'b1 == ap_CS_fsm_pp1_stage7) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == ap_block_pp1_stage6_11001) & (1'b1 == ap_CS_fsm_pp1_stage6) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == ap_block_pp1_stage5_11001) & (1'b1 == ap_CS_fsm_pp1_stage5) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == ap_block_pp1_stage4_11001) & (1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == ap_block_pp1_stage3_11001) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == ap_block_pp1_stage2_11001) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln6874_fu_449_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state9)) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state8)) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state7)) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state6)) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state5)) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state3)) | (~((icmp_ln6860_fu_411_p2 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld)) & (icmp_ln6860_fu_411_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        Input_1_V_V_ap_ack = 1'b1;
    end else begin
        Input_1_V_V_ap_ack = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == ap_block_pp1_stage7) & (1'b1 == ap_CS_fsm_pp1_stage7) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == ap_block_pp1_stage6) & (1'b1 == ap_CS_fsm_pp1_stage6) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == ap_block_pp1_stage5) & (1'b1 == ap_CS_fsm_pp1_stage5) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == ap_block_pp1_stage4) & (1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == ap_block_pp1_stage3) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln6874_reg_1217 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage2)) | ((icmp_ln6874_reg_1217 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage1)) | ((icmp_ln6874_fu_449_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0)) | ((icmp_ln6860_fu_411_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        Input_1_V_V_blk_n = Input_1_V_V_ap_vld;
    end else begin
        Input_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | ((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == ap_block_pp1_stage7) & (1'b1 == ap_CS_fsm_pp1_stage7) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == ap_block_pp1_stage6) & (1'b1 == ap_CS_fsm_pp1_stage6) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == ap_block_pp1_stage5) & (1'b1 == ap_CS_fsm_pp1_stage5) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == ap_block_pp1_stage4) & (1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == ap_block_pp1_stage3) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln6874_reg_1217 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage2)) | ((icmp_ln6874_reg_1217 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage1)) | ((icmp_ln6874_reg_1217 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0)))) begin
        Output_1_V_V_blk_n = Output_1_V_V_full_n;
    end else begin
        Output_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state58))) begin
        Output_1_V_V_din = label_list_1_5_reg_292;
    end else if (((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state57))) begin
        Output_1_V_V_din = label_list_2_8_reg_281;
    end else if (((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state56))) begin
        Output_1_V_V_din = tmp_V_183_reg_270;
    end else if (((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state54))) begin
        Output_1_V_V_din = min_distance_list_1_10_reg_325;
    end else if (((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state53))) begin
        Output_1_V_V_din = min_distance_list_2_18_reg_314;
    end else if (((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state52))) begin
        Output_1_V_V_din = tmp_V_180_reg_303;
    end else if ((((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state55)) | ((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state51)))) begin
        Output_1_V_V_din = 32'd0;
    end else if (((~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state27)) | (~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state26)) | (~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state25)) | (~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state24)) | (~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state23)) | (~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state22)) | (~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state21)) | (~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state20)))) begin
        Output_1_V_V_din = Input_1_V_V;
    end else if ((((icmp_ln6874_reg_1217 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage7) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage7_01001)) | ((1'b0 == ap_block_pp1_stage6_01001) & (icmp_ln6874_reg_1217 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage6) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage5_01001) & (icmp_ln6874_reg_1217 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage5) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage4_01001) & (icmp_ln6874_reg_1217 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage3_01001) & (icmp_ln6874_reg_1217 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage2_01001) & (icmp_ln6874_reg_1217 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage1_01001) & (icmp_ln6874_reg_1217 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln6874_reg_1217 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_01001)))) begin
        Output_1_V_V_din = reg_376;
    end else begin
        Output_1_V_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state58)) | ((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state57)) | ((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state56)) | ((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state55)) | ((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state54)) | ((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state53)) | ((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state52)) | ((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state51)) | (~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state27)) | (~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state26)) | (~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state25)) | (~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state24)) | (~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state23)) | (~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state22)) | (~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state21)) | (~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state20)) | ((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == ap_block_pp1_stage7_11001) & (1'b1 == ap_CS_fsm_pp1_stage7) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == ap_block_pp1_stage6_11001) & (1'b1 == ap_CS_fsm_pp1_stage6) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == ap_block_pp1_stage5_11001) & (1'b1 == ap_CS_fsm_pp1_stage5) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == ap_block_pp1_stage4_11001) & (1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == ap_block_pp1_stage3_11001) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == ap_block_pp1_stage2_11001) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        Output_1_V_V_write = 1'b1;
    end else begin
        Output_1_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln6874_fu_449_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state11 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state11 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln6944_fu_552_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state36 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state36 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln4454_fu_878_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state49 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state49 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state58))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter11 == 1'b0) & (ap_enable_reg_pp2_iter10 == 1'b0) & (ap_enable_reg_pp2_iter9 == 1'b0) & (ap_enable_reg_pp2_iter8 == 1'b0) & (ap_enable_reg_pp2_iter7 == 1'b0) & (ap_enable_reg_pp2_iter6 == 1'b0) & (ap_enable_reg_pp2_iter5 == 1'b0) & (ap_enable_reg_pp2_iter4 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln6874_reg_1217 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        ap_phi_mux_i1_0_phi_fu_208_p4 = i_9_reg_1221;
    end else begin
        ap_phi_mux_i1_0_phi_fu_208_p4 = i1_0_reg_204;
    end
end

always @ (*) begin
    if (((icmp_ln6944_reg_1256 == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_j_0_phi_fu_230_p4 = select_ln6951_1_reg_1270;
    end else begin
        ap_phi_mux_j_0_phi_fu_230_p4 = j_0_reg_226;
    end
end

always @ (*) begin
    if (((3'd0 == add_ln4150_fu_791_p2) & (1'b0 == ap_block_pp2_stage0) & (icmp_ln4149_fu_785_p2 == 1'd1) & (ap_enable_reg_pp2_iter11 == 1'b1))) begin
        ap_sig_allocacmp_knn_set_4_0_load = zext_ln4150_21_fu_836_p1;
    end else begin
        ap_sig_allocacmp_knn_set_4_0_load = knn_set_4_0;
    end
end

always @ (*) begin
    if (((3'd1 == add_ln4150_fu_791_p2) & (1'b0 == ap_block_pp2_stage0) & (icmp_ln4149_fu_785_p2 == 1'd1) & (ap_enable_reg_pp2_iter11 == 1'b1))) begin
        ap_sig_allocacmp_knn_set_4_1_load = zext_ln4150_22_fu_826_p1;
    end else begin
        ap_sig_allocacmp_knn_set_4_1_load = knn_set_4_1;
    end
end

always @ (*) begin
    if (((3'd2 == add_ln4150_fu_791_p2) & (1'b0 == ap_block_pp2_stage0) & (icmp_ln4149_fu_785_p2 == 1'd1) & (ap_enable_reg_pp2_iter11 == 1'b1))) begin
        ap_sig_allocacmp_knn_set_4_2_load = zext_ln4150_23_fu_816_p1;
    end else begin
        ap_sig_allocacmp_knn_set_4_2_load = knn_set_4_2;
    end
end

always @ (*) begin
    if (((3'd3 == add_ln4150_fu_791_p2) & (1'b0 == ap_block_pp2_stage0) & (icmp_ln4149_fu_785_p2 == 1'd1) & (ap_enable_reg_pp2_iter11 == 1'b1))) begin
        ap_sig_allocacmp_knn_set_4_3_load = zext_ln4150_24_fu_806_p1;
    end else begin
        ap_sig_allocacmp_knn_set_4_3_load = knn_set_4_3;
    end
end

always @ (*) begin
    if (((3'd4 == add_ln4150_fu_791_p2) & (1'b0 == ap_block_pp2_stage0) & (icmp_ln4149_fu_785_p2 == 1'd1) & (ap_enable_reg_pp2_iter11 == 1'b1))) begin
        ap_sig_allocacmp_knn_set_4_4_load = zext_ln4150_25_fu_796_p1;
    end else begin
        ap_sig_allocacmp_knn_set_4_4_load = knn_set_4_4;
    end
end

always @ (*) begin
    if ((~(3'd4 == add_ln4150_fu_791_p2) & ~(3'd3 == add_ln4150_fu_791_p2) & ~(3'd2 == add_ln4150_fu_791_p2) & ~(3'd1 == add_ln4150_fu_791_p2) & ~(3'd0 == add_ln4150_fu_791_p2) & (1'b0 == ap_block_pp2_stage0) & (icmp_ln4149_fu_785_p2 == 1'd1) & (ap_enable_reg_pp2_iter11 == 1'b1))) begin
        ap_sig_allocacmp_knn_set_4_5_load = zext_ln4150_fu_846_p1;
    end else begin
        ap_sig_allocacmp_knn_set_4_5_load = knn_set_4_5;
    end
end

always @ (*) begin
    if (((icmp_ln4454_fu_878_p2 == 1'd0) & (1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        grp_load_fu_352_p1 = knn_set_4_0;
    end else if (((icmp_ln6944_reg_1256_pp2_iter9_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (select_ln6951_3_reg_1285_pp2_iter9_reg == 1'd1) & (ap_enable_reg_pp2_iter10 == 1'b1))) begin
        grp_load_fu_352_p1 = ap_sig_allocacmp_knn_set_4_0_load;
    end else begin
        grp_load_fu_352_p1 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln4454_fu_878_p2 == 1'd0) & (1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        grp_load_fu_356_p1 = knn_set_4_3;
    end else if (((select_ln6951_3_reg_1285_pp2_iter9_reg == 1'd0) & (icmp_ln6944_reg_1256_pp2_iter9_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter10 == 1'b1))) begin
        grp_load_fu_356_p1 = ap_sig_allocacmp_knn_set_4_3_load;
    end else begin
        grp_load_fu_356_p1 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln4454_fu_878_p2 == 1'd0) & (1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        grp_load_fu_360_p1 = knn_set_4_1;
    end else if (((icmp_ln6944_reg_1256_pp2_iter9_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (select_ln6951_3_reg_1285_pp2_iter9_reg == 1'd1) & (ap_enable_reg_pp2_iter10 == 1'b1))) begin
        grp_load_fu_360_p1 = ap_sig_allocacmp_knn_set_4_1_load;
    end else begin
        grp_load_fu_360_p1 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln4454_fu_878_p2 == 1'd0) & (1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        grp_load_fu_364_p1 = knn_set_4_4;
    end else if (((select_ln6951_3_reg_1285_pp2_iter9_reg == 1'd0) & (icmp_ln6944_reg_1256_pp2_iter9_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter10 == 1'b1))) begin
        grp_load_fu_364_p1 = ap_sig_allocacmp_knn_set_4_4_load;
    end else begin
        grp_load_fu_364_p1 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln4454_fu_878_p2 == 1'd0) & (1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        grp_load_fu_368_p1 = knn_set_4_2;
    end else if (((icmp_ln6944_reg_1256_pp2_iter9_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (select_ln6951_3_reg_1285_pp2_iter9_reg == 1'd1) & (ap_enable_reg_pp2_iter10 == 1'b1))) begin
        grp_load_fu_368_p1 = ap_sig_allocacmp_knn_set_4_2_load;
    end else begin
        grp_load_fu_368_p1 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln4454_fu_878_p2 == 1'd0) & (1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        grp_load_fu_372_p1 = knn_set_4_5;
    end else if (((select_ln6951_3_reg_1285_pp2_iter9_reg == 1'd0) & (icmp_ln6944_reg_1256_pp2_iter9_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter10 == 1'b1))) begin
        grp_load_fu_372_p1 = ap_sig_allocacmp_knn_set_4_5_load;
    end else begin
        grp_load_fu_372_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state58))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        training_set_V_address0 = zext_ln6950_fu_672_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        training_set_V_address0 = zext_ln6863_fu_423_p1;
    end else begin
        training_set_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state9)))) begin
        training_set_V_ce0 = 1'b1;
    end else begin
        training_set_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state9))) begin
        training_set_V_we0 = 1'b1;
    end else begin
        training_set_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (index_4_load_load_fu_407_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (index_4_load_load_fu_407_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((icmp_ln6860_fu_411_p2 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld)) & (icmp_ln6860_fu_411_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if ((~((icmp_ln6860_fu_411_p2 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln6860_fu_411_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln6874_fu_449_p2 == 1'd1)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln6874_fu_449_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((1'b0 == ap_block_pp1_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_pp1_stage2 : begin
            if ((1'b0 == ap_block_pp1_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end
        end
        ap_ST_fsm_pp1_stage3 : begin
            if ((1'b0 == ap_block_pp1_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end
        end
        ap_ST_fsm_pp1_stage4 : begin
            if ((1'b0 == ap_block_pp1_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage4;
            end
        end
        ap_ST_fsm_pp1_stage5 : begin
            if ((1'b0 == ap_block_pp1_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage5;
            end
        end
        ap_ST_fsm_pp1_stage6 : begin
            if ((1'b0 == ap_block_pp1_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage6;
            end
        end
        ap_ST_fsm_pp1_stage7 : begin
            if ((1'b0 == ap_block_pp1_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage7;
            end
        end
        ap_ST_fsm_state20 : begin
            if ((~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            if ((~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            if ((~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if ((~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if ((~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            if ((~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            if ((~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            if ((~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_ap_vld)) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state28))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state29 : begin
            if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state31))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state32))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state33 : begin
            if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state34))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state35 : begin
            if (((1'b1 == Input_1_V_V_ap_vld) & (1'b1 == ap_CS_fsm_state35))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln6944_fu_552_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1)) & ~((ap_enable_reg_pp2_iter10 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter11 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter10 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter11 == 1'b1)) | ((ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln6944_fu_552_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if (~((1'b0 == ap_block_pp3_stage0_subdone) & (icmp_ln4454_fu_878_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if (((1'b0 == ap_block_pp3_stage0_subdone) & (icmp_ln4454_fu_878_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state51 : begin
            if (((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state51))) begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end
        end
        ap_ST_fsm_state52 : begin
            if (((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state52))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end
        end
        ap_ST_fsm_state53 : begin
            if (((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state53))) begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end
        end
        ap_ST_fsm_state54 : begin
            if (((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state54))) begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end
        end
        ap_ST_fsm_state55 : begin
            if (((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state55))) begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end
        end
        ap_ST_fsm_state56 : begin
            if (((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state56))) begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end
        end
        ap_ST_fsm_state57 : begin
            if (((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state57))) begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end
        end
        ap_ST_fsm_state58 : begin
            if (((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state58))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln4150_fu_791_p2 = (select_ln6951_2_reg_1280_pp2_iter10_reg + zext_ln4141_5_fu_782_p1);

assign add_ln4454_5_fu_904_p2 = (2'd1 + i_0_i_reg_259);

assign add_ln4454_fu_884_p2 = (3'd1 + indvar_flatten11_reg_248);

assign add_ln6944_1_fu_578_p2 = (2'd1 + ap_phi_mux_j_0_phi_fu_230_p4);

assign add_ln6944_fu_558_p2 = (9'd1 + indvar_flatten_reg_215);

assign add_ln6950_fu_667_p2 = (trunc_ln6951_mid2_reg_1297 + zext_ln6947_fu_664_p1);

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp1_stage2 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp1_stage3 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp1_stage4 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp1_stage5 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp1_stage6 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp1_stage7 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = (((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == Output_1_V_V_full_n) & (ap_enable_reg_pp1_iter1 == 1'b1)) | ((icmp_ln6874_fu_449_p2 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld) & (ap_enable_reg_pp1_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == Output_1_V_V_full_n) & (ap_enable_reg_pp1_iter1 == 1'b1)) | ((icmp_ln6874_fu_449_p2 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld) & (ap_enable_reg_pp1_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == Output_1_V_V_full_n) & (ap_enable_reg_pp1_iter1 == 1'b1)) | ((icmp_ln6874_fu_449_p2 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld) & (ap_enable_reg_pp1_iter0 == 1'b1)));
end

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage1_01001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld))));
end

always @ (*) begin
    ap_block_pp1_stage1_11001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld))));
end

always @ (*) begin
    ap_block_pp1_stage1_subdone = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld))));
end

assign ap_block_pp1_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage2_01001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld))));
end

always @ (*) begin
    ap_block_pp1_stage2_11001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld))));
end

always @ (*) begin
    ap_block_pp1_stage2_subdone = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld))));
end

assign ap_block_pp1_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage3_01001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld))));
end

always @ (*) begin
    ap_block_pp1_stage3_11001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld))));
end

always @ (*) begin
    ap_block_pp1_stage3_subdone = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld))));
end

assign ap_block_pp1_stage4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage4_01001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld))));
end

always @ (*) begin
    ap_block_pp1_stage4_11001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld))));
end

always @ (*) begin
    ap_block_pp1_stage4_subdone = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld))));
end

assign ap_block_pp1_stage5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage5_01001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld))));
end

always @ (*) begin
    ap_block_pp1_stage5_11001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld))));
end

always @ (*) begin
    ap_block_pp1_stage5_subdone = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld))));
end

assign ap_block_pp1_stage6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage6_01001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld))));
end

always @ (*) begin
    ap_block_pp1_stage6_11001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld))));
end

always @ (*) begin
    ap_block_pp1_stage6_subdone = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld))));
end

assign ap_block_pp1_stage7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage7_01001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld))));
end

always @ (*) begin
    ap_block_pp1_stage7_11001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld))));
end

always @ (*) begin
    ap_block_pp1_stage7_subdone = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld))));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

always @ (*) begin
    ap_block_state11_pp1_stage0_iter0 = ((icmp_ln6874_fu_449_p2 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld));
end

always @ (*) begin
    ap_block_state12_pp1_stage1_iter0 = (((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld)));
end

always @ (*) begin
    ap_block_state13_pp1_stage2_iter0 = (((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld)));
end

always @ (*) begin
    ap_block_state14_pp1_stage3_iter0 = (((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld)));
end

always @ (*) begin
    ap_block_state15_pp1_stage4_iter0 = (((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld)));
end

always @ (*) begin
    ap_block_state16_pp1_stage5_iter0 = (((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld)));
end

always @ (*) begin
    ap_block_state17_pp1_stage6_iter0 = (((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld)));
end

always @ (*) begin
    ap_block_state18_pp1_stage7_iter0 = (((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld)));
end

always @ (*) begin
    ap_block_state19_pp1_stage0_iter1 = ((icmp_ln6874_reg_1217 == 1'd0) & (1'b0 == Output_1_V_V_full_n));
end

always @ (*) begin
    ap_block_state2 = ((icmp_ln6860_fu_411_p2 == 1'd0) & (1'b0 == Input_1_V_V_ap_vld));
end

always @ (*) begin
    ap_block_state20 = ((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_ap_vld));
end

always @ (*) begin
    ap_block_state21 = ((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_ap_vld));
end

always @ (*) begin
    ap_block_state22 = ((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_ap_vld));
end

always @ (*) begin
    ap_block_state23 = ((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_ap_vld));
end

always @ (*) begin
    ap_block_state24 = ((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_ap_vld));
end

always @ (*) begin
    ap_block_state25 = ((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_ap_vld));
end

always @ (*) begin
    ap_block_state26 = ((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_ap_vld));
end

always @ (*) begin
    ap_block_state27 = ((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_ap_vld));
end

assign ap_block_state36_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp2_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp2_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp2_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp2_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp2_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp2_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp2_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp2_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign i_10_fu_646_p2 = (select_ln6951_fu_570_p3 + 8'd1);

assign i_9_fu_455_p2 = (ap_phi_mux_i1_0_phi_fu_208_p4 + 11'd1);

assign i_fu_417_p2 = (i_0_reg_192 + 9'd1);

assign icmp_ln4141_1_fu_716_p2 = ((select_ln4141_25_fu_709_p3 > select_ln4141_fu_694_p3) ? 1'b1 : 1'b0);

assign icmp_ln4141_2_fu_745_p2 = ((select_ln4141_27_fu_738_p3 > select_ln4141_26_fu_722_p3) ? 1'b1 : 1'b0);

assign icmp_ln4141_7_fu_632_p2 = ((shl_ln6951_mid1_fu_610_p3 == zext_ln6951_1_fu_584_p1) ? 1'b1 : 1'b0);

assign icmp_ln4141_fu_546_p2 = ((shl_ln_fu_532_p3 == zext_ln6951_fu_524_p1) ? 1'b1 : 1'b0);

assign icmp_ln4149_fu_785_p2 = ((zext_ln4141_fu_773_p1 < select_ln4141_28_fu_777_p3) ? 1'b1 : 1'b0);

assign icmp_ln4454_fu_878_p2 = ((indvar_flatten11_reg_248 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln4456_fu_890_p2 = ((j_0_i_reg_336 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln4463_1_fu_1019_p2 = (($signed(min_distance_list_0_reg_1352) < $signed(min_distance_list_2_18_reg_314)) ? 1'b1 : 1'b0);

assign icmp_ln4463_2_fu_1046_p2 = (($signed(min_distance_list_0_reg_1352) < $signed(tmp_V_180_reg_303)) ? 1'b1 : 1'b0);

assign icmp_ln4463_8_fu_1061_p2 = ((tmp_12_fu_1051_p4 != 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln4463_fu_1006_p2 = (($signed(min_distance_list_0_reg_1352) < $signed(min_distance_list_1_10_reg_325)) ? 1'b1 : 1'b0);

assign icmp_ln4474_1_fu_1140_p2 = ((select_ln4463_10_fu_1079_p3 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln4474_fu_1097_p2 = ((tmp_13_fu_1087_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln4479_1_fu_1146_p2 = ((select_ln4463_10_fu_1079_p3 == 6'd1) ? 1'b1 : 1'b0);

assign icmp_ln4479_fu_1103_p2 = ((select_ln4463_10_fu_1079_p3 == 6'd2) ? 1'b1 : 1'b0);

assign icmp_ln6860_fu_411_p2 = ((i_0_reg_192 == 9'd450) ? 1'b1 : 1'b0);

assign icmp_ln6874_fu_449_p2 = ((ap_phi_mux_i1_0_phi_fu_208_p4 == 11'd1800) ? 1'b1 : 1'b0);

assign icmp_ln6944_fu_552_p2 = ((indvar_flatten_reg_215 == 9'd450) ? 1'b1 : 1'b0);

assign icmp_ln6947_fu_564_p2 = ((i4_0_reg_237 == 8'd225) ? 1'b1 : 1'b0);

assign index_4_load_load_fu_407_p1 = index_4;

assign j_fu_1000_p2 = (2'd1 + select_ln4463_11_fu_896_p3);

assign label_list_2_9_fu_1152_p3 = ((icmp_ln4479_1_fu_1146_p2[0:0] === 1'b1) ? 32'd7 : label_list_2_8_reg_281);

assign lhs_V_fu_507_p8 = {{{{{{{trunc_ln414_reg_1226}, {reg_376}}, {reg_382}}, {reg_386}}, {reg_390}}, {reg_394}}, {reg_398}};

assign min_distance_list_0_fu_982_p1 = grp_load_fu_352_p1;

assign min_distance_list_0_fu_982_p2 = grp_load_fu_360_p1;

assign min_distance_list_0_fu_982_p3 = grp_load_fu_368_p1;

assign min_distance_list_0_fu_982_p4 = grp_load_fu_356_p1;

assign min_distance_list_0_fu_982_p5 = grp_load_fu_364_p1;

assign min_distance_list_0_fu_982_p6 = grp_load_fu_372_p1;

assign min_distance_list_0_fu_982_p7 = (select_ln4463_12_fu_932_p3 + zext_ln4463_5_fu_948_p1);

assign min_distance_list_2_20_fu_1117_p3 = ((icmp_ln4479_fu_1103_p2[0:0] === 1'b1) ? min_distance_list_0_reg_1352 : tmp_V_180_reg_303);

assign min_distance_list_2_21_fu_1132_p3 = ((icmp_ln4474_fu_1097_p2[0:0] === 1'b1) ? min_distance_list_2_18_reg_314 : min_distance_list_2_20_fu_1117_p3);

assign min_distance_list_2_22_fu_1160_p3 = ((icmp_ln4479_1_fu_1146_p2[0:0] === 1'b1) ? min_distance_list_0_reg_1352 : min_distance_list_2_18_reg_314);

assign mul_ln6951_1_fu_1198_p0 = 32'd52429;

assign mul_ln6951_1_fu_1198_p1 = mul_ln6951_1_fu_1198_p10;

assign mul_ln6951_1_fu_1198_p10 = mul_ln6951_reg_1275;

assign mul_ln6951_fu_600_p1 = mul_ln6951_fu_600_p10;

assign mul_ln6951_fu_600_p10 = select_ln6951_1_fu_588_p3;

assign mul_ln6951_fu_600_p2 = ($signed(15'd18000) * $signed({{1'b0}, {mul_ln6951_fu_600_p1}}));

assign not_icmp_ln4463_fu_1024_p2 = (icmp_ln4463_fu_1006_p2 ^ 1'd1);

assign or_ln4141_fu_759_p2 = (icmp_ln4141_2_fu_745_p2 | icmp_ln4141_1_fu_716_p2);

assign phitmp_i_1_cast_cast_fu_1030_p1 = not_icmp_ln4463_fu_1024_p2;

assign phitmp_i_2_cast_cast_fu_1075_p1 = phitmp_i_2_fu_1067_p3;

assign phitmp_i_2_fu_1067_p3 = ((icmp_ln4463_8_fu_1061_p2[0:0] === 1'b1) ? 2'd2 : trunc_ln4463_10_fu_1042_p1);

assign ret_V_fu_681_p2 = (rhs_V_fu_677_p1 ^ lhs_V_reg_1251);

assign rhs_V_fu_677_p1 = training_set_V_q0[195:0];

assign select_ln4141_25_fu_709_p3 = ((select_ln6951_3_reg_1285_pp2_iter9_reg[0:0] === 1'b1) ? trunc_ln4141_22_fu_701_p1 : trunc_ln4141_23_fu_705_p1);

assign select_ln4141_26_fu_722_p3 = ((icmp_ln4141_1_fu_716_p2[0:0] === 1'b1) ? select_ln4141_25_fu_709_p3 : select_ln4141_fu_694_p3);

assign select_ln4141_27_fu_738_p3 = ((select_ln6951_3_reg_1285_pp2_iter9_reg[0:0] === 1'b1) ? trunc_ln4141_24_fu_730_p1 : trunc_ln4141_25_fu_734_p1);

assign select_ln4141_28_fu_777_p3 = ((icmp_ln4141_2_reg_1322[0:0] === 1'b1) ? select_ln4141_27_reg_1317 : select_ln4141_26_reg_1312);

assign select_ln4141_29_fu_751_p3 = ((icmp_ln4141_2_fu_745_p2[0:0] === 1'b1) ? 2'd2 : 2'd1);

assign select_ln4141_30_fu_765_p3 = ((or_ln4141_fu_759_p2[0:0] === 1'b1) ? select_ln4141_29_fu_751_p3 : 2'd0);

assign select_ln4141_fu_694_p3 = ((select_ln6951_3_reg_1285_pp2_iter9_reg[0:0] === 1'b1) ? trunc_ln4141_fu_686_p1 : trunc_ln4141_21_fu_690_p1);

assign select_ln4454_fu_940_p3 = ((icmp_ln4456_fu_890_p2[0:0] === 1'b1) ? add_ln4454_5_fu_904_p2 : i_0_i_reg_259);

assign select_ln4463_10_fu_1079_p3 = ((icmp_ln4463_2_fu_1046_p2[0:0] === 1'b1) ? phitmp_i_2_cast_cast_fu_1075_p1 : select_ln4463_9_fu_1034_p3);

assign select_ln4463_11_fu_896_p3 = ((icmp_ln4456_fu_890_p2[0:0] === 1'b1) ? 2'd0 : j_0_i_reg_336);

assign select_ln4463_12_fu_932_p3 = ((icmp_ln4456_fu_890_p2[0:0] === 1'b1) ? sub_ln4463_5_fu_926_p2 : sub_ln4463_fu_872_p2);

assign select_ln4463_9_fu_1034_p3 = ((icmp_ln4463_1_fu_1019_p2[0:0] === 1'b1) ? phitmp_i_1_cast_cast_fu_1030_p1 : select_ln4463_fu_1011_p3);

assign select_ln4463_fu_1011_p3 = ((icmp_ln4463_fu_1006_p2[0:0] === 1'b1) ? 6'd0 : 6'd40);

assign select_ln4474_16_fu_1167_p3 = ((icmp_ln4474_1_fu_1140_p2[0:0] === 1'b1) ? label_list_1_5_reg_292 : label_list_2_9_fu_1152_p3);

assign select_ln4474_17_fu_1175_p3 = ((icmp_ln4474_1_fu_1140_p2[0:0] === 1'b1) ? min_distance_list_1_10_reg_325 : min_distance_list_2_22_fu_1160_p3);

assign select_ln4474_fu_1124_p3 = ((icmp_ln4474_fu_1097_p2[0:0] === 1'b1) ? label_list_2_8_reg_281 : select_ln4479_fu_1109_p3);

assign select_ln4479_19_fu_1183_p3 = ((icmp_ln4474_1_fu_1140_p2[0:0] === 1'b1) ? 32'd7 : label_list_1_5_reg_292);

assign select_ln4479_20_fu_1191_p3 = ((icmp_ln4474_1_fu_1140_p2[0:0] === 1'b1) ? min_distance_list_0_reg_1352 : min_distance_list_1_10_reg_325);

assign select_ln4479_fu_1109_p3 = ((icmp_ln4479_fu_1103_p2[0:0] === 1'b1) ? 32'd7 : tmp_V_183_reg_270);

assign select_ln6951_1_fu_588_p3 = ((icmp_ln6947_fu_564_p2[0:0] === 1'b1) ? add_ln6944_1_fu_578_p2 : ap_phi_mux_j_0_phi_fu_230_p4);

assign select_ln6951_2_fu_624_p3 = ((icmp_ln6947_fu_564_p2[0:0] === 1'b1) ? sub_ln6951_1_fu_618_p2 : sub_ln6951_fu_540_p2);

assign select_ln6951_3_fu_638_p3 = ((icmp_ln6947_fu_564_p2[0:0] === 1'b1) ? icmp_ln4141_7_fu_632_p2 : icmp_ln4141_fu_546_p2);

assign select_ln6951_fu_570_p3 = ((icmp_ln6947_fu_564_p2[0:0] === 1'b1) ? 8'd0 : i4_0_reg_237);

assign shl_ln4463_mid1_fu_918_p3 = {{trunc_ln4463_9_fu_914_p1}, {2'd0}};

assign shl_ln5_fu_864_p3 = {{trunc_ln4463_fu_860_p1}, {2'd0}};

assign shl_ln6951_mid1_fu_610_p3 = {{trunc_ln6951_1_fu_606_p1}, {2'd0}};

assign shl_ln_fu_532_p3 = {{trunc_ln6951_fu_528_p1}, {2'd0}};

assign start_out = real_start;

assign sub_ln4463_5_fu_926_p2 = (shl_ln4463_mid1_fu_918_p3 - zext_ln4463_32_fu_910_p1);

assign sub_ln4463_fu_872_p2 = (shl_ln5_fu_864_p3 - zext_ln4463_fu_856_p1);

assign sub_ln6951_1_fu_618_p2 = (shl_ln6951_mid1_fu_610_p3 - zext_ln6951_1_fu_584_p1);

assign sub_ln6951_fu_540_p2 = (shl_ln_fu_532_p3 - zext_ln6951_fu_524_p1);

assign tmp_12_fu_1051_p4 = {{select_ln4463_9_fu_1034_p3[5:2]}};

assign tmp_13_fu_1087_p4 = {{select_ln4463_10_fu_1079_p3[5:1]}};

assign training_set_V_d0 = {{{{{{{{reg_376}, {reg_382}}, {reg_386}}, {reg_390}}, {reg_394}}, {reg_398}}, {reg_402}}, {Input_1_V_V}};

assign trunc_ln4141_21_fu_690_p1 = grp_load_fu_356_p1[8:0];

assign trunc_ln4141_22_fu_701_p1 = grp_load_fu_360_p1[8:0];

assign trunc_ln4141_23_fu_705_p1 = grp_load_fu_364_p1[8:0];

assign trunc_ln4141_24_fu_730_p1 = grp_load_fu_368_p1[8:0];

assign trunc_ln4141_25_fu_734_p1 = grp_load_fu_372_p1[8:0];

assign trunc_ln4141_fu_686_p1 = grp_load_fu_352_p1[8:0];

assign trunc_ln414_fu_503_p1 = Input_1_V_V[3:0];

assign trunc_ln4463_10_fu_1042_p1 = select_ln4463_9_fu_1034_p3[1:0];

assign trunc_ln4463_9_fu_914_p1 = add_ln4454_5_fu_904_p2[0:0];

assign trunc_ln4463_fu_860_p1 = i_0_i_reg_259[0:0];

assign trunc_ln6951_1_fu_606_p1 = add_ln6944_1_fu_578_p2[0:0];

assign trunc_ln6951_fu_528_p1 = ap_phi_mux_j_0_phi_fu_230_p4[0:0];

assign zext_ln4141_5_fu_782_p1 = select_ln4141_30_reg_1327;

assign zext_ln4141_fu_773_p1 = grp_popcount_fu_347_ap_return;

assign zext_ln4150_21_fu_836_p1 = grp_popcount_fu_347_ap_return;

assign zext_ln4150_22_fu_826_p1 = grp_popcount_fu_347_ap_return;

assign zext_ln4150_23_fu_816_p1 = grp_popcount_fu_347_ap_return;

assign zext_ln4150_24_fu_806_p1 = grp_popcount_fu_347_ap_return;

assign zext_ln4150_25_fu_796_p1 = grp_popcount_fu_347_ap_return;

assign zext_ln4150_fu_846_p1 = grp_popcount_fu_347_ap_return;

assign zext_ln4463_32_fu_910_p1 = add_ln4454_5_fu_904_p2;

assign zext_ln4463_5_fu_948_p1 = select_ln4463_11_fu_896_p3;

assign zext_ln4463_fu_856_p1 = i_0_i_reg_259;

assign zext_ln6863_fu_423_p1 = i_0_reg_192;

assign zext_ln6947_fu_664_p1 = select_ln6951_reg_1265_pp2_iter1_reg;

assign zext_ln6950_fu_672_p1 = add_ln6950_fu_667_p2;

assign zext_ln6951_1_fu_584_p1 = add_ln6944_1_fu_578_p2;

assign zext_ln6951_fu_524_p1 = ap_phi_mux_j_0_phi_fu_230_p4;

always @ (posedge ap_clk) begin
    knn_set_4_0[10:9] <= 2'b00;
    knn_set_4_1[10:9] <= 2'b00;
    knn_set_4_2[10:9] <= 2'b00;
    knn_set_4_3[10:9] <= 2'b00;
    knn_set_4_4[10:9] <= 2'b00;
    knn_set_4_5[10:9] <= 2'b00;
end

endmodule //update_knn16
