// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module update_knn2 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        Input_1_V_V_dout,
        Input_1_V_V_empty_n,
        Input_1_V_V_read,
        Output_1_V_V_din,
        Output_1_V_V_full_n,
        Output_1_V_V_write
);

parameter    ap_ST_fsm_state1 = 45'd1;
parameter    ap_ST_fsm_pp0_stage0 = 45'd2;
parameter    ap_ST_fsm_pp0_stage1 = 45'd4;
parameter    ap_ST_fsm_pp0_stage2 = 45'd8;
parameter    ap_ST_fsm_pp0_stage3 = 45'd16;
parameter    ap_ST_fsm_pp0_stage4 = 45'd32;
parameter    ap_ST_fsm_pp0_stage5 = 45'd64;
parameter    ap_ST_fsm_pp0_stage6 = 45'd128;
parameter    ap_ST_fsm_pp0_stage7 = 45'd256;
parameter    ap_ST_fsm_state11 = 45'd512;
parameter    ap_ST_fsm_pp1_stage0 = 45'd1024;
parameter    ap_ST_fsm_pp1_stage1 = 45'd2048;
parameter    ap_ST_fsm_pp1_stage2 = 45'd4096;
parameter    ap_ST_fsm_pp1_stage3 = 45'd8192;
parameter    ap_ST_fsm_pp1_stage4 = 45'd16384;
parameter    ap_ST_fsm_pp1_stage5 = 45'd32768;
parameter    ap_ST_fsm_pp1_stage6 = 45'd65536;
parameter    ap_ST_fsm_pp1_stage7 = 45'd131072;
parameter    ap_ST_fsm_state21 = 45'd262144;
parameter    ap_ST_fsm_state22 = 45'd524288;
parameter    ap_ST_fsm_state23 = 45'd1048576;
parameter    ap_ST_fsm_state24 = 45'd2097152;
parameter    ap_ST_fsm_state25 = 45'd4194304;
parameter    ap_ST_fsm_state26 = 45'd8388608;
parameter    ap_ST_fsm_state27 = 45'd16777216;
parameter    ap_ST_fsm_state28 = 45'd33554432;
parameter    ap_ST_fsm_state29 = 45'd67108864;
parameter    ap_ST_fsm_state30 = 45'd134217728;
parameter    ap_ST_fsm_state31 = 45'd268435456;
parameter    ap_ST_fsm_state32 = 45'd536870912;
parameter    ap_ST_fsm_state33 = 45'd1073741824;
parameter    ap_ST_fsm_state34 = 45'd2147483648;
parameter    ap_ST_fsm_state35 = 45'd4294967296;
parameter    ap_ST_fsm_state36 = 45'd8589934592;
parameter    ap_ST_fsm_pp2_stage0 = 45'd17179869184;
parameter    ap_ST_fsm_state49 = 45'd34359738368;
parameter    ap_ST_fsm_pp3_stage0 = 45'd68719476736;
parameter    ap_ST_fsm_state52 = 45'd137438953472;
parameter    ap_ST_fsm_state53 = 45'd274877906944;
parameter    ap_ST_fsm_state54 = 45'd549755813888;
parameter    ap_ST_fsm_state55 = 45'd1099511627776;
parameter    ap_ST_fsm_state56 = 45'd2199023255552;
parameter    ap_ST_fsm_state57 = 45'd4398046511104;
parameter    ap_ST_fsm_state58 = 45'd8796093022208;
parameter    ap_ST_fsm_state59 = 45'd17592186044416;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] Input_1_V_V_dout;
input   Input_1_V_V_empty_n;
output   Input_1_V_V_read;
output  [31:0] Output_1_V_V_din;
input   Output_1_V_V_full_n;
output   Output_1_V_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg Input_1_V_V_read;
reg[31:0] Output_1_V_V_din;
reg Output_1_V_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [44:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [0:0] index_3;
reg   [8:0] training_set_V_7_address0;
reg    training_set_V_7_ce0;
reg    training_set_V_7_we0;
wire   [255:0] training_set_V_7_d0;
wire   [255:0] training_set_V_7_q0;
reg   [10:0] knn_set_5_0;
reg   [10:0] knn_set_5_1;
reg   [10:0] knn_set_5_2;
reg   [10:0] knn_set_5_3;
reg   [10:0] knn_set_5_4;
reg   [10:0] knn_set_5_5;
reg    Input_1_V_V_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln4722_reg_1206;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_pp0_stage5;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_pp0_stage6;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_pp0_stage7;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
wire    ap_CS_fsm_pp1_stage1;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_pp1_stage1;
reg   [0:0] icmp_ln4736_reg_1215;
wire    ap_CS_fsm_pp1_stage2;
wire    ap_block_pp1_stage2;
wire    ap_CS_fsm_pp1_stage3;
wire    ap_block_pp1_stage3;
wire    ap_CS_fsm_pp1_stage4;
wire    ap_block_pp1_stage4;
wire    ap_CS_fsm_pp1_stage5;
wire    ap_block_pp1_stage5;
wire    ap_CS_fsm_pp1_stage6;
wire    ap_block_pp1_stage6;
wire    ap_CS_fsm_pp1_stage7;
wire    ap_block_pp1_stage7;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state36;
reg    Output_1_V_V_blk_n;
wire    ap_CS_fsm_state52;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state54;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state56;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state58;
wire    ap_CS_fsm_state59;
reg   [8:0] i_0_reg_190;
reg   [12:0] i1_0_reg_202;
reg   [8:0] indvar_flatten_reg_213;
reg   [1:0] j_0_reg_224;
reg   [7:0] i4_0_reg_235;
reg   [2:0] indvar_flatten11_reg_246;
reg   [1:0] i_0_i_reg_257;
reg   [31:0] tmp_V_156_reg_268;
reg   [31:0] label_list_2_7_reg_279;
reg   [31:0] label_list_1_4_reg_290;
reg   [31:0] tmp_V_153_reg_301;
reg   [31:0] min_distance_list_2_16_reg_312;
reg   [31:0] min_distance_list_1_7_reg_323;
reg   [1:0] j_0_i_reg_334;
reg   [31:0] reg_374;
reg    ap_block_state3_pp0_stage1_iter0;
reg    ap_block_pp0_stage1_11001;
reg    ap_block_state23;
reg   [31:0] reg_379;
reg    ap_block_state4_pp0_stage2_iter0;
reg    ap_block_pp0_stage2_11001;
reg    ap_block_state24;
reg   [31:0] reg_383;
reg    ap_block_state5_pp0_stage3_iter0;
reg    ap_block_pp0_stage3_11001;
reg    ap_block_state25;
reg   [31:0] reg_387;
reg    ap_block_state6_pp0_stage4_iter0;
reg    ap_block_pp0_stage4_11001;
reg    ap_block_state26;
reg   [31:0] reg_391;
reg    ap_block_state7_pp0_stage5_iter0;
reg    ap_block_pp0_stage5_11001;
reg    ap_block_state27;
reg   [31:0] reg_395;
reg    ap_block_state8_pp0_stage6_iter0;
reg    ap_block_pp0_stage6_11001;
reg    ap_block_state28;
reg   [31:0] reg_399;
reg    ap_block_state9_pp0_stage7_iter0;
reg    ap_block_pp0_stage7_11001;
wire   [0:0] index_3_load_load_fu_404_p1;
reg   [0:0] index_3_load_reg_1202;
reg    ap_block_state1;
wire   [0:0] icmp_ln4722_fu_408_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state10_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [8:0] i_fu_414_p2;
reg   [8:0] i_reg_1210;
wire   [0:0] icmp_ln4736_fu_446_p2;
wire    ap_block_state12_pp1_stage0_iter0;
reg    ap_block_state20_pp1_stage0_iter1;
reg    ap_block_pp1_stage0_11001;
wire   [12:0] i_7_fu_452_p2;
reg   [12:0] i_7_reg_1219;
wire   [3:0] trunc_ln414_fu_500_p1;
reg   [3:0] trunc_ln414_reg_1224;
reg    ap_block_state22;
reg   [31:0] tmp_V_160_reg_1229;
reg   [31:0] tmp_V_161_reg_1234;
reg   [31:0] tmp_V_162_reg_1239;
reg   [31:0] tmp_V_163_reg_1244;
wire   [195:0] lhs_V_fu_504_p8;
reg   [195:0] lhs_V_reg_1249;
wire   [0:0] icmp_ln4806_fu_549_p2;
reg   [0:0] icmp_ln4806_reg_1254;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state37_pp2_stage0_iter0;
wire    ap_block_state38_pp2_stage0_iter1;
wire    ap_block_state39_pp2_stage0_iter2;
wire    ap_block_state40_pp2_stage0_iter3;
wire    ap_block_state41_pp2_stage0_iter4;
wire    ap_block_state42_pp2_stage0_iter5;
wire    ap_block_state43_pp2_stage0_iter6;
wire    ap_block_state44_pp2_stage0_iter7;
wire    ap_block_state45_pp2_stage0_iter8;
wire    ap_block_state46_pp2_stage0_iter9;
wire    ap_block_state47_pp2_stage0_iter10;
wire    ap_block_state48_pp2_stage0_iter11;
wire    ap_block_pp2_stage0_11001;
reg   [0:0] icmp_ln4806_reg_1254_pp2_iter1_reg;
reg   [0:0] icmp_ln4806_reg_1254_pp2_iter2_reg;
reg   [0:0] icmp_ln4806_reg_1254_pp2_iter3_reg;
reg   [0:0] icmp_ln4806_reg_1254_pp2_iter4_reg;
reg   [0:0] icmp_ln4806_reg_1254_pp2_iter5_reg;
reg   [0:0] icmp_ln4806_reg_1254_pp2_iter6_reg;
reg   [0:0] icmp_ln4806_reg_1254_pp2_iter7_reg;
reg   [0:0] icmp_ln4806_reg_1254_pp2_iter8_reg;
reg   [0:0] icmp_ln4806_reg_1254_pp2_iter9_reg;
reg   [0:0] icmp_ln4806_reg_1254_pp2_iter10_reg;
wire   [8:0] add_ln4806_fu_555_p2;
reg    ap_enable_reg_pp2_iter0;
wire   [7:0] select_ln4812_fu_567_p3;
reg   [7:0] select_ln4812_reg_1263;
reg   [7:0] select_ln4812_reg_1263_pp2_iter1_reg;
wire   [1:0] select_ln4812_1_fu_585_p3;
reg   [1:0] select_ln4812_1_reg_1268;
wire   [14:0] mul_ln4812_fu_597_p2;
reg   [14:0] mul_ln4812_reg_1273;
wire   [2:0] select_ln4812_2_fu_621_p3;
reg   [2:0] select_ln4812_2_reg_1278;
reg   [2:0] select_ln4812_2_reg_1278_pp2_iter1_reg;
reg   [2:0] select_ln4812_2_reg_1278_pp2_iter2_reg;
reg   [2:0] select_ln4812_2_reg_1278_pp2_iter3_reg;
reg   [2:0] select_ln4812_2_reg_1278_pp2_iter4_reg;
reg   [2:0] select_ln4812_2_reg_1278_pp2_iter5_reg;
reg   [2:0] select_ln4812_2_reg_1278_pp2_iter6_reg;
reg   [2:0] select_ln4812_2_reg_1278_pp2_iter7_reg;
reg   [2:0] select_ln4812_2_reg_1278_pp2_iter8_reg;
reg   [2:0] select_ln4812_2_reg_1278_pp2_iter9_reg;
reg   [2:0] select_ln4812_2_reg_1278_pp2_iter10_reg;
wire   [0:0] select_ln4812_3_fu_635_p3;
reg   [0:0] select_ln4812_3_reg_1283;
reg   [0:0] select_ln4812_3_reg_1283_pp2_iter1_reg;
reg   [0:0] select_ln4812_3_reg_1283_pp2_iter2_reg;
reg   [0:0] select_ln4812_3_reg_1283_pp2_iter3_reg;
reg   [0:0] select_ln4812_3_reg_1283_pp2_iter4_reg;
reg   [0:0] select_ln4812_3_reg_1283_pp2_iter5_reg;
reg   [0:0] select_ln4812_3_reg_1283_pp2_iter6_reg;
reg   [0:0] select_ln4812_3_reg_1283_pp2_iter7_reg;
reg   [0:0] select_ln4812_3_reg_1283_pp2_iter8_reg;
reg   [0:0] select_ln4812_3_reg_1283_pp2_iter9_reg;
wire   [7:0] i_8_fu_643_p2;
reg   [8:0] trunc_ln4812_mid2_reg_1295;
wire   [195:0] ret_V_fu_678_p2;
reg   [195:0] ret_V_reg_1305;
wire   [8:0] select_ln4141_20_fu_719_p3;
reg   [8:0] select_ln4141_20_reg_1310;
wire   [8:0] select_ln4141_21_fu_735_p3;
reg   [8:0] select_ln4141_21_reg_1315;
wire   [0:0] icmp_ln4141_2_fu_742_p2;
reg   [0:0] icmp_ln4141_2_reg_1320;
wire   [1:0] select_ln4141_24_fu_762_p3;
reg   [1:0] select_ln4141_24_reg_1325;
wire   [0:0] icmp_ln4454_fu_875_p2;
reg   [0:0] icmp_ln4454_reg_1336;
wire    ap_CS_fsm_pp3_stage0;
wire    ap_block_state50_pp3_stage0_iter0;
wire    ap_block_state51_pp3_stage0_iter1;
wire    ap_block_pp3_stage0_11001;
wire   [2:0] add_ln4454_fu_881_p2;
reg    ap_enable_reg_pp3_iter0;
wire   [1:0] select_ln4454_fu_937_p3;
wire   [31:0] min_distance_list_0_fu_979_p8;
reg   [31:0] min_distance_list_0_reg_1350;
wire   [1:0] j_fu_997_p2;
wire   [31:0] select_ln4474_fu_1121_p3;
reg    ap_enable_reg_pp3_iter1;
wire   [31:0] min_distance_list_2_19_fu_1129_p3;
wire   [31:0] select_ln4474_11_fu_1164_p3;
wire   [31:0] select_ln4474_12_fu_1172_p3;
wire   [31:0] select_ln4479_19_fu_1180_p3;
wire   [31:0] select_ln4479_20_fu_1188_p3;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage7_subdone;
wire    ap_CS_fsm_state11;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state12;
reg    ap_block_state19_pp1_stage7_iter0;
reg    ap_block_pp1_stage7_subdone;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state37;
reg    ap_enable_reg_pp2_iter1;
reg    ap_enable_reg_pp2_iter2;
reg    ap_enable_reg_pp2_iter3;
reg    ap_enable_reg_pp2_iter4;
reg    ap_enable_reg_pp2_iter5;
reg    ap_enable_reg_pp2_iter6;
reg    ap_enable_reg_pp2_iter7;
reg    ap_enable_reg_pp2_iter8;
reg    ap_enable_reg_pp2_iter9;
reg    ap_enable_reg_pp2_iter10;
reg    ap_enable_reg_pp2_iter11;
wire    ap_CS_fsm_state49;
wire    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state50;
wire   [7:0] grp_popcount_fu_345_ap_return;
reg   [8:0] ap_phi_mux_i_0_phi_fu_194_p4;
reg   [12:0] ap_phi_mux_i1_0_phi_fu_206_p4;
reg   [1:0] ap_phi_mux_j_0_phi_fu_228_p4;
wire    ap_block_pp2_stage0;
wire    ap_block_pp3_stage0;
wire   [63:0] zext_ln4725_fu_420_p1;
wire   [63:0] zext_ln4811_fu_669_p1;
reg    ap_block_state21;
wire   [10:0] zext_ln4150_16_fu_833_p1;
wire   [0:0] icmp_ln4149_fu_782_p2;
wire   [2:0] add_ln4150_fu_788_p2;
reg   [10:0] ap_sig_allocacmp_knn_set_5_0_load;
reg   [10:0] grp_load_fu_350_p1;
wire   [10:0] zext_ln4150_17_fu_823_p1;
reg   [10:0] ap_sig_allocacmp_knn_set_5_1_load;
reg   [10:0] grp_load_fu_358_p1;
wire   [10:0] zext_ln4150_18_fu_813_p1;
reg   [10:0] ap_sig_allocacmp_knn_set_5_2_load;
reg   [10:0] grp_load_fu_366_p1;
wire   [10:0] zext_ln4150_19_fu_803_p1;
reg   [10:0] ap_sig_allocacmp_knn_set_5_3_load;
reg   [10:0] grp_load_fu_354_p1;
wire   [10:0] zext_ln4150_20_fu_793_p1;
reg   [10:0] ap_sig_allocacmp_knn_set_5_4_load;
reg   [10:0] grp_load_fu_362_p1;
wire   [10:0] zext_ln4150_fu_843_p1;
reg   [10:0] ap_sig_allocacmp_knn_set_5_5_load;
reg   [10:0] grp_load_fu_370_p1;
reg    ap_block_state13_pp1_stage1_iter0;
reg    ap_block_pp1_stage1_11001;
reg    ap_block_state14_pp1_stage2_iter0;
reg    ap_block_pp1_stage2_11001;
reg    ap_block_state15_pp1_stage3_iter0;
reg    ap_block_pp1_stage3_11001;
reg    ap_block_state16_pp1_stage4_iter0;
reg    ap_block_pp1_stage4_11001;
reg    ap_block_state17_pp1_stage5_iter0;
reg    ap_block_pp1_stage5_11001;
reg    ap_block_state18_pp1_stage6_iter0;
reg    ap_block_pp1_stage6_11001;
reg    ap_block_pp1_stage7_11001;
reg    ap_block_pp1_stage1_01001;
reg    ap_block_pp1_stage2_01001;
reg    ap_block_pp1_stage3_01001;
reg    ap_block_pp1_stage4_01001;
reg    ap_block_pp1_stage5_01001;
reg    ap_block_pp1_stage6_01001;
reg    ap_block_pp1_stage7_01001;
reg    ap_block_pp1_stage0_01001;
wire   [0:0] trunc_ln4812_fu_525_p1;
wire   [2:0] shl_ln_fu_529_p3;
wire   [2:0] zext_ln4812_fu_521_p1;
wire   [0:0] icmp_ln4808_fu_561_p2;
wire   [1:0] add_ln4806_1_fu_575_p2;
wire   [1:0] mul_ln4812_fu_597_p1;
wire   [0:0] trunc_ln4812_1_fu_603_p1;
wire   [2:0] shl_ln4812_mid1_fu_607_p3;
wire   [2:0] zext_ln4812_1_fu_581_p1;
wire   [2:0] sub_ln4812_1_fu_615_p2;
wire   [2:0] sub_ln4812_fu_537_p2;
wire   [0:0] icmp_ln4141_6_fu_629_p2;
wire   [0:0] icmp_ln4141_fu_543_p2;
wire   [31:0] mul_ln4812_1_fu_1195_p2;
wire   [8:0] zext_ln4808_fu_661_p1;
wire   [8:0] add_ln4811_fu_664_p2;
wire   [195:0] rhs_V_fu_674_p1;
wire   [8:0] trunc_ln4141_fu_683_p1;
wire   [8:0] trunc_ln4141_16_fu_687_p1;
wire   [8:0] trunc_ln4141_17_fu_698_p1;
wire   [8:0] trunc_ln4141_18_fu_702_p1;
wire   [8:0] select_ln4141_19_fu_706_p3;
wire   [8:0] select_ln4141_fu_691_p3;
wire   [0:0] icmp_ln4141_1_fu_713_p2;
wire   [8:0] trunc_ln4141_19_fu_727_p1;
wire   [8:0] trunc_ln4141_20_fu_731_p1;
wire   [0:0] or_ln4141_fu_756_p2;
wire   [1:0] select_ln4141_23_fu_748_p3;
wire   [8:0] zext_ln4141_fu_770_p1;
wire   [8:0] select_ln4141_22_fu_774_p3;
wire   [2:0] zext_ln4141_4_fu_779_p1;
wire   [0:0] trunc_ln4463_fu_857_p1;
wire   [2:0] shl_ln4_fu_861_p3;
wire   [2:0] zext_ln4463_fu_853_p1;
wire   [0:0] icmp_ln4456_fu_887_p2;
wire   [1:0] add_ln4454_4_fu_901_p2;
wire   [0:0] trunc_ln4463_7_fu_911_p1;
wire   [2:0] shl_ln4463_mid1_fu_915_p3;
wire   [2:0] zext_ln4463_26_fu_907_p1;
wire   [2:0] sub_ln4463_4_fu_923_p2;
wire   [2:0] sub_ln4463_fu_869_p2;
wire   [1:0] select_ln4463_9_fu_893_p3;
wire   [2:0] select_ln4463_10_fu_929_p3;
wire   [2:0] zext_ln4463_4_fu_945_p1;
wire   [31:0] min_distance_list_0_fu_979_p1;
wire   [31:0] min_distance_list_0_fu_979_p2;
wire   [31:0] min_distance_list_0_fu_979_p3;
wire   [31:0] min_distance_list_0_fu_979_p4;
wire   [31:0] min_distance_list_0_fu_979_p5;
wire   [31:0] min_distance_list_0_fu_979_p6;
wire   [2:0] min_distance_list_0_fu_979_p7;
wire   [0:0] icmp_ln4463_fu_1003_p2;
wire   [0:0] not_icmp_ln4463_fu_1021_p2;
wire   [0:0] icmp_ln4463_1_fu_1016_p2;
wire   [5:0] phitmp_i_1_cast_cast_fu_1027_p1;
wire   [5:0] select_ln4463_fu_1008_p3;
wire   [5:0] select_ln4463_7_fu_1031_p3;
wire   [3:0] tmp_10_fu_1048_p4;
wire   [0:0] icmp_ln4463_7_fu_1058_p2;
wire   [1:0] trunc_ln4463_8_fu_1039_p1;
wire   [1:0] phitmp_i_2_fu_1064_p3;
wire   [0:0] icmp_ln4463_2_fu_1043_p2;
wire   [5:0] phitmp_i_2_cast_cast_fu_1072_p1;
wire   [5:0] select_ln4463_8_fu_1076_p3;
wire   [4:0] tmp_11_fu_1084_p4;
wire   [0:0] icmp_ln4479_fu_1100_p2;
wire   [0:0] icmp_ln4474_fu_1094_p2;
wire   [31:0] select_ln4479_fu_1106_p3;
wire   [31:0] min_distance_list_2_18_fu_1114_p3;
wire   [0:0] icmp_ln4479_1_fu_1143_p2;
wire   [0:0] icmp_ln4474_1_fu_1137_p2;
wire   [31:0] label_list_2_8_fu_1149_p3;
wire   [31:0] min_distance_list_2_20_fu_1157_p3;
wire   [16:0] mul_ln4812_1_fu_1195_p0;
wire   [14:0] mul_ln4812_1_fu_1195_p1;
reg   [44:0] ap_NS_fsm;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage3_subdone;
reg    ap_block_pp0_stage4_subdone;
reg    ap_block_pp0_stage5_subdone;
reg    ap_block_pp0_stage6_subdone;
reg    ap_block_pp1_stage1_subdone;
reg    ap_block_pp1_stage2_subdone;
reg    ap_block_pp1_stage3_subdone;
reg    ap_block_pp1_stage4_subdone;
reg    ap_block_pp1_stage5_subdone;
reg    ap_block_pp1_stage6_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
wire   [31:0] mul_ln4812_1_fu_1195_p10;
wire   [14:0] mul_ln4812_fu_597_p10;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 45'd1;
#0 index_3 = 1'd0;
#0 knn_set_5_0 = 11'd0;
#0 knn_set_5_1 = 11'd0;
#0 knn_set_5_2 = 11'd0;
#0 knn_set_5_3 = 11'd0;
#0 knn_set_5_4 = 11'd0;
#0 knn_set_5_5 = 11'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter4 = 1'b0;
#0 ap_enable_reg_pp2_iter5 = 1'b0;
#0 ap_enable_reg_pp2_iter6 = 1'b0;
#0 ap_enable_reg_pp2_iter7 = 1'b0;
#0 ap_enable_reg_pp2_iter8 = 1'b0;
#0 ap_enable_reg_pp2_iter9 = 1'b0;
#0 ap_enable_reg_pp2_iter10 = 1'b0;
#0 ap_enable_reg_pp2_iter11 = 1'b0;
end

update_knn1_trainbkb #(
    .DataWidth( 256 ),
    .AddressRange( 450 ),
    .AddressWidth( 9 ))
training_set_V_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(training_set_V_7_address0),
    .ce0(training_set_V_7_ce0),
    .we0(training_set_V_7_we0),
    .d0(training_set_V_7_d0),
    .q0(training_set_V_7_q0)
);

popcount grp_popcount_fu_345(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .x_V(ret_V_reg_1305),
    .ap_return(grp_popcount_fu_345_ap_return)
);

knn_cluster1_mux_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
knn_cluster1_mux_cud_U9(
    .din0(min_distance_list_0_fu_979_p1),
    .din1(min_distance_list_0_fu_979_p2),
    .din2(min_distance_list_0_fu_979_p3),
    .din3(min_distance_list_0_fu_979_p4),
    .din4(min_distance_list_0_fu_979_p5),
    .din5(min_distance_list_0_fu_979_p6),
    .din6(min_distance_list_0_fu_979_p7),
    .dout(min_distance_list_0_fu_979_p8)
);

knn_cluster1_mul_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 32 ))
knn_cluster1_mul_dEe_U10(
    .din0(mul_ln4812_1_fu_1195_p0),
    .din1(mul_ln4812_1_fu_1195_p1),
    .dout(mul_ln4812_1_fu_1195_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state59))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (index_3_load_load_fu_404_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage7_subdone) & (1'b1 == ap_CS_fsm_pp0_stage7)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (index_3_load_load_fu_404_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state12) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp1_stage7_subdone) & (1'b1 == ap_CS_fsm_pp1_stage7)))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state37) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state36))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state37)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state37);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter10 <= ap_enable_reg_pp2_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter11 <= ap_enable_reg_pp2_iter10;
        end else if (((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state36))) begin
            ap_enable_reg_pp2_iter11 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter9 <= ap_enable_reg_pp2_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state50) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state49)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state50))) begin
            ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state50);
        end else if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
        end else if ((1'b1 == ap_CS_fsm_state49)) begin
            ap_enable_reg_pp3_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        i1_0_reg_202 <= 13'd0;
    end else if (((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i1_0_reg_202 <= i_7_reg_1219;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln4806_fu_549_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        i4_0_reg_235 <= i_8_fu_643_p2;
    end else if (((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state36))) begin
        i4_0_reg_235 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        i_0_i_reg_257 <= 2'd0;
    end else if (((icmp_ln4454_fu_875_p2 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        i_0_i_reg_257 <= select_ln4454_fu_937_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (index_3_load_load_fu_404_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_190 <= 9'd0;
    end else if (((icmp_ln4722_reg_1206 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_0_reg_190 <= i_reg_1210;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        indvar_flatten11_reg_246 <= 3'd0;
    end else if (((icmp_ln4454_fu_875_p2 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        indvar_flatten11_reg_246 <= add_ln4454_fu_881_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln4806_fu_549_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        indvar_flatten_reg_213 <= add_ln4806_fu_555_p2;
    end else if (((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state36))) begin
        indvar_flatten_reg_213 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        j_0_i_reg_334 <= 2'd0;
    end else if (((icmp_ln4454_fu_875_p2 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        j_0_i_reg_334 <= j_fu_997_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln4806_reg_1254 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        j_0_reg_224 <= select_ln4812_1_reg_1268;
    end else if (((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state36))) begin
        j_0_reg_224 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((3'd0 == add_ln4150_fu_788_p2) & (icmp_ln4149_fu_782_p2 == 1'd1) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter11 == 1'b1))) begin
                knn_set_5_0[8 : 0] <= zext_ln4150_16_fu_833_p1[8 : 0];
    end else if ((~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_empty_n)) & (1'b1 == ap_CS_fsm_state21))) begin
                knn_set_5_0[0] <= 1'b0;
        knn_set_5_0[1] <= 1'b0;
        knn_set_5_0[2] <= 1'b0;
        knn_set_5_0[3] <= 1'b0;
        knn_set_5_0[4] <= 1'b0;
        knn_set_5_0[5] <= 1'b0;
        knn_set_5_0[6] <= 1'b0;
        knn_set_5_0[7] <= 1'b0;
        knn_set_5_0[8] <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if (((3'd1 == add_ln4150_fu_788_p2) & (icmp_ln4149_fu_782_p2 == 1'd1) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter11 == 1'b1))) begin
                knn_set_5_1[8 : 0] <= zext_ln4150_17_fu_823_p1[8 : 0];
    end else if ((~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_empty_n)) & (1'b1 == ap_CS_fsm_state21))) begin
                knn_set_5_1[0] <= 1'b0;
        knn_set_5_1[1] <= 1'b0;
        knn_set_5_1[2] <= 1'b0;
        knn_set_5_1[3] <= 1'b0;
        knn_set_5_1[4] <= 1'b0;
        knn_set_5_1[5] <= 1'b0;
        knn_set_5_1[6] <= 1'b0;
        knn_set_5_1[7] <= 1'b0;
        knn_set_5_1[8] <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if (((3'd2 == add_ln4150_fu_788_p2) & (icmp_ln4149_fu_782_p2 == 1'd1) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter11 == 1'b1))) begin
                knn_set_5_2[8 : 0] <= zext_ln4150_18_fu_813_p1[8 : 0];
    end else if ((~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_empty_n)) & (1'b1 == ap_CS_fsm_state21))) begin
                knn_set_5_2[0] <= 1'b0;
        knn_set_5_2[1] <= 1'b0;
        knn_set_5_2[2] <= 1'b0;
        knn_set_5_2[3] <= 1'b0;
        knn_set_5_2[4] <= 1'b0;
        knn_set_5_2[5] <= 1'b0;
        knn_set_5_2[6] <= 1'b0;
        knn_set_5_2[7] <= 1'b0;
        knn_set_5_2[8] <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if (((3'd3 == add_ln4150_fu_788_p2) & (icmp_ln4149_fu_782_p2 == 1'd1) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter11 == 1'b1))) begin
                knn_set_5_3[8 : 0] <= zext_ln4150_19_fu_803_p1[8 : 0];
    end else if ((~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_empty_n)) & (1'b1 == ap_CS_fsm_state21))) begin
                knn_set_5_3[0] <= 1'b0;
        knn_set_5_3[1] <= 1'b0;
        knn_set_5_3[2] <= 1'b0;
        knn_set_5_3[3] <= 1'b0;
        knn_set_5_3[4] <= 1'b0;
        knn_set_5_3[5] <= 1'b0;
        knn_set_5_3[6] <= 1'b0;
        knn_set_5_3[7] <= 1'b0;
        knn_set_5_3[8] <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if (((3'd4 == add_ln4150_fu_788_p2) & (icmp_ln4149_fu_782_p2 == 1'd1) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter11 == 1'b1))) begin
                knn_set_5_4[8 : 0] <= zext_ln4150_20_fu_793_p1[8 : 0];
    end else if ((~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_empty_n)) & (1'b1 == ap_CS_fsm_state21))) begin
                knn_set_5_4[0] <= 1'b0;
        knn_set_5_4[1] <= 1'b0;
        knn_set_5_4[2] <= 1'b0;
        knn_set_5_4[3] <= 1'b0;
        knn_set_5_4[4] <= 1'b0;
        knn_set_5_4[5] <= 1'b0;
        knn_set_5_4[6] <= 1'b0;
        knn_set_5_4[7] <= 1'b0;
        knn_set_5_4[8] <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if ((~(3'd4 == add_ln4150_fu_788_p2) & ~(3'd3 == add_ln4150_fu_788_p2) & ~(3'd2 == add_ln4150_fu_788_p2) & ~(3'd1 == add_ln4150_fu_788_p2) & ~(3'd0 == add_ln4150_fu_788_p2) & (icmp_ln4149_fu_782_p2 == 1'd1) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter11 == 1'b1))) begin
                knn_set_5_5[8 : 0] <= zext_ln4150_fu_843_p1[8 : 0];
    end else if ((~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_empty_n)) & (1'b1 == ap_CS_fsm_state21))) begin
                knn_set_5_5[0] <= 1'b0;
        knn_set_5_5[1] <= 1'b0;
        knn_set_5_5[2] <= 1'b0;
        knn_set_5_5[3] <= 1'b0;
        knn_set_5_5[4] <= 1'b0;
        knn_set_5_5[5] <= 1'b0;
        knn_set_5_5[6] <= 1'b0;
        knn_set_5_5[7] <= 1'b0;
        knn_set_5_5[8] <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        label_list_1_4_reg_290 <= reg_374;
    end else if (((icmp_ln4454_reg_1336 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        label_list_1_4_reg_290 <= select_ln4479_19_fu_1180_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        label_list_2_7_reg_279 <= tmp_V_163_reg_1244;
    end else if (((icmp_ln4454_reg_1336 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        label_list_2_7_reg_279 <= select_ln4474_11_fu_1164_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        min_distance_list_1_7_reg_323 <= tmp_V_161_reg_1234;
    end else if (((icmp_ln4454_reg_1336 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        min_distance_list_1_7_reg_323 <= select_ln4479_20_fu_1188_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        min_distance_list_2_16_reg_312 <= tmp_V_160_reg_1229;
    end else if (((icmp_ln4454_reg_1336 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        min_distance_list_2_16_reg_312 <= select_ln4474_12_fu_1172_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        tmp_V_153_reg_301 <= reg_399;
    end else if (((icmp_ln4454_reg_1336 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        tmp_V_153_reg_301 <= min_distance_list_2_19_fu_1129_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        tmp_V_156_reg_268 <= tmp_V_162_reg_1239;
    end else if (((icmp_ln4454_reg_1336 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        tmp_V_156_reg_268 <= select_ln4474_fu_1121_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        i_7_reg_1219 <= i_7_fu_452_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        i_reg_1210 <= i_fu_414_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln4806_reg_1254_pp2_iter9_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln4141_2_reg_1320 <= icmp_ln4141_2_fu_742_p2;
        select_ln4141_20_reg_1310 <= select_ln4141_20_fu_719_p3;
        select_ln4141_21_reg_1315 <= select_ln4141_21_fu_735_p3;
        select_ln4141_24_reg_1325 <= select_ln4141_24_fu_762_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        icmp_ln4454_reg_1336 <= icmp_ln4454_fu_875_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln4722_reg_1206 <= icmp_ln4722_fu_408_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln4736_reg_1215 <= icmp_ln4736_fu_446_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln4806_reg_1254 <= icmp_ln4806_fu_549_p2;
        icmp_ln4806_reg_1254_pp2_iter1_reg <= icmp_ln4806_reg_1254;
        select_ln4812_2_reg_1278_pp2_iter1_reg <= select_ln4812_2_reg_1278;
        select_ln4812_3_reg_1283_pp2_iter1_reg <= select_ln4812_3_reg_1283;
        select_ln4812_reg_1263_pp2_iter1_reg <= select_ln4812_reg_1263;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp2_stage0_11001)) begin
        icmp_ln4806_reg_1254_pp2_iter10_reg <= icmp_ln4806_reg_1254_pp2_iter9_reg;
        icmp_ln4806_reg_1254_pp2_iter2_reg <= icmp_ln4806_reg_1254_pp2_iter1_reg;
        icmp_ln4806_reg_1254_pp2_iter3_reg <= icmp_ln4806_reg_1254_pp2_iter2_reg;
        icmp_ln4806_reg_1254_pp2_iter4_reg <= icmp_ln4806_reg_1254_pp2_iter3_reg;
        icmp_ln4806_reg_1254_pp2_iter5_reg <= icmp_ln4806_reg_1254_pp2_iter4_reg;
        icmp_ln4806_reg_1254_pp2_iter6_reg <= icmp_ln4806_reg_1254_pp2_iter5_reg;
        icmp_ln4806_reg_1254_pp2_iter7_reg <= icmp_ln4806_reg_1254_pp2_iter6_reg;
        icmp_ln4806_reg_1254_pp2_iter8_reg <= icmp_ln4806_reg_1254_pp2_iter7_reg;
        icmp_ln4806_reg_1254_pp2_iter9_reg <= icmp_ln4806_reg_1254_pp2_iter8_reg;
        select_ln4812_2_reg_1278_pp2_iter10_reg <= select_ln4812_2_reg_1278_pp2_iter9_reg;
        select_ln4812_2_reg_1278_pp2_iter2_reg <= select_ln4812_2_reg_1278_pp2_iter1_reg;
        select_ln4812_2_reg_1278_pp2_iter3_reg <= select_ln4812_2_reg_1278_pp2_iter2_reg;
        select_ln4812_2_reg_1278_pp2_iter4_reg <= select_ln4812_2_reg_1278_pp2_iter3_reg;
        select_ln4812_2_reg_1278_pp2_iter5_reg <= select_ln4812_2_reg_1278_pp2_iter4_reg;
        select_ln4812_2_reg_1278_pp2_iter6_reg <= select_ln4812_2_reg_1278_pp2_iter5_reg;
        select_ln4812_2_reg_1278_pp2_iter7_reg <= select_ln4812_2_reg_1278_pp2_iter6_reg;
        select_ln4812_2_reg_1278_pp2_iter8_reg <= select_ln4812_2_reg_1278_pp2_iter7_reg;
        select_ln4812_2_reg_1278_pp2_iter9_reg <= select_ln4812_2_reg_1278_pp2_iter8_reg;
        select_ln4812_3_reg_1283_pp2_iter2_reg <= select_ln4812_3_reg_1283_pp2_iter1_reg;
        select_ln4812_3_reg_1283_pp2_iter3_reg <= select_ln4812_3_reg_1283_pp2_iter2_reg;
        select_ln4812_3_reg_1283_pp2_iter4_reg <= select_ln4812_3_reg_1283_pp2_iter3_reg;
        select_ln4812_3_reg_1283_pp2_iter5_reg <= select_ln4812_3_reg_1283_pp2_iter4_reg;
        select_ln4812_3_reg_1283_pp2_iter6_reg <= select_ln4812_3_reg_1283_pp2_iter5_reg;
        select_ln4812_3_reg_1283_pp2_iter7_reg <= select_ln4812_3_reg_1283_pp2_iter6_reg;
        select_ln4812_3_reg_1283_pp2_iter8_reg <= select_ln4812_3_reg_1283_pp2_iter7_reg;
        select_ln4812_3_reg_1283_pp2_iter9_reg <= select_ln4812_3_reg_1283_pp2_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_empty_n)) & (index_3_load_reg_1202 == 1'd0) & (1'b1 == ap_CS_fsm_state21))) begin
        index_3 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        index_3_load_reg_1202 <= index_3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state36))) begin
        lhs_V_reg_1249 <= lhs_V_fu_504_p8;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln4454_fu_875_p2 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        min_distance_list_0_reg_1350 <= min_distance_list_0_fu_979_p8;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln4806_fu_549_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        mul_ln4812_reg_1273 <= mul_ln4812_fu_597_p2;
        select_ln4812_2_reg_1278 <= select_ln4812_2_fu_621_p3;
        select_ln4812_3_reg_1283 <= select_ln4812_3_fu_635_p3;
        select_ln4812_reg_1263 <= select_ln4812_fu_567_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state36)) | (~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_empty_n)) & (1'b1 == ap_CS_fsm_state23)) | ((icmp_ln4722_reg_1206 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        reg_374 <= Input_1_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_empty_n)) & (1'b1 == ap_CS_fsm_state24)) | ((icmp_ln4722_reg_1206 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        reg_379 <= Input_1_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_empty_n)) & (1'b1 == ap_CS_fsm_state25)) | ((icmp_ln4722_reg_1206 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        reg_383 <= Input_1_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_empty_n)) & (1'b1 == ap_CS_fsm_state26)) | ((icmp_ln4722_reg_1206 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        reg_387 <= Input_1_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_empty_n)) & (1'b1 == ap_CS_fsm_state27)) | ((icmp_ln4722_reg_1206 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        reg_391 <= Input_1_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_empty_n)) & (1'b1 == ap_CS_fsm_state28)) | ((icmp_ln4722_reg_1206 == 1'd0) & (1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        reg_395 <= Input_1_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state30)) | ((icmp_ln4722_reg_1206 == 1'd0) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        reg_399 <= Input_1_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln4806_reg_1254_pp2_iter2_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        ret_V_reg_1305 <= ret_V_fu_678_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln4806_fu_549_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        select_ln4812_1_reg_1268 <= select_ln4812_1_fu_585_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state31))) begin
        tmp_V_160_reg_1229 <= Input_1_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state32))) begin
        tmp_V_161_reg_1234 <= Input_1_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state34))) begin
        tmp_V_162_reg_1239 <= Input_1_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state35))) begin
        tmp_V_163_reg_1244 <= Input_1_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_empty_n)) & (1'b1 == ap_CS_fsm_state22))) begin
        trunc_ln414_reg_1224 <= trunc_ln414_fu_500_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln4806_reg_1254 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        trunc_ln4812_mid2_reg_1295 <= {{mul_ln4812_1_fu_1195_p2[30:22]}};
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == ap_block_pp1_stage7) & (1'b1 == ap_CS_fsm_pp1_stage7) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == ap_block_pp1_stage6) & (1'b1 == ap_CS_fsm_pp1_stage6) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == ap_block_pp1_stage5) & (1'b1 == ap_CS_fsm_pp1_stage5) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == ap_block_pp1_stage4) & (1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == ap_block_pp1_stage3) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == ap_block_pp1_stage2) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == ap_block_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)) | ((icmp_ln4722_reg_1206 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln4722_reg_1206 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage7)) | ((icmp_ln4722_reg_1206 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage6)) | ((icmp_ln4722_reg_1206 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5)) | ((icmp_ln4722_reg_1206 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4)) | ((icmp_ln4722_reg_1206 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3)) | ((icmp_ln4722_reg_1206 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2)) | ((icmp_ln4722_reg_1206 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1)))) begin
        Input_1_V_V_blk_n = Input_1_V_V_empty_n;
    end else begin
        Input_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state36)) | ((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state35)) | ((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state34)) | ((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state33)) | ((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state32)) | ((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state31)) | ((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state30)) | ((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state29)) | (~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_empty_n)) & (1'b1 == ap_CS_fsm_state28)) | (~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_empty_n)) & (1'b1 == ap_CS_fsm_state27)) | (~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_empty_n)) & (1'b1 == ap_CS_fsm_state26)) | (~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_empty_n)) & (1'b1 == ap_CS_fsm_state25)) | (~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_empty_n)) & (1'b1 == ap_CS_fsm_state24)) | (~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_empty_n)) & (1'b1 == ap_CS_fsm_state23)) | (~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_empty_n)) & (1'b1 == ap_CS_fsm_state22)) | (~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_empty_n)) & (1'b1 == ap_CS_fsm_state21)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage7) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage7_11001)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage6) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage6_11001)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage5) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage5_11001)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage4_11001)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage3_11001)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage2_11001)) | ((1'b0 == ap_block_pp1_stage1_11001) & (icmp_ln4736_reg_1215 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)) | ((icmp_ln4722_reg_1206 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln4722_reg_1206 == 1'd0) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln4722_reg_1206 == 1'd0) & (1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln4722_reg_1206 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln4722_reg_1206 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln4722_reg_1206 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln4722_reg_1206 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln4722_reg_1206 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        Input_1_V_V_read = 1'b1;
    end else begin
        Input_1_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == ap_block_pp1_stage7) & (1'b1 == ap_CS_fsm_pp1_stage7) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == ap_block_pp1_stage6) & (1'b1 == ap_CS_fsm_pp1_stage6) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == ap_block_pp1_stage5) & (1'b1 == ap_CS_fsm_pp1_stage5) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == ap_block_pp1_stage4) & (1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == ap_block_pp1_stage3) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == ap_block_pp1_stage2) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == ap_block_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
        Output_1_V_V_blk_n = Output_1_V_V_full_n;
    end else begin
        Output_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state59))) begin
        Output_1_V_V_din = label_list_1_4_reg_290;
    end else if (((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state58))) begin
        Output_1_V_V_din = label_list_2_7_reg_279;
    end else if (((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state57))) begin
        Output_1_V_V_din = tmp_V_156_reg_268;
    end else if (((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state55))) begin
        Output_1_V_V_din = min_distance_list_1_7_reg_323;
    end else if (((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state54))) begin
        Output_1_V_V_din = min_distance_list_2_16_reg_312;
    end else if (((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state53))) begin
        Output_1_V_V_din = tmp_V_153_reg_301;
    end else if ((((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state56)) | ((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state52)))) begin
        Output_1_V_V_din = 32'd0;
    end else if (((~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_empty_n)) & (1'b1 == ap_CS_fsm_state28)) | (~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_empty_n)) & (1'b1 == ap_CS_fsm_state27)) | (~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_empty_n)) & (1'b1 == ap_CS_fsm_state26)) | (~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_empty_n)) & (1'b1 == ap_CS_fsm_state25)) | (~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_empty_n)) & (1'b1 == ap_CS_fsm_state24)) | (~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_empty_n)) & (1'b1 == ap_CS_fsm_state23)) | (~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_empty_n)) & (1'b1 == ap_CS_fsm_state22)) | (~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_empty_n)) & (1'b1 == ap_CS_fsm_state21)) | ((icmp_ln4736_reg_1215 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_01001)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage7) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage7_01001)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage6) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage6_01001)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage5) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage5_01001)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage4_01001)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage3_01001)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage2_01001)) | ((icmp_ln4736_reg_1215 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_01001)))) begin
        Output_1_V_V_din = Input_1_V_V_dout;
    end else begin
        Output_1_V_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state59)) | ((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state58)) | ((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state57)) | ((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state56)) | ((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state55)) | ((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state54)) | ((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state53)) | ((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state52)) | (~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_empty_n)) & (1'b1 == ap_CS_fsm_state28)) | (~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_empty_n)) & (1'b1 == ap_CS_fsm_state27)) | (~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_empty_n)) & (1'b1 == ap_CS_fsm_state26)) | (~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_empty_n)) & (1'b1 == ap_CS_fsm_state25)) | (~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_empty_n)) & (1'b1 == ap_CS_fsm_state24)) | (~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_empty_n)) & (1'b1 == ap_CS_fsm_state23)) | (~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_empty_n)) & (1'b1 == ap_CS_fsm_state22)) | (~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_empty_n)) & (1'b1 == ap_CS_fsm_state21)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage7) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage7_11001)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage6) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage6_11001)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage5) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage5_11001)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage4_11001)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage3_11001)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage2_11001)) | ((1'b0 == ap_block_pp1_stage1_11001) & (icmp_ln4736_reg_1215 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
        Output_1_V_V_write = 1'b1;
    end else begin
        Output_1_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln4722_fu_408_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln4736_fu_446_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state12 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state12 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln4806_fu_549_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state37 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state37 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln4454_fu_875_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state50 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state50 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state59))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter11 == 1'b0) & (ap_enable_reg_pp2_iter10 == 1'b0) & (ap_enable_reg_pp2_iter9 == 1'b0) & (ap_enable_reg_pp2_iter8 == 1'b0) & (ap_enable_reg_pp2_iter7 == 1'b0) & (ap_enable_reg_pp2_iter6 == 1'b0) & (ap_enable_reg_pp2_iter5 == 1'b0) & (ap_enable_reg_pp2_iter4 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_i1_0_phi_fu_206_p4 = i_7_reg_1219;
    end else begin
        ap_phi_mux_i1_0_phi_fu_206_p4 = i1_0_reg_202;
    end
end

always @ (*) begin
    if (((icmp_ln4722_reg_1206 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_0_phi_fu_194_p4 = i_reg_1210;
    end else begin
        ap_phi_mux_i_0_phi_fu_194_p4 = i_0_reg_190;
    end
end

always @ (*) begin
    if (((icmp_ln4806_reg_1254 == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_j_0_phi_fu_228_p4 = select_ln4812_1_reg_1268;
    end else begin
        ap_phi_mux_j_0_phi_fu_228_p4 = j_0_reg_224;
    end
end

always @ (*) begin
    if (((3'd0 == add_ln4150_fu_788_p2) & (1'b0 == ap_block_pp2_stage0) & (icmp_ln4149_fu_782_p2 == 1'd1) & (ap_enable_reg_pp2_iter11 == 1'b1))) begin
        ap_sig_allocacmp_knn_set_5_0_load = zext_ln4150_16_fu_833_p1;
    end else begin
        ap_sig_allocacmp_knn_set_5_0_load = knn_set_5_0;
    end
end

always @ (*) begin
    if (((3'd1 == add_ln4150_fu_788_p2) & (1'b0 == ap_block_pp2_stage0) & (icmp_ln4149_fu_782_p2 == 1'd1) & (ap_enable_reg_pp2_iter11 == 1'b1))) begin
        ap_sig_allocacmp_knn_set_5_1_load = zext_ln4150_17_fu_823_p1;
    end else begin
        ap_sig_allocacmp_knn_set_5_1_load = knn_set_5_1;
    end
end

always @ (*) begin
    if (((3'd2 == add_ln4150_fu_788_p2) & (1'b0 == ap_block_pp2_stage0) & (icmp_ln4149_fu_782_p2 == 1'd1) & (ap_enable_reg_pp2_iter11 == 1'b1))) begin
        ap_sig_allocacmp_knn_set_5_2_load = zext_ln4150_18_fu_813_p1;
    end else begin
        ap_sig_allocacmp_knn_set_5_2_load = knn_set_5_2;
    end
end

always @ (*) begin
    if (((3'd3 == add_ln4150_fu_788_p2) & (1'b0 == ap_block_pp2_stage0) & (icmp_ln4149_fu_782_p2 == 1'd1) & (ap_enable_reg_pp2_iter11 == 1'b1))) begin
        ap_sig_allocacmp_knn_set_5_3_load = zext_ln4150_19_fu_803_p1;
    end else begin
        ap_sig_allocacmp_knn_set_5_3_load = knn_set_5_3;
    end
end

always @ (*) begin
    if (((3'd4 == add_ln4150_fu_788_p2) & (1'b0 == ap_block_pp2_stage0) & (icmp_ln4149_fu_782_p2 == 1'd1) & (ap_enable_reg_pp2_iter11 == 1'b1))) begin
        ap_sig_allocacmp_knn_set_5_4_load = zext_ln4150_20_fu_793_p1;
    end else begin
        ap_sig_allocacmp_knn_set_5_4_load = knn_set_5_4;
    end
end

always @ (*) begin
    if ((~(3'd4 == add_ln4150_fu_788_p2) & ~(3'd3 == add_ln4150_fu_788_p2) & ~(3'd2 == add_ln4150_fu_788_p2) & ~(3'd1 == add_ln4150_fu_788_p2) & ~(3'd0 == add_ln4150_fu_788_p2) & (1'b0 == ap_block_pp2_stage0) & (icmp_ln4149_fu_782_p2 == 1'd1) & (ap_enable_reg_pp2_iter11 == 1'b1))) begin
        ap_sig_allocacmp_knn_set_5_5_load = zext_ln4150_fu_843_p1;
    end else begin
        ap_sig_allocacmp_knn_set_5_5_load = knn_set_5_5;
    end
end

always @ (*) begin
    if (((icmp_ln4454_fu_875_p2 == 1'd0) & (1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        grp_load_fu_350_p1 = knn_set_5_0;
    end else if (((icmp_ln4806_reg_1254_pp2_iter9_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (select_ln4812_3_reg_1283_pp2_iter9_reg == 1'd1) & (ap_enable_reg_pp2_iter10 == 1'b1))) begin
        grp_load_fu_350_p1 = ap_sig_allocacmp_knn_set_5_0_load;
    end else begin
        grp_load_fu_350_p1 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln4454_fu_875_p2 == 1'd0) & (1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        grp_load_fu_354_p1 = knn_set_5_3;
    end else if (((select_ln4812_3_reg_1283_pp2_iter9_reg == 1'd0) & (icmp_ln4806_reg_1254_pp2_iter9_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter10 == 1'b1))) begin
        grp_load_fu_354_p1 = ap_sig_allocacmp_knn_set_5_3_load;
    end else begin
        grp_load_fu_354_p1 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln4454_fu_875_p2 == 1'd0) & (1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        grp_load_fu_358_p1 = knn_set_5_1;
    end else if (((icmp_ln4806_reg_1254_pp2_iter9_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (select_ln4812_3_reg_1283_pp2_iter9_reg == 1'd1) & (ap_enable_reg_pp2_iter10 == 1'b1))) begin
        grp_load_fu_358_p1 = ap_sig_allocacmp_knn_set_5_1_load;
    end else begin
        grp_load_fu_358_p1 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln4454_fu_875_p2 == 1'd0) & (1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        grp_load_fu_362_p1 = knn_set_5_4;
    end else if (((select_ln4812_3_reg_1283_pp2_iter9_reg == 1'd0) & (icmp_ln4806_reg_1254_pp2_iter9_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter10 == 1'b1))) begin
        grp_load_fu_362_p1 = ap_sig_allocacmp_knn_set_5_4_load;
    end else begin
        grp_load_fu_362_p1 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln4454_fu_875_p2 == 1'd0) & (1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        grp_load_fu_366_p1 = knn_set_5_2;
    end else if (((icmp_ln4806_reg_1254_pp2_iter9_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (select_ln4812_3_reg_1283_pp2_iter9_reg == 1'd1) & (ap_enable_reg_pp2_iter10 == 1'b1))) begin
        grp_load_fu_366_p1 = ap_sig_allocacmp_knn_set_5_2_load;
    end else begin
        grp_load_fu_366_p1 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln4454_fu_875_p2 == 1'd0) & (1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        grp_load_fu_370_p1 = knn_set_5_5;
    end else if (((select_ln4812_3_reg_1283_pp2_iter9_reg == 1'd0) & (icmp_ln4806_reg_1254_pp2_iter9_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter10 == 1'b1))) begin
        grp_load_fu_370_p1 = ap_sig_allocacmp_knn_set_5_5_load;
    end else begin
        grp_load_fu_370_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state59))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        training_set_V_7_address0 = zext_ln4811_fu_669_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        training_set_V_7_address0 = zext_ln4725_fu_420_p1;
    end else begin
        training_set_V_7_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        training_set_V_7_ce0 = 1'b1;
    end else begin
        training_set_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln4722_reg_1206 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        training_set_V_7_we0 = 1'b1;
    end else begin
        training_set_V_7_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (index_3_load_load_fu_404_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (index_3_load_load_fu_404_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln4722_fu_408_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln4722_fu_408_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln4736_fu_446_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln4736_fu_446_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((1'b0 == ap_block_pp1_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_pp1_stage2 : begin
            if ((1'b0 == ap_block_pp1_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end
        end
        ap_ST_fsm_pp1_stage3 : begin
            if ((1'b0 == ap_block_pp1_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end
        end
        ap_ST_fsm_pp1_stage4 : begin
            if ((1'b0 == ap_block_pp1_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage4;
            end
        end
        ap_ST_fsm_pp1_stage5 : begin
            if ((1'b0 == ap_block_pp1_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage5;
            end
        end
        ap_ST_fsm_pp1_stage6 : begin
            if ((1'b0 == ap_block_pp1_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage6;
            end
        end
        ap_ST_fsm_pp1_stage7 : begin
            if ((1'b0 == ap_block_pp1_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage7;
            end
        end
        ap_ST_fsm_state21 : begin
            if ((~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_empty_n)) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            if ((~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_empty_n)) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if ((~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_empty_n)) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if ((~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_empty_n)) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            if ((~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_empty_n)) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            if ((~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_empty_n)) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            if ((~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_empty_n)) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            if ((~((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_empty_n)) & (1'b1 == ap_CS_fsm_state28))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state29 : begin
            if (((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            if (((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            if (((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state31))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            if (((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state32))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state33 : begin
            if (((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            if (((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state34))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state35 : begin
            if (((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state35))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state36 : begin
            if (((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state36))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln4806_fu_549_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1)) & ~((ap_enable_reg_pp2_iter10 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter11 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter10 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter11 == 1'b1)) | ((ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln4806_fu_549_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if (~((1'b0 == ap_block_pp3_stage0_subdone) & (icmp_ln4454_fu_875_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if (((1'b0 == ap_block_pp3_stage0_subdone) & (icmp_ln4454_fu_875_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state52 : begin
            if (((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state52))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end
        end
        ap_ST_fsm_state53 : begin
            if (((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state53))) begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end
        end
        ap_ST_fsm_state54 : begin
            if (((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state54))) begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end
        end
        ap_ST_fsm_state55 : begin
            if (((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state55))) begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end
        end
        ap_ST_fsm_state56 : begin
            if (((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state56))) begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end
        end
        ap_ST_fsm_state57 : begin
            if (((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state57))) begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end
        end
        ap_ST_fsm_state58 : begin
            if (((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state58))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end
        end
        ap_ST_fsm_state59 : begin
            if (((1'b1 == Output_1_V_V_full_n) & (1'b1 == ap_CS_fsm_state59))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln4150_fu_788_p2 = (select_ln4812_2_reg_1278_pp2_iter10_reg + zext_ln4141_4_fu_779_p1);

assign add_ln4454_4_fu_901_p2 = (2'd1 + i_0_i_reg_257);

assign add_ln4454_fu_881_p2 = (3'd1 + indvar_flatten11_reg_246);

assign add_ln4806_1_fu_575_p2 = (2'd1 + ap_phi_mux_j_0_phi_fu_228_p4);

assign add_ln4806_fu_555_p2 = (9'd1 + indvar_flatten_reg_213);

assign add_ln4811_fu_664_p2 = (trunc_ln4812_mid2_reg_1295 + zext_ln4808_fu_661_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp1_stage2 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp1_stage3 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp1_stage4 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp1_stage5 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp1_stage6 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp1_stage7 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd44];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln4722_reg_1206 == 1'd0) & (1'b0 == Input_1_V_V_empty_n) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln4722_reg_1206 == 1'd0) & (1'b0 == Input_1_V_V_empty_n) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((icmp_ln4722_reg_1206 == 1'd0) & (1'b0 == Input_1_V_V_empty_n) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((icmp_ln4722_reg_1206 == 1'd0) & (1'b0 == Input_1_V_V_empty_n) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((icmp_ln4722_reg_1206 == 1'd0) & (1'b0 == Input_1_V_V_empty_n) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((icmp_ln4722_reg_1206 == 1'd0) & (1'b0 == Input_1_V_V_empty_n) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((icmp_ln4722_reg_1206 == 1'd0) & (1'b0 == Input_1_V_V_empty_n) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((icmp_ln4722_reg_1206 == 1'd0) & (1'b0 == Input_1_V_V_empty_n) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_11001 = ((icmp_ln4722_reg_1206 == 1'd0) & (1'b0 == Input_1_V_V_empty_n) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage4_subdone = ((icmp_ln4722_reg_1206 == 1'd0) & (1'b0 == Input_1_V_V_empty_n) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage5_11001 = ((icmp_ln4722_reg_1206 == 1'd0) & (1'b0 == Input_1_V_V_empty_n) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage5_subdone = ((icmp_ln4722_reg_1206 == 1'd0) & (1'b0 == Input_1_V_V_empty_n) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage6_11001 = ((icmp_ln4722_reg_1206 == 1'd0) & (1'b0 == Input_1_V_V_empty_n) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage6_subdone = ((icmp_ln4722_reg_1206 == 1'd0) & (1'b0 == Input_1_V_V_empty_n) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage7_11001 = ((icmp_ln4722_reg_1206 == 1'd0) & (1'b0 == Input_1_V_V_empty_n) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage7_subdone = ((icmp_ln4722_reg_1206 == 1'd0) & (1'b0 == Input_1_V_V_empty_n) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = ((ap_enable_reg_pp1_iter1 == 1'b1) & (((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == Input_1_V_V_empty_n))));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((ap_enable_reg_pp1_iter1 == 1'b1) & (((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == Input_1_V_V_empty_n))));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((ap_enable_reg_pp1_iter1 == 1'b1) & (((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == Input_1_V_V_empty_n))));
end

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage1_01001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == Input_1_V_V_empty_n))));
end

always @ (*) begin
    ap_block_pp1_stage1_11001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == Input_1_V_V_empty_n))));
end

always @ (*) begin
    ap_block_pp1_stage1_subdone = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == Input_1_V_V_empty_n))));
end

assign ap_block_pp1_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage2_01001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == Input_1_V_V_empty_n))));
end

always @ (*) begin
    ap_block_pp1_stage2_11001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == Input_1_V_V_empty_n))));
end

always @ (*) begin
    ap_block_pp1_stage2_subdone = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == Input_1_V_V_empty_n))));
end

assign ap_block_pp1_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage3_01001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == Input_1_V_V_empty_n))));
end

always @ (*) begin
    ap_block_pp1_stage3_11001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == Input_1_V_V_empty_n))));
end

always @ (*) begin
    ap_block_pp1_stage3_subdone = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == Input_1_V_V_empty_n))));
end

assign ap_block_pp1_stage4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage4_01001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == Input_1_V_V_empty_n))));
end

always @ (*) begin
    ap_block_pp1_stage4_11001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == Input_1_V_V_empty_n))));
end

always @ (*) begin
    ap_block_pp1_stage4_subdone = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == Input_1_V_V_empty_n))));
end

assign ap_block_pp1_stage5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage5_01001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == Input_1_V_V_empty_n))));
end

always @ (*) begin
    ap_block_pp1_stage5_11001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == Input_1_V_V_empty_n))));
end

always @ (*) begin
    ap_block_pp1_stage5_subdone = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == Input_1_V_V_empty_n))));
end

assign ap_block_pp1_stage6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage6_01001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == Input_1_V_V_empty_n))));
end

always @ (*) begin
    ap_block_pp1_stage6_11001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == Input_1_V_V_empty_n))));
end

always @ (*) begin
    ap_block_pp1_stage6_subdone = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == Input_1_V_V_empty_n))));
end

assign ap_block_pp1_stage7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage7_01001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == Input_1_V_V_empty_n))));
end

always @ (*) begin
    ap_block_pp1_stage7_11001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == Input_1_V_V_empty_n))));
end

always @ (*) begin
    ap_block_pp1_stage7_subdone = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == Input_1_V_V_empty_n))));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = ((icmp_ln4722_reg_1206 == 1'd0) & (1'b0 == Input_1_V_V_empty_n));
end

assign ap_block_state12_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state13_pp1_stage1_iter0 = (((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == Input_1_V_V_empty_n)));
end

always @ (*) begin
    ap_block_state14_pp1_stage2_iter0 = (((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == Input_1_V_V_empty_n)));
end

always @ (*) begin
    ap_block_state15_pp1_stage3_iter0 = (((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == Input_1_V_V_empty_n)));
end

always @ (*) begin
    ap_block_state16_pp1_stage4_iter0 = (((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == Input_1_V_V_empty_n)));
end

always @ (*) begin
    ap_block_state17_pp1_stage5_iter0 = (((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == Input_1_V_V_empty_n)));
end

always @ (*) begin
    ap_block_state18_pp1_stage6_iter0 = (((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == Input_1_V_V_empty_n)));
end

always @ (*) begin
    ap_block_state19_pp1_stage7_iter0 = (((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == Input_1_V_V_empty_n)));
end

always @ (*) begin
    ap_block_state20_pp1_stage0_iter1 = (((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == Output_1_V_V_full_n)) | ((icmp_ln4736_reg_1215 == 1'd0) & (1'b0 == Input_1_V_V_empty_n)));
end

always @ (*) begin
    ap_block_state21 = ((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_empty_n));
end

always @ (*) begin
    ap_block_state22 = ((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_empty_n));
end

always @ (*) begin
    ap_block_state23 = ((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_empty_n));
end

always @ (*) begin
    ap_block_state24 = ((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_empty_n));
end

always @ (*) begin
    ap_block_state25 = ((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_empty_n));
end

always @ (*) begin
    ap_block_state26 = ((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_empty_n));
end

always @ (*) begin
    ap_block_state27 = ((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_empty_n));
end

always @ (*) begin
    ap_block_state28 = ((1'b0 == Output_1_V_V_full_n) | (1'b0 == Input_1_V_V_empty_n));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage1_iter0 = ((icmp_ln4722_reg_1206 == 1'd0) & (1'b0 == Input_1_V_V_empty_n));
end

assign ap_block_state40_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp2_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp2_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp2_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp2_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp2_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp2_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp2_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp2_stage0_iter11 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage2_iter0 = ((icmp_ln4722_reg_1206 == 1'd0) & (1'b0 == Input_1_V_V_empty_n));
end

assign ap_block_state50_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage3_iter0 = ((icmp_ln4722_reg_1206 == 1'd0) & (1'b0 == Input_1_V_V_empty_n));
end

always @ (*) begin
    ap_block_state6_pp0_stage4_iter0 = ((icmp_ln4722_reg_1206 == 1'd0) & (1'b0 == Input_1_V_V_empty_n));
end

always @ (*) begin
    ap_block_state7_pp0_stage5_iter0 = ((icmp_ln4722_reg_1206 == 1'd0) & (1'b0 == Input_1_V_V_empty_n));
end

always @ (*) begin
    ap_block_state8_pp0_stage6_iter0 = ((icmp_ln4722_reg_1206 == 1'd0) & (1'b0 == Input_1_V_V_empty_n));
end

always @ (*) begin
    ap_block_state9_pp0_stage7_iter0 = ((icmp_ln4722_reg_1206 == 1'd0) & (1'b0 == Input_1_V_V_empty_n));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign i_7_fu_452_p2 = (ap_phi_mux_i1_0_phi_fu_206_p4 + 13'd1);

assign i_8_fu_643_p2 = (select_ln4812_fu_567_p3 + 8'd1);

assign i_fu_414_p2 = (ap_phi_mux_i_0_phi_fu_194_p4 + 9'd1);

assign icmp_ln4141_1_fu_713_p2 = ((select_ln4141_19_fu_706_p3 > select_ln4141_fu_691_p3) ? 1'b1 : 1'b0);

assign icmp_ln4141_2_fu_742_p2 = ((select_ln4141_21_fu_735_p3 > select_ln4141_20_fu_719_p3) ? 1'b1 : 1'b0);

assign icmp_ln4141_6_fu_629_p2 = ((shl_ln4812_mid1_fu_607_p3 == zext_ln4812_1_fu_581_p1) ? 1'b1 : 1'b0);

assign icmp_ln4141_fu_543_p2 = ((shl_ln_fu_529_p3 == zext_ln4812_fu_521_p1) ? 1'b1 : 1'b0);

assign icmp_ln4149_fu_782_p2 = ((zext_ln4141_fu_770_p1 < select_ln4141_22_fu_774_p3) ? 1'b1 : 1'b0);

assign icmp_ln4454_fu_875_p2 = ((indvar_flatten11_reg_246 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln4456_fu_887_p2 = ((j_0_i_reg_334 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln4463_1_fu_1016_p2 = (($signed(min_distance_list_0_reg_1350) < $signed(min_distance_list_2_16_reg_312)) ? 1'b1 : 1'b0);

assign icmp_ln4463_2_fu_1043_p2 = (($signed(min_distance_list_0_reg_1350) < $signed(tmp_V_153_reg_301)) ? 1'b1 : 1'b0);

assign icmp_ln4463_7_fu_1058_p2 = ((tmp_10_fu_1048_p4 != 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln4463_fu_1003_p2 = (($signed(min_distance_list_0_reg_1350) < $signed(min_distance_list_1_7_reg_323)) ? 1'b1 : 1'b0);

assign icmp_ln4474_1_fu_1137_p2 = ((select_ln4463_8_fu_1076_p3 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln4474_fu_1094_p2 = ((tmp_11_fu_1084_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln4479_1_fu_1143_p2 = ((select_ln4463_8_fu_1076_p3 == 6'd1) ? 1'b1 : 1'b0);

assign icmp_ln4479_fu_1100_p2 = ((select_ln4463_8_fu_1076_p3 == 6'd2) ? 1'b1 : 1'b0);

assign icmp_ln4722_fu_408_p2 = ((ap_phi_mux_i_0_phi_fu_194_p4 == 9'd450) ? 1'b1 : 1'b0);

assign icmp_ln4736_fu_446_p2 = ((ap_phi_mux_i1_0_phi_fu_206_p4 == 13'd8100) ? 1'b1 : 1'b0);

assign icmp_ln4806_fu_549_p2 = ((indvar_flatten_reg_213 == 9'd450) ? 1'b1 : 1'b0);

assign icmp_ln4808_fu_561_p2 = ((i4_0_reg_235 == 8'd225) ? 1'b1 : 1'b0);

assign index_3_load_load_fu_404_p1 = index_3;

assign j_fu_997_p2 = (2'd1 + select_ln4463_9_fu_893_p3);

assign label_list_2_8_fu_1149_p3 = ((icmp_ln4479_1_fu_1143_p2[0:0] === 1'b1) ? 32'd0 : label_list_2_7_reg_279);

assign lhs_V_fu_504_p8 = {{{{{{{trunc_ln414_reg_1224}, {reg_374}}, {reg_379}}, {reg_383}}, {reg_387}}, {reg_391}}, {reg_395}};

assign min_distance_list_0_fu_979_p1 = grp_load_fu_350_p1;

assign min_distance_list_0_fu_979_p2 = grp_load_fu_358_p1;

assign min_distance_list_0_fu_979_p3 = grp_load_fu_366_p1;

assign min_distance_list_0_fu_979_p4 = grp_load_fu_354_p1;

assign min_distance_list_0_fu_979_p5 = grp_load_fu_362_p1;

assign min_distance_list_0_fu_979_p6 = grp_load_fu_370_p1;

assign min_distance_list_0_fu_979_p7 = (select_ln4463_10_fu_929_p3 + zext_ln4463_4_fu_945_p1);

assign min_distance_list_2_18_fu_1114_p3 = ((icmp_ln4479_fu_1100_p2[0:0] === 1'b1) ? min_distance_list_0_reg_1350 : tmp_V_153_reg_301);

assign min_distance_list_2_19_fu_1129_p3 = ((icmp_ln4474_fu_1094_p2[0:0] === 1'b1) ? min_distance_list_2_16_reg_312 : min_distance_list_2_18_fu_1114_p3);

assign min_distance_list_2_20_fu_1157_p3 = ((icmp_ln4479_1_fu_1143_p2[0:0] === 1'b1) ? min_distance_list_0_reg_1350 : min_distance_list_2_16_reg_312);

assign mul_ln4812_1_fu_1195_p0 = 32'd52429;

assign mul_ln4812_1_fu_1195_p1 = mul_ln4812_1_fu_1195_p10;

assign mul_ln4812_1_fu_1195_p10 = mul_ln4812_reg_1273;

assign mul_ln4812_fu_597_p1 = mul_ln4812_fu_597_p10;

assign mul_ln4812_fu_597_p10 = select_ln4812_1_fu_585_p3;

assign mul_ln4812_fu_597_p2 = ($signed(15'd18000) * $signed({{1'b0}, {mul_ln4812_fu_597_p1}}));

assign not_icmp_ln4463_fu_1021_p2 = (icmp_ln4463_fu_1003_p2 ^ 1'd1);

assign or_ln4141_fu_756_p2 = (icmp_ln4141_2_fu_742_p2 | icmp_ln4141_1_fu_713_p2);

assign phitmp_i_1_cast_cast_fu_1027_p1 = not_icmp_ln4463_fu_1021_p2;

assign phitmp_i_2_cast_cast_fu_1072_p1 = phitmp_i_2_fu_1064_p3;

assign phitmp_i_2_fu_1064_p3 = ((icmp_ln4463_7_fu_1058_p2[0:0] === 1'b1) ? 2'd2 : trunc_ln4463_8_fu_1039_p1);

assign ret_V_fu_678_p2 = (rhs_V_fu_674_p1 ^ lhs_V_reg_1249);

assign rhs_V_fu_674_p1 = training_set_V_7_q0[195:0];

assign select_ln4141_19_fu_706_p3 = ((select_ln4812_3_reg_1283_pp2_iter9_reg[0:0] === 1'b1) ? trunc_ln4141_17_fu_698_p1 : trunc_ln4141_18_fu_702_p1);

assign select_ln4141_20_fu_719_p3 = ((icmp_ln4141_1_fu_713_p2[0:0] === 1'b1) ? select_ln4141_19_fu_706_p3 : select_ln4141_fu_691_p3);

assign select_ln4141_21_fu_735_p3 = ((select_ln4812_3_reg_1283_pp2_iter9_reg[0:0] === 1'b1) ? trunc_ln4141_19_fu_727_p1 : trunc_ln4141_20_fu_731_p1);

assign select_ln4141_22_fu_774_p3 = ((icmp_ln4141_2_reg_1320[0:0] === 1'b1) ? select_ln4141_21_reg_1315 : select_ln4141_20_reg_1310);

assign select_ln4141_23_fu_748_p3 = ((icmp_ln4141_2_fu_742_p2[0:0] === 1'b1) ? 2'd2 : 2'd1);

assign select_ln4141_24_fu_762_p3 = ((or_ln4141_fu_756_p2[0:0] === 1'b1) ? select_ln4141_23_fu_748_p3 : 2'd0);

assign select_ln4141_fu_691_p3 = ((select_ln4812_3_reg_1283_pp2_iter9_reg[0:0] === 1'b1) ? trunc_ln4141_fu_683_p1 : trunc_ln4141_16_fu_687_p1);

assign select_ln4454_fu_937_p3 = ((icmp_ln4456_fu_887_p2[0:0] === 1'b1) ? add_ln4454_4_fu_901_p2 : i_0_i_reg_257);

assign select_ln4463_10_fu_929_p3 = ((icmp_ln4456_fu_887_p2[0:0] === 1'b1) ? sub_ln4463_4_fu_923_p2 : sub_ln4463_fu_869_p2);

assign select_ln4463_7_fu_1031_p3 = ((icmp_ln4463_1_fu_1016_p2[0:0] === 1'b1) ? phitmp_i_1_cast_cast_fu_1027_p1 : select_ln4463_fu_1008_p3);

assign select_ln4463_8_fu_1076_p3 = ((icmp_ln4463_2_fu_1043_p2[0:0] === 1'b1) ? phitmp_i_2_cast_cast_fu_1072_p1 : select_ln4463_7_fu_1031_p3);

assign select_ln4463_9_fu_893_p3 = ((icmp_ln4456_fu_887_p2[0:0] === 1'b1) ? 2'd0 : j_0_i_reg_334);

assign select_ln4463_fu_1008_p3 = ((icmp_ln4463_fu_1003_p2[0:0] === 1'b1) ? 6'd0 : 6'd40);

assign select_ln4474_11_fu_1164_p3 = ((icmp_ln4474_1_fu_1137_p2[0:0] === 1'b1) ? label_list_1_4_reg_290 : label_list_2_8_fu_1149_p3);

assign select_ln4474_12_fu_1172_p3 = ((icmp_ln4474_1_fu_1137_p2[0:0] === 1'b1) ? min_distance_list_1_7_reg_323 : min_distance_list_2_20_fu_1157_p3);

assign select_ln4474_fu_1121_p3 = ((icmp_ln4474_fu_1094_p2[0:0] === 1'b1) ? label_list_2_7_reg_279 : select_ln4479_fu_1106_p3);

assign select_ln4479_19_fu_1180_p3 = ((icmp_ln4474_1_fu_1137_p2[0:0] === 1'b1) ? 32'd0 : label_list_1_4_reg_290);

assign select_ln4479_20_fu_1188_p3 = ((icmp_ln4474_1_fu_1137_p2[0:0] === 1'b1) ? min_distance_list_0_reg_1350 : min_distance_list_1_7_reg_323);

assign select_ln4479_fu_1106_p3 = ((icmp_ln4479_fu_1100_p2[0:0] === 1'b1) ? 32'd0 : tmp_V_156_reg_268);

assign select_ln4812_1_fu_585_p3 = ((icmp_ln4808_fu_561_p2[0:0] === 1'b1) ? add_ln4806_1_fu_575_p2 : ap_phi_mux_j_0_phi_fu_228_p4);

assign select_ln4812_2_fu_621_p3 = ((icmp_ln4808_fu_561_p2[0:0] === 1'b1) ? sub_ln4812_1_fu_615_p2 : sub_ln4812_fu_537_p2);

assign select_ln4812_3_fu_635_p3 = ((icmp_ln4808_fu_561_p2[0:0] === 1'b1) ? icmp_ln4141_6_fu_629_p2 : icmp_ln4141_fu_543_p2);

assign select_ln4812_fu_567_p3 = ((icmp_ln4808_fu_561_p2[0:0] === 1'b1) ? 8'd0 : i4_0_reg_235);

assign shl_ln4463_mid1_fu_915_p3 = {{trunc_ln4463_7_fu_911_p1}, {2'd0}};

assign shl_ln4812_mid1_fu_607_p3 = {{trunc_ln4812_1_fu_603_p1}, {2'd0}};

assign shl_ln4_fu_861_p3 = {{trunc_ln4463_fu_857_p1}, {2'd0}};

assign shl_ln_fu_529_p3 = {{trunc_ln4812_fu_525_p1}, {2'd0}};

assign start_out = real_start;

assign sub_ln4463_4_fu_923_p2 = (shl_ln4463_mid1_fu_915_p3 - zext_ln4463_26_fu_907_p1);

assign sub_ln4463_fu_869_p2 = (shl_ln4_fu_861_p3 - zext_ln4463_fu_853_p1);

assign sub_ln4812_1_fu_615_p2 = (shl_ln4812_mid1_fu_607_p3 - zext_ln4812_1_fu_581_p1);

assign sub_ln4812_fu_537_p2 = (shl_ln_fu_529_p3 - zext_ln4812_fu_521_p1);

assign tmp_10_fu_1048_p4 = {{select_ln4463_7_fu_1031_p3[5:2]}};

assign tmp_11_fu_1084_p4 = {{select_ln4463_8_fu_1076_p3[5:1]}};

assign training_set_V_7_d0 = {{{{{{{{reg_374}, {reg_379}}, {reg_383}}, {reg_387}}, {reg_391}}, {reg_395}}, {reg_399}}, {Input_1_V_V_dout}};

assign trunc_ln4141_16_fu_687_p1 = grp_load_fu_354_p1[8:0];

assign trunc_ln4141_17_fu_698_p1 = grp_load_fu_358_p1[8:0];

assign trunc_ln4141_18_fu_702_p1 = grp_load_fu_362_p1[8:0];

assign trunc_ln4141_19_fu_727_p1 = grp_load_fu_366_p1[8:0];

assign trunc_ln4141_20_fu_731_p1 = grp_load_fu_370_p1[8:0];

assign trunc_ln4141_fu_683_p1 = grp_load_fu_350_p1[8:0];

assign trunc_ln414_fu_500_p1 = Input_1_V_V_dout[3:0];

assign trunc_ln4463_7_fu_911_p1 = add_ln4454_4_fu_901_p2[0:0];

assign trunc_ln4463_8_fu_1039_p1 = select_ln4463_7_fu_1031_p3[1:0];

assign trunc_ln4463_fu_857_p1 = i_0_i_reg_257[0:0];

assign trunc_ln4812_1_fu_603_p1 = add_ln4806_1_fu_575_p2[0:0];

assign trunc_ln4812_fu_525_p1 = ap_phi_mux_j_0_phi_fu_228_p4[0:0];

assign zext_ln4141_4_fu_779_p1 = select_ln4141_24_reg_1325;

assign zext_ln4141_fu_770_p1 = grp_popcount_fu_345_ap_return;

assign zext_ln4150_16_fu_833_p1 = grp_popcount_fu_345_ap_return;

assign zext_ln4150_17_fu_823_p1 = grp_popcount_fu_345_ap_return;

assign zext_ln4150_18_fu_813_p1 = grp_popcount_fu_345_ap_return;

assign zext_ln4150_19_fu_803_p1 = grp_popcount_fu_345_ap_return;

assign zext_ln4150_20_fu_793_p1 = grp_popcount_fu_345_ap_return;

assign zext_ln4150_fu_843_p1 = grp_popcount_fu_345_ap_return;

assign zext_ln4463_26_fu_907_p1 = add_ln4454_4_fu_901_p2;

assign zext_ln4463_4_fu_945_p1 = select_ln4463_9_fu_893_p3;

assign zext_ln4463_fu_853_p1 = i_0_i_reg_257;

assign zext_ln4725_fu_420_p1 = i_0_reg_190;

assign zext_ln4808_fu_661_p1 = select_ln4812_reg_1263_pp2_iter1_reg;

assign zext_ln4811_fu_669_p1 = add_ln4811_fu_664_p2;

assign zext_ln4812_1_fu_581_p1 = add_ln4806_1_fu_575_p2;

assign zext_ln4812_fu_521_p1 = ap_phi_mux_j_0_phi_fu_228_p4;

always @ (posedge ap_clk) begin
    knn_set_5_0[10:9] <= 2'b00;
    knn_set_5_1[10:9] <= 2'b00;
    knn_set_5_2[10:9] <= 2'b00;
    knn_set_5_3[10:9] <= 2'b00;
    knn_set_5_4[10:9] <= 2'b00;
    knn_set_5_5[10:9] <= 2'b00;
end

endmodule //update_knn2
