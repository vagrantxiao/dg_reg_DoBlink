// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module update_knn20 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        Input_1_V_V_dout,
        Input_1_V_V_empty_n,
        Input_1_V_V_read,
        Output_1_V_V,
        Output_1_V_V_ap_vld,
        Output_1_V_V_ap_ack
);

parameter    ap_ST_fsm_state1 = 37'd1;
parameter    ap_ST_fsm_pp0_stage0 = 37'd2;
parameter    ap_ST_fsm_pp0_stage1 = 37'd4;
parameter    ap_ST_fsm_pp0_stage2 = 37'd8;
parameter    ap_ST_fsm_pp0_stage3 = 37'd16;
parameter    ap_ST_fsm_pp0_stage4 = 37'd32;
parameter    ap_ST_fsm_pp0_stage5 = 37'd64;
parameter    ap_ST_fsm_pp0_stage6 = 37'd128;
parameter    ap_ST_fsm_pp0_stage7 = 37'd256;
parameter    ap_ST_fsm_state11 = 37'd512;
parameter    ap_ST_fsm_state12 = 37'd1024;
parameter    ap_ST_fsm_state13 = 37'd2048;
parameter    ap_ST_fsm_state14 = 37'd4096;
parameter    ap_ST_fsm_state15 = 37'd8192;
parameter    ap_ST_fsm_state16 = 37'd16384;
parameter    ap_ST_fsm_state17 = 37'd32768;
parameter    ap_ST_fsm_state18 = 37'd65536;
parameter    ap_ST_fsm_state19 = 37'd131072;
parameter    ap_ST_fsm_state20 = 37'd262144;
parameter    ap_ST_fsm_state21 = 37'd524288;
parameter    ap_ST_fsm_state22 = 37'd1048576;
parameter    ap_ST_fsm_state23 = 37'd2097152;
parameter    ap_ST_fsm_state24 = 37'd4194304;
parameter    ap_ST_fsm_state25 = 37'd8388608;
parameter    ap_ST_fsm_state26 = 37'd16777216;
parameter    ap_ST_fsm_pp1_stage0 = 37'd33554432;
parameter    ap_ST_fsm_state39 = 37'd67108864;
parameter    ap_ST_fsm_pp2_stage0 = 37'd134217728;
parameter    ap_ST_fsm_state43 = 37'd268435456;
parameter    ap_ST_fsm_state44 = 37'd536870912;
parameter    ap_ST_fsm_state45 = 37'd1073741824;
parameter    ap_ST_fsm_state46 = 37'd2147483648;
parameter    ap_ST_fsm_state47 = 37'd4294967296;
parameter    ap_ST_fsm_state48 = 37'd8589934592;
parameter    ap_ST_fsm_state49 = 37'd17179869184;
parameter    ap_ST_fsm_state50 = 37'd34359738368;
parameter    ap_ST_fsm_state51 = 37'd68719476736;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] Input_1_V_V_dout;
input   Input_1_V_V_empty_n;
output   Input_1_V_V_read;
output  [31:0] Output_1_V_V;
output   Output_1_V_V_ap_vld;
input   Output_1_V_V_ap_ack;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg Input_1_V_V_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [36:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [0:0] index;
reg   [8:0] training_set_V_4_address0;
reg    training_set_V_4_ce0;
reg    training_set_V_4_we0;
wire   [255:0] training_set_V_4_d0;
wire   [255:0] training_set_V_4_q0;
reg   [10:0] knn_set_0;
reg   [10:0] knn_set_1;
reg   [10:0] knn_set_2;
reg   [10:0] knn_set_3;
reg   [10:0] knn_set_4;
reg   [10:0] knn_set;
reg    Input_1_V_V_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln7472_reg_2006;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_pp0_stage5;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_pp0_stage6;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_pp0_stage7;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
reg    Output_1_V_V_blk_n;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state51;
reg   [8:0] i_0_reg_294;
reg   [8:0] indvar_flatten_reg_306;
reg   [1:0] j_0_reg_317;
reg   [7:0] i3_0_reg_328;
reg   [2:0] indvar_flatten11_reg_339;
reg   [1:0] i_0_i_reg_350;
reg   [31:0] label_list_2_14_reg_361;
reg   [31:0] label_list_2_1_reg_371;
reg   [31:0] label_list_1_1_reg_381;
reg   [31:0] min_distance_list_2_1_reg_391;
reg   [31:0] min_distance_list_2_1_11_reg_401;
reg   [31:0] min_distance_list_1_1_reg_411;
reg   [1:0] j_0_i_reg_421;
reg   [31:0] reg_472;
reg    ap_block_state3_pp0_stage1_iter0;
reg    ap_block_pp0_stage1_11001;
reg   [31:0] reg_477;
reg    ap_block_state4_pp0_stage2_iter0;
reg    ap_block_pp0_stage2_11001;
reg   [31:0] reg_481;
reg    ap_block_state5_pp0_stage3_iter0;
reg    ap_block_pp0_stage3_11001;
reg   [31:0] reg_485;
reg    ap_block_state6_pp0_stage4_iter0;
reg    ap_block_pp0_stage4_11001;
reg   [31:0] reg_489;
reg    ap_block_state7_pp0_stage5_iter0;
reg    ap_block_pp0_stage5_11001;
reg   [31:0] reg_493;
reg    ap_block_state8_pp0_stage6_iter0;
reg    ap_block_pp0_stage6_11001;
reg   [31:0] reg_497;
reg    ap_block_state9_pp0_stage7_iter0;
reg    ap_block_pp0_stage7_11001;
wire   [0:0] index_load_load_fu_502_p1;
reg   [0:0] index_load_reg_2002;
reg    ap_block_state1;
wire   [0:0] icmp_ln7472_fu_506_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state10_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [8:0] i_fu_512_p2;
reg   [8:0] i_reg_2010;
wire   [3:0] trunc_ln414_fu_586_p1;
reg   [3:0] trunc_ln414_reg_2015;
reg   [31:0] tmp_V_23_reg_2020;
reg   [31:0] tmp_V_24_reg_2025;
reg   [31:0] tmp_V_25_reg_2030;
reg   [31:0] tmp_V_26_reg_2035;
wire   [195:0] lhs_V_fu_590_p8;
reg   [195:0] lhs_V_reg_2040;
wire   [0:0] icmp_ln7529_fu_635_p2;
reg   [0:0] icmp_ln7529_reg_2045;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state27_pp1_stage0_iter0;
wire    ap_block_state28_pp1_stage0_iter1;
wire    ap_block_state29_pp1_stage0_iter2;
wire    ap_block_state30_pp1_stage0_iter3;
wire    ap_block_state31_pp1_stage0_iter4;
wire    ap_block_state32_pp1_stage0_iter5;
wire    ap_block_state33_pp1_stage0_iter6;
wire    ap_block_state34_pp1_stage0_iter7;
wire    ap_block_state35_pp1_stage0_iter8;
wire    ap_block_state36_pp1_stage0_iter9;
wire    ap_block_state37_pp1_stage0_iter10;
wire    ap_block_state38_pp1_stage0_iter11;
wire    ap_block_pp1_stage0_11001;
reg   [0:0] icmp_ln7529_reg_2045_pp1_iter1_reg;
reg   [0:0] icmp_ln7529_reg_2045_pp1_iter2_reg;
reg   [0:0] icmp_ln7529_reg_2045_pp1_iter3_reg;
reg   [0:0] icmp_ln7529_reg_2045_pp1_iter4_reg;
reg   [0:0] icmp_ln7529_reg_2045_pp1_iter5_reg;
reg   [0:0] icmp_ln7529_reg_2045_pp1_iter6_reg;
reg   [0:0] icmp_ln7529_reg_2045_pp1_iter7_reg;
reg   [0:0] icmp_ln7529_reg_2045_pp1_iter8_reg;
reg   [0:0] icmp_ln7529_reg_2045_pp1_iter9_reg;
reg   [0:0] icmp_ln7529_reg_2045_pp1_iter10_reg;
wire   [8:0] add_ln7529_fu_641_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [7:0] select_ln7535_fu_653_p3;
reg   [7:0] select_ln7535_reg_2054;
reg   [7:0] select_ln7535_reg_2054_pp1_iter1_reg;
wire   [1:0] select_ln7535_1_fu_671_p3;
reg   [1:0] select_ln7535_1_reg_2059;
wire   [14:0] mul_ln7535_fu_683_p2;
reg   [14:0] mul_ln7535_reg_2064;
wire   [2:0] select_ln7535_2_fu_707_p3;
reg   [2:0] select_ln7535_2_reg_2069;
reg   [2:0] select_ln7535_2_reg_2069_pp1_iter1_reg;
reg   [2:0] select_ln7535_2_reg_2069_pp1_iter2_reg;
reg   [2:0] select_ln7535_2_reg_2069_pp1_iter3_reg;
reg   [2:0] select_ln7535_2_reg_2069_pp1_iter4_reg;
reg   [2:0] select_ln7535_2_reg_2069_pp1_iter5_reg;
reg   [2:0] select_ln7535_2_reg_2069_pp1_iter6_reg;
reg   [2:0] select_ln7535_2_reg_2069_pp1_iter7_reg;
reg   [2:0] select_ln7535_2_reg_2069_pp1_iter8_reg;
reg   [2:0] select_ln7535_2_reg_2069_pp1_iter9_reg;
reg   [2:0] select_ln7535_2_reg_2069_pp1_iter10_reg;
wire   [0:0] select_ln7535_3_fu_721_p3;
reg   [0:0] select_ln7535_3_reg_2074;
reg   [0:0] select_ln7535_3_reg_2074_pp1_iter1_reg;
reg   [0:0] select_ln7535_3_reg_2074_pp1_iter2_reg;
reg   [0:0] select_ln7535_3_reg_2074_pp1_iter3_reg;
reg   [0:0] select_ln7535_3_reg_2074_pp1_iter4_reg;
reg   [0:0] select_ln7535_3_reg_2074_pp1_iter5_reg;
reg   [0:0] select_ln7535_3_reg_2074_pp1_iter6_reg;
reg   [0:0] select_ln7535_3_reg_2074_pp1_iter7_reg;
reg   [0:0] select_ln7535_3_reg_2074_pp1_iter8_reg;
reg   [0:0] select_ln7535_3_reg_2074_pp1_iter9_reg;
wire   [7:0] i_1_fu_729_p2;
reg   [8:0] trunc_ln7535_mid2_reg_2086;
wire   [195:0] ret_V_fu_764_p2;
reg   [195:0] ret_V_reg_2096;
wire   [8:0] select_ln4141_2_fu_805_p3;
reg   [8:0] select_ln4141_2_reg_2101;
wire   [8:0] select_ln4141_3_fu_821_p3;
reg   [8:0] select_ln4141_3_reg_2106;
wire   [0:0] icmp_ln4141_2_fu_828_p2;
reg   [0:0] icmp_ln4141_2_reg_2111;
wire   [1:0] select_ln4141_6_fu_848_p3;
reg   [1:0] select_ln4141_6_reg_2116;
wire   [0:0] icmp_ln4454_fu_961_p2;
reg   [0:0] icmp_ln4454_reg_2127;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state40_pp2_stage0_iter0;
wire    ap_block_state41_pp2_stage0_iter1;
wire    ap_block_state42_pp2_stage0_iter2;
wire    ap_block_pp2_stage0_11001;
reg   [0:0] icmp_ln4454_reg_2127_pp2_iter1_reg;
wire   [2:0] add_ln4454_fu_967_p2;
reg    ap_enable_reg_pp2_iter0;
wire   [1:0] select_ln4454_fu_1023_p3;
wire   [31:0] min_distance_list_2_fu_1065_p8;
reg   [31:0] min_distance_list_2_reg_2141;
reg   [31:0] min_distance_list_2_reg_2141_pp2_iter1_reg;
wire   [1:0] j_fu_1083_p2;
wire   [5:0] select_ln4463_2_fu_1162_p3;
reg   [5:0] select_ln4463_2_reg_2156;
wire   [0:0] icmp_ln4474_fu_1180_p2;
reg   [0:0] icmp_ln4474_reg_2162;
wire   [0:0] icmp_ln4474_1_fu_1186_p2;
reg   [0:0] icmp_ln4474_1_reg_2169;
wire   [31:0] min_distance_list_1_3_fu_1192_p3;
reg   [31:0] min_distance_list_1_3_reg_2177;
reg    ap_enable_reg_pp2_iter1;
wire   [31:0] select_ln4479_fu_1222_p3;
reg    ap_enable_reg_pp2_iter2;
wire   [31:0] min_distance_list_0_2_fu_1237_p3;
wire   [31:0] select_ln4479_2_fu_1267_p3;
wire   [31:0] min_distance_list_0_4_fu_1282_p3;
wire   [31:0] select_ln4474_4_fu_1289_p3;
wire   [1:0] i_2_fu_1402_p2;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state45;
wire   [1:0] select_ln4533_1_fu_1625_p3;
reg   [1:0] select_ln4533_1_reg_2388;
wire   [31:0] phi_ln_fu_1637_p18;
reg   [31:0] phi_ln_reg_2393;
wire    ap_CS_fsm_state46;
wire   [1:0] select_ln4533_2_fu_1686_p3;
reg   [1:0] select_ln4533_2_reg_2427;
wire   [0:0] icmp_ln4533_3_fu_1732_p2;
reg   [0:0] icmp_ln4533_3_reg_2432;
wire    ap_CS_fsm_state47;
wire   [2:0] select_ln4533_4_fu_1783_p3;
reg   [2:0] select_ln4533_4_reg_2444;
wire   [31:0] phi_ln4533_3_fu_1795_p18;
reg   [31:0] phi_ln4533_3_reg_2449;
wire    ap_CS_fsm_state48;
wire   [2:0] select_ln4533_5_fu_1839_p3;
reg   [2:0] select_ln4533_5_reg_2474;
wire   [0:0] icmp_ln4533_6_fu_1882_p2;
reg   [0:0] icmp_ln4533_6_reg_2479;
wire   [3:0] select_ln4533_7_fu_1929_p3;
reg   [3:0] select_ln4533_7_reg_2484;
wire    ap_CS_fsm_state49;
wire   [31:0] phi_ln4533_6_fu_1937_p18;
reg   [31:0] phi_ln4533_6_reg_2489;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage7_subdone;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state27;
reg    ap_enable_reg_pp1_iter1;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter3;
reg    ap_enable_reg_pp1_iter4;
reg    ap_enable_reg_pp1_iter5;
reg    ap_enable_reg_pp1_iter6;
reg    ap_enable_reg_pp1_iter7;
reg    ap_enable_reg_pp1_iter8;
reg    ap_enable_reg_pp1_iter9;
reg    ap_enable_reg_pp1_iter10;
reg    ap_enable_reg_pp1_iter11;
wire    ap_CS_fsm_state39;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state40;
wire   [7:0] grp_popcount_fu_443_ap_return;
reg   [8:0] ap_phi_mux_i_0_phi_fu_298_p4;
reg   [1:0] ap_phi_mux_j_0_phi_fu_321_p4;
wire    ap_block_pp1_stage0;
reg   [31:0] ap_phi_mux_min_distance_list_2_1_phi_fu_394_p4;
wire    ap_block_pp2_stage0;
reg   [31:0] ap_phi_mux_min_distance_list_2_1_11_phi_fu_404_p4;
reg   [31:0] ap_phi_mux_min_distance_list_1_1_phi_fu_414_p4;
reg   [1:0] i1_0_i_reg_432;
wire   [0:0] icmp_ln4520_fu_1396_p2;
wire    ap_CS_fsm_state43;
wire   [63:0] zext_ln7475_fu_518_p1;
wire   [63:0] zext_ln7534_fu_755_p1;
wire   [10:0] zext_ln4150_1_fu_919_p1;
wire   [0:0] icmp_ln4149_fu_868_p2;
wire   [2:0] add_ln4150_fu_874_p2;
reg   [10:0] ap_sig_allocacmp_knn_set_0_load;
reg   [10:0] grp_load_fu_448_p1;
wire   [10:0] zext_ln4150_2_fu_909_p1;
reg   [10:0] ap_sig_allocacmp_knn_set_1_load;
reg   [10:0] grp_load_fu_456_p1;
wire   [10:0] zext_ln4150_3_fu_899_p1;
reg   [10:0] ap_sig_allocacmp_knn_set_2_load;
reg   [10:0] grp_load_fu_464_p1;
wire   [10:0] zext_ln4150_4_fu_889_p1;
reg   [10:0] ap_sig_allocacmp_knn_set_3_load;
reg   [10:0] grp_load_fu_452_p1;
wire   [10:0] zext_ln4150_5_fu_879_p1;
reg   [10:0] ap_sig_allocacmp_knn_set_4_load;
reg   [10:0] grp_load_fu_460_p1;
wire   [10:0] zext_ln4150_fu_929_p1;
reg   [10:0] ap_sig_allocacmp_knn_set_load;
reg   [10:0] grp_load_fu_468_p1;
reg   [31:0] vote_list_9_fu_180;
wire   [31:0] vote_list_0_fu_1480_p2;
wire   [3:0] trunc_ln4523_fu_1450_p1;
reg   [31:0] vote_list_9_1_fu_184;
reg   [31:0] vote_list_9_2_fu_188;
reg   [31:0] vote_list_9_3_fu_192;
reg   [31:0] vote_list_9_4_fu_196;
reg   [31:0] vote_list_9_5_fu_200;
reg   [31:0] vote_list_9_6_fu_204;
reg   [31:0] vote_list_9_7_fu_208;
reg   [31:0] vote_list_9_8_fu_212;
reg   [31:0] vote_list_9_9_fu_216;
reg   [31:0] vote_list_9_10_fu_220;
reg   [31:0] vote_list_9_11_fu_224;
reg   [31:0] vote_list_9_12_fu_228;
reg   [31:0] vote_list_9_13_fu_232;
reg   [31:0] vote_list_9_14_fu_236;
reg   [31:0] vote_list_9_15_fu_240;
reg   [31:0] vote_list_9_16_fu_244;
reg   [31:0] vote_list_9_17_fu_248;
reg   [31:0] vote_list_9_18_fu_252;
reg   [31:0] vote_list_9_19_fu_256;
wire   [0:0] trunc_ln7535_fu_611_p1;
wire   [2:0] shl_ln_fu_615_p3;
wire   [2:0] zext_ln7535_fu_607_p1;
wire   [0:0] icmp_ln7531_fu_647_p2;
wire   [1:0] add_ln7529_1_fu_661_p2;
wire   [1:0] mul_ln7535_fu_683_p1;
wire   [0:0] trunc_ln7535_1_fu_689_p1;
wire   [2:0] shl_ln7535_mid1_fu_693_p3;
wire   [2:0] zext_ln7535_1_fu_667_p1;
wire   [2:0] sub_ln7535_1_fu_701_p2;
wire   [2:0] sub_ln7535_fu_623_p2;
wire   [0:0] icmp_ln4141_3_fu_715_p2;
wire   [0:0] icmp_ln4141_fu_629_p2;
wire   [31:0] mul_ln7535_1_fu_1995_p2;
wire   [8:0] zext_ln7531_fu_747_p1;
wire   [8:0] add_ln7534_fu_750_p2;
wire   [195:0] rhs_V_fu_760_p1;
wire   [8:0] trunc_ln4141_fu_769_p1;
wire   [8:0] trunc_ln4141_1_fu_773_p1;
wire   [8:0] trunc_ln4141_2_fu_784_p1;
wire   [8:0] trunc_ln4141_3_fu_788_p1;
wire   [8:0] select_ln4141_1_fu_792_p3;
wire   [8:0] select_ln4141_fu_777_p3;
wire   [0:0] icmp_ln4141_1_fu_799_p2;
wire   [8:0] trunc_ln4141_4_fu_813_p1;
wire   [8:0] trunc_ln4141_5_fu_817_p1;
wire   [0:0] or_ln4141_fu_842_p2;
wire   [1:0] select_ln4141_4_fu_834_p3;
wire   [8:0] zext_ln4141_fu_856_p1;
wire   [8:0] select_ln4141_5_fu_860_p3;
wire   [2:0] zext_ln4141_1_fu_865_p1;
wire   [0:0] trunc_ln4463_fu_943_p1;
wire   [2:0] shl_ln1_fu_947_p3;
wire   [2:0] zext_ln4463_fu_939_p1;
wire   [0:0] icmp_ln4456_fu_973_p2;
wire   [1:0] add_ln4454_1_fu_987_p2;
wire   [0:0] trunc_ln4463_1_fu_997_p1;
wire   [2:0] shl_ln4463_mid1_fu_1001_p3;
wire   [2:0] zext_ln4463_8_fu_993_p1;
wire   [2:0] sub_ln4463_1_fu_1009_p2;
wire   [2:0] sub_ln4463_fu_955_p2;
wire   [1:0] select_ln4463_3_fu_979_p3;
wire   [2:0] select_ln4463_4_fu_1015_p3;
wire   [2:0] zext_ln4463_1_fu_1031_p1;
wire   [31:0] min_distance_list_2_fu_1065_p1;
wire   [31:0] min_distance_list_2_fu_1065_p2;
wire   [31:0] min_distance_list_2_fu_1065_p3;
wire   [31:0] min_distance_list_2_fu_1065_p4;
wire   [31:0] min_distance_list_2_fu_1065_p5;
wire   [31:0] min_distance_list_2_fu_1065_p6;
wire   [2:0] min_distance_list_2_fu_1065_p7;
wire   [0:0] icmp_ln4463_fu_1089_p2;
wire   [0:0] not_icmp_ln4463_fu_1107_p2;
wire   [0:0] icmp_ln4463_1_fu_1102_p2;
wire   [5:0] phitmp_i_1_cast_cast_fu_1113_p1;
wire   [5:0] select_ln4463_fu_1094_p3;
wire   [5:0] select_ln4463_1_fu_1117_p3;
wire   [3:0] tmp_1_fu_1134_p4;
wire   [0:0] icmp_ln4463_3_fu_1144_p2;
wire   [1:0] trunc_ln4463_2_fu_1125_p1;
wire   [1:0] phitmp_i_2_fu_1150_p3;
wire   [0:0] icmp_ln4463_2_fu_1129_p2;
wire   [5:0] phitmp_i_2_cast_cast_fu_1158_p1;
wire   [4:0] tmp_2_fu_1170_p4;
wire   [0:0] icmp_ln4479_fu_1199_p2;
wire   [0:0] xor_ln4474_fu_1211_p2;
wire   [0:0] and_ln4479_fu_1216_p2;
wire   [31:0] select_ln4474_fu_1204_p3;
wire   [31:0] min_distance_list_0_1_fu_1230_p3;
wire   [0:0] icmp_ln4479_1_fu_1244_p2;
wire   [0:0] xor_ln4474_1_fu_1256_p2;
wire   [0:0] and_ln4479_1_fu_1261_p2;
wire   [31:0] select_ln4474_2_fu_1249_p3;
wire   [31:0] min_distance_list_0_3_fu_1275_p3;
wire   [31:0] tmp_5_fu_1438_p5;
wire   [3:0] tmp_6_fu_1454_p11;
wire   [31:0] tmp_6_fu_1454_p12;
wire   [0:0] icmp_ln4533_fu_1595_p2;
wire   [0:0] xor_ln4533_fu_1601_p2;
wire   [31:0] select_ln4533_fu_1611_p3;
wire   [0:0] icmp_ln4533_1_fu_1619_p2;
wire   [1:0] zext_ln4533_fu_1607_p1;
wire   [3:0] phi_ln_fu_1637_p17;
wire   [0:0] icmp_ln4533_2_fu_1681_p2;
wire   [3:0] phi_ln4533_1_fu_1697_p17;
wire   [31:0] phi_ln4533_1_fu_1697_p18;
wire   [2:0] zext_ln4533_2_fu_1741_p1;
wire   [2:0] select_ln4533_3_fu_1744_p3;
wire   [3:0] phi_ln4533_2_fu_1755_p17;
wire   [31:0] phi_ln4533_2_fu_1755_p18;
wire   [0:0] icmp_ln4533_4_fu_1777_p2;
wire   [3:0] phi_ln4533_3_fu_1795_p17;
wire   [0:0] icmp_ln4533_5_fu_1834_p2;
wire   [3:0] phi_ln4533_4_fu_1850_p17;
wire   [31:0] phi_ln4533_4_fu_1850_p18;
wire   [2:0] select_ln4533_6_fu_1891_p3;
wire   [3:0] zext_ln4533_7_fu_1897_p1;
wire   [31:0] phi_ln4533_5_fu_1901_p18;
wire   [0:0] icmp_ln4533_7_fu_1923_p2;
wire   [3:0] phi_ln4533_6_fu_1937_p17;
wire   [0:0] icmp_ln4533_8_fu_1970_p2;
wire   [3:0] select_ln4533_8_fu_1975_p3;
wire   [7:0] zext_ln4533_8_fu_1982_p1;
wire   [16:0] mul_ln7535_1_fu_1995_p0;
wire   [14:0] mul_ln7535_1_fu_1995_p1;
wire    regslice_forward_Output_1_V_V_U_apdone_blk;
reg   [36:0] ap_NS_fsm;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage3_subdone;
reg    ap_block_pp0_stage4_subdone;
reg    ap_block_pp0_stage5_subdone;
reg    ap_block_pp0_stage6_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
wire   [31:0] Output_1_V_V_int;
reg    Output_1_V_V_ap_vld_int;
wire    Output_1_V_V_ap_ack_int;
wire    regslice_forward_Output_1_V_V_U_vld_out;
wire   [31:0] mul_ln7535_1_fu_1995_p10;
wire   [14:0] mul_ln7535_fu_683_p10;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 37'd1;
#0 index = 1'd0;
#0 knn_set_0 = 11'd0;
#0 knn_set_1 = 11'd0;
#0 knn_set_2 = 11'd0;
#0 knn_set_3 = 11'd0;
#0 knn_set_4 = 11'd0;
#0 knn_set = 11'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter5 = 1'b0;
#0 ap_enable_reg_pp1_iter6 = 1'b0;
#0 ap_enable_reg_pp1_iter7 = 1'b0;
#0 ap_enable_reg_pp1_iter8 = 1'b0;
#0 ap_enable_reg_pp1_iter9 = 1'b0;
#0 ap_enable_reg_pp1_iter10 = 1'b0;
#0 ap_enable_reg_pp1_iter11 = 1'b0;
end

update_knn16_traibkb #(
    .DataWidth( 256 ),
    .AddressRange( 450 ),
    .AddressWidth( 9 ))
training_set_V_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(training_set_V_4_address0),
    .ce0(training_set_V_4_ce0),
    .we0(training_set_V_4_we0),
    .d0(training_set_V_4_d0),
    .q0(training_set_V_4_q0)
);

popcount grp_popcount_fu_443(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .x_V(ret_V_reg_2096),
    .ap_return(grp_popcount_fu_443_ap_return)
);

knn_cluster4_mux_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
knn_cluster4_mux_cud_U21(
    .din0(min_distance_list_2_fu_1065_p1),
    .din1(min_distance_list_2_fu_1065_p2),
    .din2(min_distance_list_2_fu_1065_p3),
    .din3(min_distance_list_2_fu_1065_p4),
    .din4(min_distance_list_2_fu_1065_p5),
    .din5(min_distance_list_2_fu_1065_p6),
    .din6(min_distance_list_2_fu_1065_p7),
    .dout(min_distance_list_2_fu_1065_p8)
);

knn_cluster4_mux_ibs #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
knn_cluster4_mux_ibs_U22(
    .din0(label_list_1_1_reg_381),
    .din1(label_list_2_1_reg_371),
    .din2(label_list_2_14_reg_361),
    .din3(i1_0_i_reg_432),
    .dout(tmp_5_fu_1438_p5)
);

knn_cluster4_mux_jbC #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
knn_cluster4_mux_jbC_U23(
    .din0(vote_list_9_10_fu_220),
    .din1(vote_list_9_11_fu_224),
    .din2(vote_list_9_12_fu_228),
    .din3(vote_list_9_13_fu_232),
    .din4(vote_list_9_14_fu_236),
    .din5(vote_list_9_15_fu_240),
    .din6(vote_list_9_16_fu_244),
    .din7(vote_list_9_17_fu_248),
    .din8(vote_list_9_18_fu_252),
    .din9(vote_list_9_19_fu_256),
    .din10(tmp_6_fu_1454_p11),
    .dout(tmp_6_fu_1454_p12)
);

knn_cluster4_mux_kbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
knn_cluster4_mux_kbM_U24(
    .din0(vote_list_9_fu_180),
    .din1(vote_list_9_1_fu_184),
    .din2(vote_list_9_2_fu_188),
    .din3(vote_list_9_2_fu_188),
    .din4(vote_list_9_2_fu_188),
    .din5(vote_list_9_2_fu_188),
    .din6(vote_list_9_2_fu_188),
    .din7(vote_list_9_2_fu_188),
    .din8(vote_list_9_2_fu_188),
    .din9(vote_list_9_2_fu_188),
    .din10(vote_list_9_2_fu_188),
    .din11(vote_list_9_2_fu_188),
    .din12(vote_list_9_2_fu_188),
    .din13(vote_list_9_2_fu_188),
    .din14(vote_list_9_2_fu_188),
    .din15(vote_list_9_2_fu_188),
    .din16(phi_ln_fu_1637_p17),
    .dout(phi_ln_fu_1637_p18)
);

knn_cluster4_mux_kbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
knn_cluster4_mux_kbM_U25(
    .din0(vote_list_9_fu_180),
    .din1(vote_list_9_1_fu_184),
    .din2(vote_list_9_2_fu_188),
    .din3(vote_list_9_3_fu_192),
    .din4(vote_list_9_3_fu_192),
    .din5(vote_list_9_3_fu_192),
    .din6(vote_list_9_3_fu_192),
    .din7(vote_list_9_3_fu_192),
    .din8(vote_list_9_3_fu_192),
    .din9(vote_list_9_3_fu_192),
    .din10(vote_list_9_3_fu_192),
    .din11(vote_list_9_3_fu_192),
    .din12(vote_list_9_3_fu_192),
    .din13(vote_list_9_3_fu_192),
    .din14(vote_list_9_3_fu_192),
    .din15(vote_list_9_3_fu_192),
    .din16(phi_ln4533_1_fu_1697_p17),
    .dout(phi_ln4533_1_fu_1697_p18)
);

knn_cluster4_mux_kbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
knn_cluster4_mux_kbM_U26(
    .din0(vote_list_9_fu_180),
    .din1(vote_list_9_1_fu_184),
    .din2(vote_list_9_2_fu_188),
    .din3(vote_list_9_3_fu_192),
    .din4(vote_list_9_4_fu_196),
    .din5(vote_list_9_4_fu_196),
    .din6(vote_list_9_4_fu_196),
    .din7(vote_list_9_4_fu_196),
    .din8(vote_list_9_4_fu_196),
    .din9(vote_list_9_4_fu_196),
    .din10(vote_list_9_4_fu_196),
    .din11(vote_list_9_4_fu_196),
    .din12(vote_list_9_4_fu_196),
    .din13(vote_list_9_4_fu_196),
    .din14(vote_list_9_4_fu_196),
    .din15(vote_list_9_4_fu_196),
    .din16(phi_ln4533_2_fu_1755_p17),
    .dout(phi_ln4533_2_fu_1755_p18)
);

knn_cluster4_mux_kbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
knn_cluster4_mux_kbM_U27(
    .din0(vote_list_9_fu_180),
    .din1(vote_list_9_1_fu_184),
    .din2(vote_list_9_2_fu_188),
    .din3(vote_list_9_3_fu_192),
    .din4(vote_list_9_4_fu_196),
    .din5(vote_list_9_5_fu_200),
    .din6(vote_list_9_5_fu_200),
    .din7(vote_list_9_5_fu_200),
    .din8(vote_list_9_5_fu_200),
    .din9(vote_list_9_5_fu_200),
    .din10(vote_list_9_5_fu_200),
    .din11(vote_list_9_5_fu_200),
    .din12(vote_list_9_5_fu_200),
    .din13(vote_list_9_5_fu_200),
    .din14(vote_list_9_5_fu_200),
    .din15(vote_list_9_5_fu_200),
    .din16(phi_ln4533_3_fu_1795_p17),
    .dout(phi_ln4533_3_fu_1795_p18)
);

knn_cluster4_mux_kbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
knn_cluster4_mux_kbM_U28(
    .din0(vote_list_9_fu_180),
    .din1(vote_list_9_1_fu_184),
    .din2(vote_list_9_2_fu_188),
    .din3(vote_list_9_3_fu_192),
    .din4(vote_list_9_4_fu_196),
    .din5(vote_list_9_5_fu_200),
    .din6(vote_list_9_6_fu_204),
    .din7(vote_list_9_6_fu_204),
    .din8(vote_list_9_6_fu_204),
    .din9(vote_list_9_6_fu_204),
    .din10(vote_list_9_6_fu_204),
    .din11(vote_list_9_6_fu_204),
    .din12(vote_list_9_6_fu_204),
    .din13(vote_list_9_6_fu_204),
    .din14(vote_list_9_6_fu_204),
    .din15(vote_list_9_6_fu_204),
    .din16(phi_ln4533_4_fu_1850_p17),
    .dout(phi_ln4533_4_fu_1850_p18)
);

knn_cluster4_mux_kbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
knn_cluster4_mux_kbM_U29(
    .din0(vote_list_9_fu_180),
    .din1(vote_list_9_1_fu_184),
    .din2(vote_list_9_2_fu_188),
    .din3(vote_list_9_3_fu_192),
    .din4(vote_list_9_4_fu_196),
    .din5(vote_list_9_5_fu_200),
    .din6(vote_list_9_6_fu_204),
    .din7(vote_list_9_7_fu_208),
    .din8(vote_list_9_7_fu_208),
    .din9(vote_list_9_7_fu_208),
    .din10(vote_list_9_7_fu_208),
    .din11(vote_list_9_7_fu_208),
    .din12(vote_list_9_7_fu_208),
    .din13(vote_list_9_7_fu_208),
    .din14(vote_list_9_7_fu_208),
    .din15(vote_list_9_7_fu_208),
    .din16(zext_ln4533_7_fu_1897_p1),
    .dout(phi_ln4533_5_fu_1901_p18)
);

knn_cluster4_mux_kbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
knn_cluster4_mux_kbM_U30(
    .din0(vote_list_9_fu_180),
    .din1(vote_list_9_1_fu_184),
    .din2(vote_list_9_2_fu_188),
    .din3(vote_list_9_3_fu_192),
    .din4(vote_list_9_4_fu_196),
    .din5(vote_list_9_5_fu_200),
    .din6(vote_list_9_6_fu_204),
    .din7(vote_list_9_7_fu_208),
    .din8(vote_list_9_8_fu_212),
    .din9(vote_list_9_8_fu_212),
    .din10(vote_list_9_8_fu_212),
    .din11(vote_list_9_8_fu_212),
    .din12(vote_list_9_8_fu_212),
    .din13(vote_list_9_8_fu_212),
    .din14(vote_list_9_8_fu_212),
    .din15(vote_list_9_8_fu_212),
    .din16(phi_ln4533_6_fu_1937_p17),
    .dout(phi_ln4533_6_fu_1937_p18)
);

knn_cluster4_mul_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 32 ))
knn_cluster4_mul_dEe_U31(
    .din0(mul_ln7535_1_fu_1995_p0),
    .din1(mul_ln7535_1_fu_1995_p1),
    .dout(mul_ln7535_1_fu_1995_p2)
);

regslice_forward #(
    .DataWidth( 32 ))
regslice_forward_Output_1_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(Output_1_V_V_int),
    .vld_in(Output_1_V_V_ap_vld_int),
    .ack_in(Output_1_V_V_ap_ack_int),
    .data_out(Output_1_V_V),
    .vld_out(regslice_forward_Output_1_V_V_U_vld_out),
    .ack_out(Output_1_V_V_ap_ack),
    .apdone_blk(regslice_forward_Output_1_V_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((1'b0 == Output_1_V_V_ap_ack_int) | (regslice_forward_Output_1_V_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state51))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (index_load_load_fu_502_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage7_subdone) & (1'b1 == ap_CS_fsm_pp0_stage7)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (index_load_load_fu_502_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state27) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state26))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state27)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state27);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter10 <= ap_enable_reg_pp1_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter11 <= ap_enable_reg_pp1_iter10;
        end else if (((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state26))) begin
            ap_enable_reg_pp1_iter11 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter8 <= ap_enable_reg_pp1_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter9 <= ap_enable_reg_pp1_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state40) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state39)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state40)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state40);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if ((1'b1 == ap_CS_fsm_state39)) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        i1_0_i_reg_432 <= 2'd0;
    end else if (((icmp_ln4520_fu_1396_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state44))) begin
        i1_0_i_reg_432 <= i_2_fu_1402_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln7529_fu_635_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i3_0_reg_328 <= i_1_fu_729_p2;
    end else if (((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state26))) begin
        i3_0_reg_328 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        i_0_i_reg_350 <= 2'd0;
    end else if (((icmp_ln4454_fu_961_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        i_0_i_reg_350 <= select_ln4454_fu_1023_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (index_load_load_fu_502_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_294 <= 9'd0;
    end else if (((icmp_ln7472_reg_2006 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_0_reg_294 <= i_reg_2010;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        indvar_flatten11_reg_339 <= 3'd0;
    end else if (((icmp_ln4454_fu_961_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        indvar_flatten11_reg_339 <= add_ln4454_fu_967_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln7529_fu_635_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        indvar_flatten_reg_306 <= add_ln7529_fu_641_p2;
    end else if (((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state26))) begin
        indvar_flatten_reg_306 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        j_0_i_reg_421 <= 2'd0;
    end else if (((icmp_ln4454_fu_961_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        j_0_i_reg_421 <= j_fu_1083_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln7529_reg_2045 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        j_0_reg_317 <= select_ln7535_1_reg_2059;
    end else if (((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state26))) begin
        j_0_reg_317 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(3'd4 == add_ln4150_fu_874_p2) & ~(3'd3 == add_ln4150_fu_874_p2) & ~(3'd2 == add_ln4150_fu_874_p2) & ~(3'd1 == add_ln4150_fu_874_p2) & ~(3'd0 == add_ln4150_fu_874_p2) & (icmp_ln4149_fu_868_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter11 == 1'b1))) begin
                knn_set[8 : 0] <= zext_ln4150_fu_929_p1[8 : 0];
    end else if (((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state11))) begin
                knn_set[0] <= 1'b0;
        knn_set[1] <= 1'b0;
        knn_set[2] <= 1'b0;
        knn_set[3] <= 1'b0;
        knn_set[4] <= 1'b0;
        knn_set[5] <= 1'b0;
        knn_set[6] <= 1'b0;
        knn_set[7] <= 1'b0;
        knn_set[8] <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if (((3'd0 == add_ln4150_fu_874_p2) & (icmp_ln4149_fu_868_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter11 == 1'b1))) begin
                knn_set_0[8 : 0] <= zext_ln4150_1_fu_919_p1[8 : 0];
    end else if (((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state11))) begin
                knn_set_0[0] <= 1'b0;
        knn_set_0[1] <= 1'b0;
        knn_set_0[2] <= 1'b0;
        knn_set_0[3] <= 1'b0;
        knn_set_0[4] <= 1'b0;
        knn_set_0[5] <= 1'b0;
        knn_set_0[6] <= 1'b0;
        knn_set_0[7] <= 1'b0;
        knn_set_0[8] <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if (((3'd1 == add_ln4150_fu_874_p2) & (icmp_ln4149_fu_868_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter11 == 1'b1))) begin
                knn_set_1[8 : 0] <= zext_ln4150_2_fu_909_p1[8 : 0];
    end else if (((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state11))) begin
                knn_set_1[0] <= 1'b0;
        knn_set_1[1] <= 1'b0;
        knn_set_1[2] <= 1'b0;
        knn_set_1[3] <= 1'b0;
        knn_set_1[4] <= 1'b0;
        knn_set_1[5] <= 1'b0;
        knn_set_1[6] <= 1'b0;
        knn_set_1[7] <= 1'b0;
        knn_set_1[8] <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if (((3'd2 == add_ln4150_fu_874_p2) & (icmp_ln4149_fu_868_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter11 == 1'b1))) begin
                knn_set_2[8 : 0] <= zext_ln4150_3_fu_899_p1[8 : 0];
    end else if (((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state11))) begin
                knn_set_2[0] <= 1'b0;
        knn_set_2[1] <= 1'b0;
        knn_set_2[2] <= 1'b0;
        knn_set_2[3] <= 1'b0;
        knn_set_2[4] <= 1'b0;
        knn_set_2[5] <= 1'b0;
        knn_set_2[6] <= 1'b0;
        knn_set_2[7] <= 1'b0;
        knn_set_2[8] <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if (((3'd3 == add_ln4150_fu_874_p2) & (icmp_ln4149_fu_868_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter11 == 1'b1))) begin
                knn_set_3[8 : 0] <= zext_ln4150_4_fu_889_p1[8 : 0];
    end else if (((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state11))) begin
                knn_set_3[0] <= 1'b0;
        knn_set_3[1] <= 1'b0;
        knn_set_3[2] <= 1'b0;
        knn_set_3[3] <= 1'b0;
        knn_set_3[4] <= 1'b0;
        knn_set_3[5] <= 1'b0;
        knn_set_3[6] <= 1'b0;
        knn_set_3[7] <= 1'b0;
        knn_set_3[8] <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if (((3'd4 == add_ln4150_fu_874_p2) & (icmp_ln4149_fu_868_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter11 == 1'b1))) begin
                knn_set_4[8 : 0] <= zext_ln4150_5_fu_879_p1[8 : 0];
    end else if (((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state11))) begin
                knn_set_4[0] <= 1'b0;
        knn_set_4[1] <= 1'b0;
        knn_set_4[2] <= 1'b0;
        knn_set_4[3] <= 1'b0;
        knn_set_4[4] <= 1'b0;
        knn_set_4[5] <= 1'b0;
        knn_set_4[6] <= 1'b0;
        knn_set_4[7] <= 1'b0;
        knn_set_4[8] <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        label_list_1_1_reg_381 <= reg_472;
    end else if (((icmp_ln4454_reg_2127_pp2_iter1_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        label_list_1_1_reg_381 <= select_ln4474_4_fu_1289_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        label_list_2_14_reg_361 <= tmp_V_25_reg_2030;
    end else if (((icmp_ln4454_reg_2127_pp2_iter1_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        label_list_2_14_reg_361 <= select_ln4479_fu_1222_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        label_list_2_1_reg_371 <= tmp_V_26_reg_2035;
    end else if (((icmp_ln4454_reg_2127_pp2_iter1_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        label_list_2_1_reg_371 <= select_ln4479_2_fu_1267_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        min_distance_list_1_1_reg_411 <= tmp_V_24_reg_2025;
    end else if (((icmp_ln4454_reg_2127_pp2_iter1_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        min_distance_list_1_1_reg_411 <= min_distance_list_1_3_reg_2177;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        min_distance_list_2_1_11_reg_401 <= tmp_V_23_reg_2020;
    end else if (((icmp_ln4454_reg_2127_pp2_iter1_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        min_distance_list_2_1_11_reg_401 <= min_distance_list_0_4_fu_1282_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        min_distance_list_2_1_reg_391 <= reg_497;
    end else if (((icmp_ln4454_reg_2127_pp2_iter1_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        min_distance_list_2_1_reg_391 <= min_distance_list_0_2_fu_1237_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln4523_fu_1450_p1 == 4'd0) & (icmp_ln4520_fu_1396_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state44))) begin
        vote_list_9_10_fu_220 <= vote_list_0_fu_1480_p2;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        vote_list_9_10_fu_220 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln4523_fu_1450_p1 == 4'd1) & (icmp_ln4520_fu_1396_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state44))) begin
        vote_list_9_11_fu_224 <= vote_list_0_fu_1480_p2;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        vote_list_9_11_fu_224 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln4523_fu_1450_p1 == 4'd2) & (icmp_ln4520_fu_1396_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state44))) begin
        vote_list_9_12_fu_228 <= vote_list_0_fu_1480_p2;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        vote_list_9_12_fu_228 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln4523_fu_1450_p1 == 4'd3) & (icmp_ln4520_fu_1396_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state44))) begin
        vote_list_9_13_fu_232 <= vote_list_0_fu_1480_p2;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        vote_list_9_13_fu_232 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln4523_fu_1450_p1 == 4'd4) & (icmp_ln4520_fu_1396_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state44))) begin
        vote_list_9_14_fu_236 <= vote_list_0_fu_1480_p2;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        vote_list_9_14_fu_236 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln4523_fu_1450_p1 == 4'd5) & (icmp_ln4520_fu_1396_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state44))) begin
        vote_list_9_15_fu_240 <= vote_list_0_fu_1480_p2;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        vote_list_9_15_fu_240 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln4523_fu_1450_p1 == 4'd6) & (icmp_ln4520_fu_1396_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state44))) begin
        vote_list_9_16_fu_244 <= vote_list_0_fu_1480_p2;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        vote_list_9_16_fu_244 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln4523_fu_1450_p1 == 4'd7) & (icmp_ln4520_fu_1396_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state44))) begin
        vote_list_9_17_fu_248 <= vote_list_0_fu_1480_p2;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        vote_list_9_17_fu_248 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln4523_fu_1450_p1 == 4'd8) & (icmp_ln4520_fu_1396_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state44))) begin
        vote_list_9_18_fu_252 <= vote_list_0_fu_1480_p2;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        vote_list_9_18_fu_252 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(trunc_ln4523_fu_1450_p1 == 4'd8) & ~(trunc_ln4523_fu_1450_p1 == 4'd7) & ~(trunc_ln4523_fu_1450_p1 == 4'd6) & ~(trunc_ln4523_fu_1450_p1 == 4'd5) & ~(trunc_ln4523_fu_1450_p1 == 4'd4) & ~(trunc_ln4523_fu_1450_p1 == 4'd3) & ~(trunc_ln4523_fu_1450_p1 == 4'd2) & ~(trunc_ln4523_fu_1450_p1 == 4'd1) & ~(trunc_ln4523_fu_1450_p1 == 4'd0) & (icmp_ln4520_fu_1396_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state44))) begin
        vote_list_9_19_fu_256 <= vote_list_0_fu_1480_p2;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        vote_list_9_19_fu_256 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln4523_fu_1450_p1 == 4'd1) & (icmp_ln4520_fu_1396_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state44))) begin
        vote_list_9_1_fu_184 <= vote_list_0_fu_1480_p2;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        vote_list_9_1_fu_184 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln4523_fu_1450_p1 == 4'd2) & (icmp_ln4520_fu_1396_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state44))) begin
        vote_list_9_2_fu_188 <= vote_list_0_fu_1480_p2;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        vote_list_9_2_fu_188 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln4523_fu_1450_p1 == 4'd3) & (icmp_ln4520_fu_1396_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state44))) begin
        vote_list_9_3_fu_192 <= vote_list_0_fu_1480_p2;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        vote_list_9_3_fu_192 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln4523_fu_1450_p1 == 4'd4) & (icmp_ln4520_fu_1396_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state44))) begin
        vote_list_9_4_fu_196 <= vote_list_0_fu_1480_p2;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        vote_list_9_4_fu_196 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln4523_fu_1450_p1 == 4'd5) & (icmp_ln4520_fu_1396_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state44))) begin
        vote_list_9_5_fu_200 <= vote_list_0_fu_1480_p2;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        vote_list_9_5_fu_200 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln4523_fu_1450_p1 == 4'd6) & (icmp_ln4520_fu_1396_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state44))) begin
        vote_list_9_6_fu_204 <= vote_list_0_fu_1480_p2;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        vote_list_9_6_fu_204 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln4523_fu_1450_p1 == 4'd7) & (icmp_ln4520_fu_1396_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state44))) begin
        vote_list_9_7_fu_208 <= vote_list_0_fu_1480_p2;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        vote_list_9_7_fu_208 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln4523_fu_1450_p1 == 4'd8) & (icmp_ln4520_fu_1396_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state44))) begin
        vote_list_9_8_fu_212 <= vote_list_0_fu_1480_p2;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        vote_list_9_8_fu_212 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(trunc_ln4523_fu_1450_p1 == 4'd8) & ~(trunc_ln4523_fu_1450_p1 == 4'd7) & ~(trunc_ln4523_fu_1450_p1 == 4'd6) & ~(trunc_ln4523_fu_1450_p1 == 4'd5) & ~(trunc_ln4523_fu_1450_p1 == 4'd4) & ~(trunc_ln4523_fu_1450_p1 == 4'd3) & ~(trunc_ln4523_fu_1450_p1 == 4'd2) & ~(trunc_ln4523_fu_1450_p1 == 4'd1) & ~(trunc_ln4523_fu_1450_p1 == 4'd0) & (icmp_ln4520_fu_1396_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state44))) begin
        vote_list_9_9_fu_216 <= vote_list_0_fu_1480_p2;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        vote_list_9_9_fu_216 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln4523_fu_1450_p1 == 4'd0) & (icmp_ln4520_fu_1396_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state44))) begin
        vote_list_9_fu_180 <= vote_list_0_fu_1480_p2;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        vote_list_9_fu_180 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_2010 <= i_fu_512_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln7529_reg_2045_pp1_iter9_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln4141_2_reg_2111 <= icmp_ln4141_2_fu_828_p2;
        select_ln4141_2_reg_2101 <= select_ln4141_2_fu_805_p3;
        select_ln4141_3_reg_2106 <= select_ln4141_3_fu_821_p3;
        select_ln4141_6_reg_2116 <= select_ln4141_6_fu_848_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln4454_reg_2127 <= icmp_ln4454_fu_961_p2;
        icmp_ln4454_reg_2127_pp2_iter1_reg <= icmp_ln4454_reg_2127;
        min_distance_list_2_reg_2141_pp2_iter1_reg <= min_distance_list_2_reg_2141;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln4454_reg_2127 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln4474_1_reg_2169 <= icmp_ln4474_1_fu_1186_p2;
        icmp_ln4474_reg_2162 <= icmp_ln4474_fu_1180_p2;
        select_ln4463_2_reg_2156[1 : 0] <= select_ln4463_2_fu_1162_p3[1 : 0];
select_ln4463_2_reg_2156[3] <= select_ln4463_2_fu_1162_p3[3];
select_ln4463_2_reg_2156[5] <= select_ln4463_2_fu_1162_p3[5];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        icmp_ln4533_3_reg_2432 <= icmp_ln4533_3_fu_1732_p2;
        select_ln4533_2_reg_2427 <= select_ln4533_2_fu_1686_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        icmp_ln4533_6_reg_2479 <= icmp_ln4533_6_fu_1882_p2;
        select_ln4533_5_reg_2474 <= select_ln4533_5_fu_1839_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln7472_reg_2006 <= icmp_ln7472_fu_506_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln7529_reg_2045 <= icmp_ln7529_fu_635_p2;
        icmp_ln7529_reg_2045_pp1_iter1_reg <= icmp_ln7529_reg_2045;
        select_ln7535_2_reg_2069_pp1_iter1_reg <= select_ln7535_2_reg_2069;
        select_ln7535_3_reg_2074_pp1_iter1_reg <= select_ln7535_3_reg_2074;
        select_ln7535_reg_2054_pp1_iter1_reg <= select_ln7535_reg_2054;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        icmp_ln7529_reg_2045_pp1_iter10_reg <= icmp_ln7529_reg_2045_pp1_iter9_reg;
        icmp_ln7529_reg_2045_pp1_iter2_reg <= icmp_ln7529_reg_2045_pp1_iter1_reg;
        icmp_ln7529_reg_2045_pp1_iter3_reg <= icmp_ln7529_reg_2045_pp1_iter2_reg;
        icmp_ln7529_reg_2045_pp1_iter4_reg <= icmp_ln7529_reg_2045_pp1_iter3_reg;
        icmp_ln7529_reg_2045_pp1_iter5_reg <= icmp_ln7529_reg_2045_pp1_iter4_reg;
        icmp_ln7529_reg_2045_pp1_iter6_reg <= icmp_ln7529_reg_2045_pp1_iter5_reg;
        icmp_ln7529_reg_2045_pp1_iter7_reg <= icmp_ln7529_reg_2045_pp1_iter6_reg;
        icmp_ln7529_reg_2045_pp1_iter8_reg <= icmp_ln7529_reg_2045_pp1_iter7_reg;
        icmp_ln7529_reg_2045_pp1_iter9_reg <= icmp_ln7529_reg_2045_pp1_iter8_reg;
        select_ln7535_2_reg_2069_pp1_iter10_reg <= select_ln7535_2_reg_2069_pp1_iter9_reg;
        select_ln7535_2_reg_2069_pp1_iter2_reg <= select_ln7535_2_reg_2069_pp1_iter1_reg;
        select_ln7535_2_reg_2069_pp1_iter3_reg <= select_ln7535_2_reg_2069_pp1_iter2_reg;
        select_ln7535_2_reg_2069_pp1_iter4_reg <= select_ln7535_2_reg_2069_pp1_iter3_reg;
        select_ln7535_2_reg_2069_pp1_iter5_reg <= select_ln7535_2_reg_2069_pp1_iter4_reg;
        select_ln7535_2_reg_2069_pp1_iter6_reg <= select_ln7535_2_reg_2069_pp1_iter5_reg;
        select_ln7535_2_reg_2069_pp1_iter7_reg <= select_ln7535_2_reg_2069_pp1_iter6_reg;
        select_ln7535_2_reg_2069_pp1_iter8_reg <= select_ln7535_2_reg_2069_pp1_iter7_reg;
        select_ln7535_2_reg_2069_pp1_iter9_reg <= select_ln7535_2_reg_2069_pp1_iter8_reg;
        select_ln7535_3_reg_2074_pp1_iter2_reg <= select_ln7535_3_reg_2074_pp1_iter1_reg;
        select_ln7535_3_reg_2074_pp1_iter3_reg <= select_ln7535_3_reg_2074_pp1_iter2_reg;
        select_ln7535_3_reg_2074_pp1_iter4_reg <= select_ln7535_3_reg_2074_pp1_iter3_reg;
        select_ln7535_3_reg_2074_pp1_iter5_reg <= select_ln7535_3_reg_2074_pp1_iter4_reg;
        select_ln7535_3_reg_2074_pp1_iter6_reg <= select_ln7535_3_reg_2074_pp1_iter5_reg;
        select_ln7535_3_reg_2074_pp1_iter7_reg <= select_ln7535_3_reg_2074_pp1_iter6_reg;
        select_ln7535_3_reg_2074_pp1_iter8_reg <= select_ln7535_3_reg_2074_pp1_iter7_reg;
        select_ln7535_3_reg_2074_pp1_iter9_reg <= select_ln7535_3_reg_2074_pp1_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((index_load_reg_2002 == 1'd0) & (1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state11))) begin
        index <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        index_load_reg_2002 <= index;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state26))) begin
        lhs_V_reg_2040 <= lhs_V_fu_590_p8;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln4454_reg_2127 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        min_distance_list_1_3_reg_2177 <= min_distance_list_1_3_fu_1192_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln4454_fu_961_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        min_distance_list_2_reg_2141 <= min_distance_list_2_fu_1065_p8;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln7529_fu_635_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        mul_ln7535_reg_2064 <= mul_ln7535_fu_683_p2;
        select_ln7535_2_reg_2069 <= select_ln7535_2_fu_707_p3;
        select_ln7535_3_reg_2074 <= select_ln7535_3_fu_721_p3;
        select_ln7535_reg_2054 <= select_ln7535_fu_653_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        phi_ln4533_3_reg_2449 <= phi_ln4533_3_fu_1795_p18;
        select_ln4533_4_reg_2444 <= select_ln4533_4_fu_1783_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        phi_ln4533_6_reg_2489 <= phi_ln4533_6_fu_1937_p18;
        select_ln4533_7_reg_2484 <= select_ln4533_7_fu_1929_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        phi_ln_reg_2393 <= phi_ln_fu_1637_p18;
        select_ln4533_1_reg_2388 <= select_ln4533_1_fu_1625_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln7472_reg_2006 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state26)) | ((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state13)))) begin
        reg_472 <= Input_1_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln7472_reg_2006 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state14)))) begin
        reg_477 <= Input_1_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln7472_reg_2006 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state15)))) begin
        reg_481 <= Input_1_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln7472_reg_2006 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state16)))) begin
        reg_485 <= Input_1_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln7472_reg_2006 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state17)))) begin
        reg_489 <= Input_1_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln7472_reg_2006 == 1'd0) & (1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state18)))) begin
        reg_493 <= Input_1_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln7472_reg_2006 == 1'd0) & (1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state20)))) begin
        reg_497 <= Input_1_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln7529_reg_2045_pp1_iter2_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        ret_V_reg_2096 <= ret_V_fu_764_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln7529_fu_635_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        select_ln7535_1_reg_2059 <= select_ln7535_1_fu_671_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state21))) begin
        tmp_V_23_reg_2020 <= Input_1_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state22))) begin
        tmp_V_24_reg_2025 <= Input_1_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state24))) begin
        tmp_V_25_reg_2030 <= Input_1_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state25))) begin
        tmp_V_26_reg_2035 <= Input_1_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state12))) begin
        trunc_ln414_reg_2015 <= trunc_ln414_fu_586_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln7529_reg_2045 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        trunc_ln7535_mid2_reg_2086 <= {{mul_ln7535_1_fu_1995_p2[30:22]}};
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | ((icmp_ln7472_reg_2006 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7)) | ((icmp_ln7472_reg_2006 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6)) | ((icmp_ln7472_reg_2006 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5)) | ((icmp_ln7472_reg_2006 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4)) | ((icmp_ln7472_reg_2006 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3)) | ((icmp_ln7472_reg_2006 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1) & (icmp_ln7472_reg_2006 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((icmp_ln7472_reg_2006 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)))) begin
        Input_1_V_V_blk_n = Input_1_V_V_empty_n;
    end else begin
        Input_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((icmp_ln7472_reg_2006 == 1'd0) & (1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((icmp_ln7472_reg_2006 == 1'd0) & (1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((icmp_ln7472_reg_2006 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((icmp_ln7472_reg_2006 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((icmp_ln7472_reg_2006 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((icmp_ln7472_reg_2006 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((icmp_ln7472_reg_2006 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state26)) | ((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state25)) | ((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state24)) | ((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state23)) | ((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state22)) | ((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state21)) | ((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state20)) | ((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state19)) | ((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state18)) | ((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state17)) | ((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state16)) | ((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state15)) | ((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state14)) | ((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state13)) | ((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state12)) | ((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state11)) | ((icmp_ln7472_reg_2006 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        Input_1_V_V_read = 1'b1;
    end else begin
        Input_1_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state50) & (1'b1 == Output_1_V_V_ap_ack_int))) begin
        Output_1_V_V_ap_vld_int = 1'b1;
    end else begin
        Output_1_V_V_ap_vld_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state50))) begin
        Output_1_V_V_blk_n = Output_1_V_V_ap_ack_int;
    end else begin
        Output_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((icmp_ln7472_fu_506_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln7529_fu_635_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state27 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state27 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln4454_fu_961_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state40 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state40 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == Output_1_V_V_ap_ack_int) | (regslice_forward_Output_1_V_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state51))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter11 == 1'b0) & (ap_enable_reg_pp1_iter10 == 1'b0) & (ap_enable_reg_pp1_iter9 == 1'b0) & (ap_enable_reg_pp1_iter8 == 1'b0) & (ap_enable_reg_pp1_iter7 == 1'b0) & (ap_enable_reg_pp1_iter6 == 1'b0) & (ap_enable_reg_pp1_iter5 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln7472_reg_2006 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_i_0_phi_fu_298_p4 = i_reg_2010;
    end else begin
        ap_phi_mux_i_0_phi_fu_298_p4 = i_0_reg_294;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (icmp_ln7529_reg_2045 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_j_0_phi_fu_321_p4 = select_ln7535_1_reg_2059;
    end else begin
        ap_phi_mux_j_0_phi_fu_321_p4 = j_0_reg_317;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (icmp_ln4454_reg_2127_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        ap_phi_mux_min_distance_list_1_1_phi_fu_414_p4 = min_distance_list_1_3_reg_2177;
    end else begin
        ap_phi_mux_min_distance_list_1_1_phi_fu_414_p4 = min_distance_list_1_1_reg_411;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (icmp_ln4454_reg_2127_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        ap_phi_mux_min_distance_list_2_1_11_phi_fu_404_p4 = min_distance_list_0_4_fu_1282_p3;
    end else begin
        ap_phi_mux_min_distance_list_2_1_11_phi_fu_404_p4 = min_distance_list_2_1_11_reg_401;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (icmp_ln4454_reg_2127_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        ap_phi_mux_min_distance_list_2_1_phi_fu_394_p4 = min_distance_list_0_2_fu_1237_p3;
    end else begin
        ap_phi_mux_min_distance_list_2_1_phi_fu_394_p4 = min_distance_list_2_1_reg_391;
    end
end

always @ (*) begin
    if ((~((1'b0 == Output_1_V_V_ap_ack_int) | (regslice_forward_Output_1_V_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state51))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((3'd0 == add_ln4150_fu_874_p2) & (1'b0 == ap_block_pp1_stage0) & (icmp_ln4149_fu_868_p2 == 1'd1) & (ap_enable_reg_pp1_iter11 == 1'b1))) begin
        ap_sig_allocacmp_knn_set_0_load = zext_ln4150_1_fu_919_p1;
    end else begin
        ap_sig_allocacmp_knn_set_0_load = knn_set_0;
    end
end

always @ (*) begin
    if (((3'd1 == add_ln4150_fu_874_p2) & (1'b0 == ap_block_pp1_stage0) & (icmp_ln4149_fu_868_p2 == 1'd1) & (ap_enable_reg_pp1_iter11 == 1'b1))) begin
        ap_sig_allocacmp_knn_set_1_load = zext_ln4150_2_fu_909_p1;
    end else begin
        ap_sig_allocacmp_knn_set_1_load = knn_set_1;
    end
end

always @ (*) begin
    if (((3'd2 == add_ln4150_fu_874_p2) & (1'b0 == ap_block_pp1_stage0) & (icmp_ln4149_fu_868_p2 == 1'd1) & (ap_enable_reg_pp1_iter11 == 1'b1))) begin
        ap_sig_allocacmp_knn_set_2_load = zext_ln4150_3_fu_899_p1;
    end else begin
        ap_sig_allocacmp_knn_set_2_load = knn_set_2;
    end
end

always @ (*) begin
    if (((3'd3 == add_ln4150_fu_874_p2) & (1'b0 == ap_block_pp1_stage0) & (icmp_ln4149_fu_868_p2 == 1'd1) & (ap_enable_reg_pp1_iter11 == 1'b1))) begin
        ap_sig_allocacmp_knn_set_3_load = zext_ln4150_4_fu_889_p1;
    end else begin
        ap_sig_allocacmp_knn_set_3_load = knn_set_3;
    end
end

always @ (*) begin
    if (((3'd4 == add_ln4150_fu_874_p2) & (1'b0 == ap_block_pp1_stage0) & (icmp_ln4149_fu_868_p2 == 1'd1) & (ap_enable_reg_pp1_iter11 == 1'b1))) begin
        ap_sig_allocacmp_knn_set_4_load = zext_ln4150_5_fu_879_p1;
    end else begin
        ap_sig_allocacmp_knn_set_4_load = knn_set_4;
    end
end

always @ (*) begin
    if ((~(3'd4 == add_ln4150_fu_874_p2) & ~(3'd3 == add_ln4150_fu_874_p2) & ~(3'd2 == add_ln4150_fu_874_p2) & ~(3'd1 == add_ln4150_fu_874_p2) & ~(3'd0 == add_ln4150_fu_874_p2) & (1'b0 == ap_block_pp1_stage0) & (icmp_ln4149_fu_868_p2 == 1'd1) & (ap_enable_reg_pp1_iter11 == 1'b1))) begin
        ap_sig_allocacmp_knn_set_load = zext_ln4150_fu_929_p1;
    end else begin
        ap_sig_allocacmp_knn_set_load = knn_set;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (icmp_ln4454_fu_961_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        grp_load_fu_448_p1 = knn_set_0;
    end else if (((1'b0 == ap_block_pp1_stage0) & (icmp_ln7529_reg_2045_pp1_iter9_reg == 1'd0) & (select_ln7535_3_reg_2074_pp1_iter9_reg == 1'd1) & (ap_enable_reg_pp1_iter10 == 1'b1))) begin
        grp_load_fu_448_p1 = ap_sig_allocacmp_knn_set_0_load;
    end else begin
        grp_load_fu_448_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (icmp_ln4454_fu_961_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        grp_load_fu_452_p1 = knn_set_3;
    end else if (((1'b0 == ap_block_pp1_stage0) & (select_ln7535_3_reg_2074_pp1_iter9_reg == 1'd0) & (icmp_ln7529_reg_2045_pp1_iter9_reg == 1'd0) & (ap_enable_reg_pp1_iter10 == 1'b1))) begin
        grp_load_fu_452_p1 = ap_sig_allocacmp_knn_set_3_load;
    end else begin
        grp_load_fu_452_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (icmp_ln4454_fu_961_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        grp_load_fu_456_p1 = knn_set_1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (icmp_ln7529_reg_2045_pp1_iter9_reg == 1'd0) & (select_ln7535_3_reg_2074_pp1_iter9_reg == 1'd1) & (ap_enable_reg_pp1_iter10 == 1'b1))) begin
        grp_load_fu_456_p1 = ap_sig_allocacmp_knn_set_1_load;
    end else begin
        grp_load_fu_456_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (icmp_ln4454_fu_961_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        grp_load_fu_460_p1 = knn_set_4;
    end else if (((1'b0 == ap_block_pp1_stage0) & (select_ln7535_3_reg_2074_pp1_iter9_reg == 1'd0) & (icmp_ln7529_reg_2045_pp1_iter9_reg == 1'd0) & (ap_enable_reg_pp1_iter10 == 1'b1))) begin
        grp_load_fu_460_p1 = ap_sig_allocacmp_knn_set_4_load;
    end else begin
        grp_load_fu_460_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (icmp_ln4454_fu_961_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        grp_load_fu_464_p1 = knn_set_2;
    end else if (((1'b0 == ap_block_pp1_stage0) & (icmp_ln7529_reg_2045_pp1_iter9_reg == 1'd0) & (select_ln7535_3_reg_2074_pp1_iter9_reg == 1'd1) & (ap_enable_reg_pp1_iter10 == 1'b1))) begin
        grp_load_fu_464_p1 = ap_sig_allocacmp_knn_set_2_load;
    end else begin
        grp_load_fu_464_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (icmp_ln4454_fu_961_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        grp_load_fu_468_p1 = knn_set;
    end else if (((1'b0 == ap_block_pp1_stage0) & (select_ln7535_3_reg_2074_pp1_iter9_reg == 1'd0) & (icmp_ln7529_reg_2045_pp1_iter9_reg == 1'd0) & (ap_enable_reg_pp1_iter10 == 1'b1))) begin
        grp_load_fu_468_p1 = ap_sig_allocacmp_knn_set_load;
    end else begin
        grp_load_fu_468_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        training_set_V_4_address0 = zext_ln7534_fu_755_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        training_set_V_4_address0 = zext_ln7475_fu_518_p1;
    end else begin
        training_set_V_4_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        training_set_V_4_ce0 = 1'b1;
    end else begin
        training_set_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln7472_reg_2006 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        training_set_V_4_we0 = 1'b1;
    end else begin
        training_set_V_4_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (index_load_load_fu_502_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (index_load_load_fu_502_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln7472_fu_506_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln7472_fu_506_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            if (((1'b1 == Input_1_V_V_empty_n) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln7529_fu_635_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((ap_enable_reg_pp1_iter10 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter11 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter10 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter11 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln7529_fu_635_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (icmp_ln4454_fu_961_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (icmp_ln4454_fu_961_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            if (((icmp_ln4520_fu_1396_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state44))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            if (((1'b1 == ap_CS_fsm_state50) & (1'b1 == Output_1_V_V_ap_ack_int))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end
        end
        ap_ST_fsm_state51 : begin
            if ((~((1'b0 == Output_1_V_V_ap_ack_int) | (regslice_forward_Output_1_V_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state51))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Output_1_V_V_ap_vld = regslice_forward_Output_1_V_V_U_vld_out;

assign Output_1_V_V_int = {{24'd0}, {zext_ln4533_8_fu_1982_p1}};

assign add_ln4150_fu_874_p2 = (select_ln7535_2_reg_2069_pp1_iter10_reg + zext_ln4141_1_fu_865_p1);

assign add_ln4454_1_fu_987_p2 = (2'd1 + i_0_i_reg_350);

assign add_ln4454_fu_967_p2 = (3'd1 + indvar_flatten11_reg_339);

assign add_ln7529_1_fu_661_p2 = (2'd1 + ap_phi_mux_j_0_phi_fu_321_p4);

assign add_ln7529_fu_641_p2 = (9'd1 + indvar_flatten_reg_306);

assign add_ln7534_fu_750_p2 = (trunc_ln7535_mid2_reg_2086 + zext_ln7531_fu_747_p1);

assign and_ln4479_1_fu_1261_p2 = (xor_ln4474_1_fu_1256_p2 & icmp_ln4479_1_fu_1244_p2);

assign and_ln4479_fu_1216_p2 = (xor_ln4474_fu_1211_p2 & icmp_ln4479_fu_1199_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd36];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln7472_reg_2006 == 1'd0) & (1'b0 == Input_1_V_V_empty_n) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln7472_reg_2006 == 1'd0) & (1'b0 == Input_1_V_V_empty_n) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((icmp_ln7472_reg_2006 == 1'd0) & (1'b0 == Input_1_V_V_empty_n) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((icmp_ln7472_reg_2006 == 1'd0) & (1'b0 == Input_1_V_V_empty_n) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((icmp_ln7472_reg_2006 == 1'd0) & (1'b0 == Input_1_V_V_empty_n) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((icmp_ln7472_reg_2006 == 1'd0) & (1'b0 == Input_1_V_V_empty_n) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((icmp_ln7472_reg_2006 == 1'd0) & (1'b0 == Input_1_V_V_empty_n) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((icmp_ln7472_reg_2006 == 1'd0) & (1'b0 == Input_1_V_V_empty_n) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_11001 = ((icmp_ln7472_reg_2006 == 1'd0) & (1'b0 == Input_1_V_V_empty_n) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage4_subdone = ((icmp_ln7472_reg_2006 == 1'd0) & (1'b0 == Input_1_V_V_empty_n) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage5_11001 = ((icmp_ln7472_reg_2006 == 1'd0) & (1'b0 == Input_1_V_V_empty_n) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage5_subdone = ((icmp_ln7472_reg_2006 == 1'd0) & (1'b0 == Input_1_V_V_empty_n) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage6_11001 = ((icmp_ln7472_reg_2006 == 1'd0) & (1'b0 == Input_1_V_V_empty_n) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage6_subdone = ((icmp_ln7472_reg_2006 == 1'd0) & (1'b0 == Input_1_V_V_empty_n) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage7_11001 = ((icmp_ln7472_reg_2006 == 1'd0) & (1'b0 == Input_1_V_V_empty_n) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage7_subdone = ((icmp_ln7472_reg_2006 == 1'd0) & (1'b0 == Input_1_V_V_empty_n) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = ((icmp_ln7472_reg_2006 == 1'd0) & (1'b0 == Input_1_V_V_empty_n));
end

assign ap_block_state27_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp1_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp1_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp1_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp1_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp1_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp1_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp1_stage0_iter11 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage1_iter0 = ((icmp_ln7472_reg_2006 == 1'd0) & (1'b0 == Input_1_V_V_empty_n));
end

assign ap_block_state40_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage2_iter0 = ((icmp_ln7472_reg_2006 == 1'd0) & (1'b0 == Input_1_V_V_empty_n));
end

always @ (*) begin
    ap_block_state5_pp0_stage3_iter0 = ((icmp_ln7472_reg_2006 == 1'd0) & (1'b0 == Input_1_V_V_empty_n));
end

always @ (*) begin
    ap_block_state6_pp0_stage4_iter0 = ((icmp_ln7472_reg_2006 == 1'd0) & (1'b0 == Input_1_V_V_empty_n));
end

always @ (*) begin
    ap_block_state7_pp0_stage5_iter0 = ((icmp_ln7472_reg_2006 == 1'd0) & (1'b0 == Input_1_V_V_empty_n));
end

always @ (*) begin
    ap_block_state8_pp0_stage6_iter0 = ((icmp_ln7472_reg_2006 == 1'd0) & (1'b0 == Input_1_V_V_empty_n));
end

always @ (*) begin
    ap_block_state9_pp0_stage7_iter0 = ((icmp_ln7472_reg_2006 == 1'd0) & (1'b0 == Input_1_V_V_empty_n));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign i_1_fu_729_p2 = (select_ln7535_fu_653_p3 + 8'd1);

assign i_2_fu_1402_p2 = (i1_0_i_reg_432 + 2'd1);

assign i_fu_512_p2 = (ap_phi_mux_i_0_phi_fu_298_p4 + 9'd1);

assign icmp_ln4141_1_fu_799_p2 = ((select_ln4141_1_fu_792_p3 > select_ln4141_fu_777_p3) ? 1'b1 : 1'b0);

assign icmp_ln4141_2_fu_828_p2 = ((select_ln4141_3_fu_821_p3 > select_ln4141_2_fu_805_p3) ? 1'b1 : 1'b0);

assign icmp_ln4141_3_fu_715_p2 = ((shl_ln7535_mid1_fu_693_p3 == zext_ln7535_1_fu_667_p1) ? 1'b1 : 1'b0);

assign icmp_ln4141_fu_629_p2 = ((shl_ln_fu_615_p3 == zext_ln7535_fu_607_p1) ? 1'b1 : 1'b0);

assign icmp_ln4149_fu_868_p2 = ((zext_ln4141_fu_856_p1 < select_ln4141_5_fu_860_p3) ? 1'b1 : 1'b0);

assign icmp_ln4454_fu_961_p2 = ((indvar_flatten11_reg_339 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln4456_fu_973_p2 = ((j_0_i_reg_421 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln4463_1_fu_1102_p2 = (($signed(min_distance_list_2_reg_2141) < $signed(ap_phi_mux_min_distance_list_2_1_11_phi_fu_404_p4)) ? 1'b1 : 1'b0);

assign icmp_ln4463_2_fu_1129_p2 = (($signed(min_distance_list_2_reg_2141) < $signed(ap_phi_mux_min_distance_list_2_1_phi_fu_394_p4)) ? 1'b1 : 1'b0);

assign icmp_ln4463_3_fu_1144_p2 = ((tmp_1_fu_1134_p4 != 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln4463_fu_1089_p2 = (($signed(min_distance_list_2_reg_2141) < $signed(ap_phi_mux_min_distance_list_1_1_phi_fu_414_p4)) ? 1'b1 : 1'b0);

assign icmp_ln4474_1_fu_1186_p2 = ((select_ln4463_2_fu_1162_p3 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln4474_fu_1180_p2 = ((tmp_2_fu_1170_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln4479_1_fu_1244_p2 = ((select_ln4463_2_reg_2156 == 6'd1) ? 1'b1 : 1'b0);

assign icmp_ln4479_fu_1199_p2 = ((select_ln4463_2_reg_2156 == 6'd2) ? 1'b1 : 1'b0);

assign icmp_ln4520_fu_1396_p2 = ((i1_0_i_reg_432 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln4533_1_fu_1619_p2 = (($signed(vote_list_9_2_fu_188) < $signed(select_ln4533_fu_1611_p3)) ? 1'b1 : 1'b0);

assign icmp_ln4533_2_fu_1681_p2 = (($signed(vote_list_9_3_fu_192) < $signed(phi_ln_reg_2393)) ? 1'b1 : 1'b0);

assign icmp_ln4533_3_fu_1732_p2 = (($signed(vote_list_9_4_fu_196) < $signed(phi_ln4533_1_fu_1697_p18)) ? 1'b1 : 1'b0);

assign icmp_ln4533_4_fu_1777_p2 = (($signed(vote_list_9_5_fu_200) < $signed(phi_ln4533_2_fu_1755_p18)) ? 1'b1 : 1'b0);

assign icmp_ln4533_5_fu_1834_p2 = (($signed(vote_list_9_6_fu_204) < $signed(phi_ln4533_3_reg_2449)) ? 1'b1 : 1'b0);

assign icmp_ln4533_6_fu_1882_p2 = (($signed(vote_list_9_7_fu_208) < $signed(phi_ln4533_4_fu_1850_p18)) ? 1'b1 : 1'b0);

assign icmp_ln4533_7_fu_1923_p2 = (($signed(vote_list_9_8_fu_212) < $signed(phi_ln4533_5_fu_1901_p18)) ? 1'b1 : 1'b0);

assign icmp_ln4533_8_fu_1970_p2 = (($signed(vote_list_9_9_fu_216) < $signed(phi_ln4533_6_reg_2489)) ? 1'b1 : 1'b0);

assign icmp_ln4533_fu_1595_p2 = (($signed(vote_list_9_1_fu_184) < $signed(vote_list_9_fu_180)) ? 1'b1 : 1'b0);

assign icmp_ln7472_fu_506_p2 = ((ap_phi_mux_i_0_phi_fu_298_p4 == 9'd450) ? 1'b1 : 1'b0);

assign icmp_ln7529_fu_635_p2 = ((indvar_flatten_reg_306 == 9'd450) ? 1'b1 : 1'b0);

assign icmp_ln7531_fu_647_p2 = ((i3_0_reg_328 == 8'd225) ? 1'b1 : 1'b0);

assign index_load_load_fu_502_p1 = index;

assign j_fu_1083_p2 = (2'd1 + select_ln4463_3_fu_979_p3);

assign lhs_V_fu_590_p8 = {{{{{{{trunc_ln414_reg_2015}, {reg_472}}, {reg_477}}, {reg_481}}, {reg_485}}, {reg_489}}, {reg_493}};

assign min_distance_list_0_1_fu_1230_p3 = ((icmp_ln4474_reg_2162[0:0] === 1'b1) ? min_distance_list_2_1_11_reg_401 : min_distance_list_2_1_reg_391);

assign min_distance_list_0_2_fu_1237_p3 = ((and_ln4479_fu_1216_p2[0:0] === 1'b1) ? min_distance_list_2_reg_2141_pp2_iter1_reg : min_distance_list_0_1_fu_1230_p3);

assign min_distance_list_0_3_fu_1275_p3 = ((icmp_ln4474_1_reg_2169[0:0] === 1'b1) ? min_distance_list_1_1_reg_411 : min_distance_list_2_1_11_reg_401);

assign min_distance_list_0_4_fu_1282_p3 = ((and_ln4479_1_fu_1261_p2[0:0] === 1'b1) ? min_distance_list_2_reg_2141_pp2_iter1_reg : min_distance_list_0_3_fu_1275_p3);

assign min_distance_list_1_3_fu_1192_p3 = ((icmp_ln4474_1_fu_1186_p2[0:0] === 1'b1) ? min_distance_list_2_reg_2141 : ap_phi_mux_min_distance_list_1_1_phi_fu_414_p4);

assign min_distance_list_2_fu_1065_p1 = grp_load_fu_448_p1;

assign min_distance_list_2_fu_1065_p2 = grp_load_fu_456_p1;

assign min_distance_list_2_fu_1065_p3 = grp_load_fu_464_p1;

assign min_distance_list_2_fu_1065_p4 = grp_load_fu_452_p1;

assign min_distance_list_2_fu_1065_p5 = grp_load_fu_460_p1;

assign min_distance_list_2_fu_1065_p6 = grp_load_fu_468_p1;

assign min_distance_list_2_fu_1065_p7 = (select_ln4463_4_fu_1015_p3 + zext_ln4463_1_fu_1031_p1);

assign mul_ln7535_1_fu_1995_p0 = 32'd52429;

assign mul_ln7535_1_fu_1995_p1 = mul_ln7535_1_fu_1995_p10;

assign mul_ln7535_1_fu_1995_p10 = mul_ln7535_reg_2064;

assign mul_ln7535_fu_683_p1 = mul_ln7535_fu_683_p10;

assign mul_ln7535_fu_683_p10 = select_ln7535_1_fu_671_p3;

assign mul_ln7535_fu_683_p2 = ($signed(15'd18000) * $signed({{1'b0}, {mul_ln7535_fu_683_p1}}));

assign not_icmp_ln4463_fu_1107_p2 = (icmp_ln4463_fu_1089_p2 ^ 1'd1);

assign or_ln4141_fu_842_p2 = (icmp_ln4141_2_fu_828_p2 | icmp_ln4141_1_fu_799_p2);

assign phi_ln4533_1_fu_1697_p17 = select_ln4533_2_fu_1686_p3;

assign phi_ln4533_2_fu_1755_p17 = select_ln4533_3_fu_1744_p3;

assign phi_ln4533_3_fu_1795_p17 = select_ln4533_4_fu_1783_p3;

assign phi_ln4533_4_fu_1850_p17 = select_ln4533_5_fu_1839_p3;

assign phi_ln4533_6_fu_1937_p17 = ((icmp_ln4533_7_fu_1923_p2[0:0] === 1'b1) ? zext_ln4533_7_fu_1897_p1 : 4'd8);

assign phi_ln_fu_1637_p17 = select_ln4533_1_fu_1625_p3;

assign phitmp_i_1_cast_cast_fu_1113_p1 = not_icmp_ln4463_fu_1107_p2;

assign phitmp_i_2_cast_cast_fu_1158_p1 = phitmp_i_2_fu_1150_p3;

assign phitmp_i_2_fu_1150_p3 = ((icmp_ln4463_3_fu_1144_p2[0:0] === 1'b1) ? 2'd2 : trunc_ln4463_2_fu_1125_p1);

assign ret_V_fu_764_p2 = (rhs_V_fu_760_p1 ^ lhs_V_reg_2040);

assign rhs_V_fu_760_p1 = training_set_V_4_q0[195:0];

assign select_ln4141_1_fu_792_p3 = ((select_ln7535_3_reg_2074_pp1_iter9_reg[0:0] === 1'b1) ? trunc_ln4141_2_fu_784_p1 : trunc_ln4141_3_fu_788_p1);

assign select_ln4141_2_fu_805_p3 = ((icmp_ln4141_1_fu_799_p2[0:0] === 1'b1) ? select_ln4141_1_fu_792_p3 : select_ln4141_fu_777_p3);

assign select_ln4141_3_fu_821_p3 = ((select_ln7535_3_reg_2074_pp1_iter9_reg[0:0] === 1'b1) ? trunc_ln4141_4_fu_813_p1 : trunc_ln4141_5_fu_817_p1);

assign select_ln4141_4_fu_834_p3 = ((icmp_ln4141_2_fu_828_p2[0:0] === 1'b1) ? 2'd2 : 2'd1);

assign select_ln4141_5_fu_860_p3 = ((icmp_ln4141_2_reg_2111[0:0] === 1'b1) ? select_ln4141_3_reg_2106 : select_ln4141_2_reg_2101);

assign select_ln4141_6_fu_848_p3 = ((or_ln4141_fu_842_p2[0:0] === 1'b1) ? select_ln4141_4_fu_834_p3 : 2'd0);

assign select_ln4141_fu_777_p3 = ((select_ln7535_3_reg_2074_pp1_iter9_reg[0:0] === 1'b1) ? trunc_ln4141_fu_769_p1 : trunc_ln4141_1_fu_773_p1);

assign select_ln4454_fu_1023_p3 = ((icmp_ln4456_fu_973_p2[0:0] === 1'b1) ? add_ln4454_1_fu_987_p2 : i_0_i_reg_350);

assign select_ln4463_1_fu_1117_p3 = ((icmp_ln4463_1_fu_1102_p2[0:0] === 1'b1) ? phitmp_i_1_cast_cast_fu_1113_p1 : select_ln4463_fu_1094_p3);

assign select_ln4463_2_fu_1162_p3 = ((icmp_ln4463_2_fu_1129_p2[0:0] === 1'b1) ? phitmp_i_2_cast_cast_fu_1158_p1 : select_ln4463_1_fu_1117_p3);

assign select_ln4463_3_fu_979_p3 = ((icmp_ln4456_fu_973_p2[0:0] === 1'b1) ? 2'd0 : j_0_i_reg_421);

assign select_ln4463_4_fu_1015_p3 = ((icmp_ln4456_fu_973_p2[0:0] === 1'b1) ? sub_ln4463_1_fu_1009_p2 : sub_ln4463_fu_955_p2);

assign select_ln4463_fu_1094_p3 = ((icmp_ln4463_fu_1089_p2[0:0] === 1'b1) ? 6'd0 : 6'd40);

assign select_ln4474_2_fu_1249_p3 = ((icmp_ln4474_1_reg_2169[0:0] === 1'b1) ? label_list_1_1_reg_381 : label_list_2_1_reg_371);

assign select_ln4474_4_fu_1289_p3 = ((icmp_ln4474_1_reg_2169[0:0] === 1'b1) ? 32'd9 : label_list_1_1_reg_381);

assign select_ln4474_fu_1204_p3 = ((icmp_ln4474_reg_2162[0:0] === 1'b1) ? label_list_2_1_reg_371 : label_list_2_14_reg_361);

assign select_ln4479_2_fu_1267_p3 = ((and_ln4479_1_fu_1261_p2[0:0] === 1'b1) ? 32'd9 : select_ln4474_2_fu_1249_p3);

assign select_ln4479_fu_1222_p3 = ((and_ln4479_fu_1216_p2[0:0] === 1'b1) ? 32'd9 : select_ln4474_fu_1204_p3);

assign select_ln4533_1_fu_1625_p3 = ((icmp_ln4533_1_fu_1619_p2[0:0] === 1'b1) ? zext_ln4533_fu_1607_p1 : 2'd2);

assign select_ln4533_2_fu_1686_p3 = ((icmp_ln4533_2_fu_1681_p2[0:0] === 1'b1) ? select_ln4533_1_reg_2388 : 2'd3);

assign select_ln4533_3_fu_1744_p3 = ((icmp_ln4533_3_reg_2432[0:0] === 1'b1) ? zext_ln4533_2_fu_1741_p1 : 3'd4);

assign select_ln4533_4_fu_1783_p3 = ((icmp_ln4533_4_fu_1777_p2[0:0] === 1'b1) ? select_ln4533_3_fu_1744_p3 : 3'd5);

assign select_ln4533_5_fu_1839_p3 = ((icmp_ln4533_5_fu_1834_p2[0:0] === 1'b1) ? select_ln4533_4_reg_2444 : 3'd6);

assign select_ln4533_6_fu_1891_p3 = ((icmp_ln4533_6_reg_2479[0:0] === 1'b1) ? select_ln4533_5_reg_2474 : 3'd7);

assign select_ln4533_7_fu_1929_p3 = ((icmp_ln4533_7_fu_1923_p2[0:0] === 1'b1) ? zext_ln4533_7_fu_1897_p1 : 4'd8);

assign select_ln4533_8_fu_1975_p3 = ((icmp_ln4533_8_fu_1970_p2[0:0] === 1'b1) ? select_ln4533_7_reg_2484 : 4'd9);

assign select_ln4533_fu_1611_p3 = ((icmp_ln4533_fu_1595_p2[0:0] === 1'b1) ? vote_list_9_fu_180 : vote_list_9_1_fu_184);

assign select_ln7535_1_fu_671_p3 = ((icmp_ln7531_fu_647_p2[0:0] === 1'b1) ? add_ln7529_1_fu_661_p2 : ap_phi_mux_j_0_phi_fu_321_p4);

assign select_ln7535_2_fu_707_p3 = ((icmp_ln7531_fu_647_p2[0:0] === 1'b1) ? sub_ln7535_1_fu_701_p2 : sub_ln7535_fu_623_p2);

assign select_ln7535_3_fu_721_p3 = ((icmp_ln7531_fu_647_p2[0:0] === 1'b1) ? icmp_ln4141_3_fu_715_p2 : icmp_ln4141_fu_629_p2);

assign select_ln7535_fu_653_p3 = ((icmp_ln7531_fu_647_p2[0:0] === 1'b1) ? 8'd0 : i3_0_reg_328);

assign shl_ln1_fu_947_p3 = {{trunc_ln4463_fu_943_p1}, {2'd0}};

assign shl_ln4463_mid1_fu_1001_p3 = {{trunc_ln4463_1_fu_997_p1}, {2'd0}};

assign shl_ln7535_mid1_fu_693_p3 = {{trunc_ln7535_1_fu_689_p1}, {2'd0}};

assign shl_ln_fu_615_p3 = {{trunc_ln7535_fu_611_p1}, {2'd0}};

assign sub_ln4463_1_fu_1009_p2 = (shl_ln4463_mid1_fu_1001_p3 - zext_ln4463_8_fu_993_p1);

assign sub_ln4463_fu_955_p2 = (shl_ln1_fu_947_p3 - zext_ln4463_fu_939_p1);

assign sub_ln7535_1_fu_701_p2 = (shl_ln7535_mid1_fu_693_p3 - zext_ln7535_1_fu_667_p1);

assign sub_ln7535_fu_623_p2 = (shl_ln_fu_615_p3 - zext_ln7535_fu_607_p1);

assign tmp_1_fu_1134_p4 = {{select_ln4463_1_fu_1117_p3[5:2]}};

assign tmp_2_fu_1170_p4 = {{select_ln4463_2_fu_1162_p3[5:1]}};

assign tmp_6_fu_1454_p11 = tmp_5_fu_1438_p5[3:0];

assign training_set_V_4_d0 = {{{{{{{{reg_472}, {reg_477}}, {reg_481}}, {reg_485}}, {reg_489}}, {reg_493}}, {reg_497}}, {Input_1_V_V_dout}};

assign trunc_ln4141_1_fu_773_p1 = grp_load_fu_452_p1[8:0];

assign trunc_ln4141_2_fu_784_p1 = grp_load_fu_456_p1[8:0];

assign trunc_ln4141_3_fu_788_p1 = grp_load_fu_460_p1[8:0];

assign trunc_ln4141_4_fu_813_p1 = grp_load_fu_464_p1[8:0];

assign trunc_ln4141_5_fu_817_p1 = grp_load_fu_468_p1[8:0];

assign trunc_ln4141_fu_769_p1 = grp_load_fu_448_p1[8:0];

assign trunc_ln414_fu_586_p1 = Input_1_V_V_dout[3:0];

assign trunc_ln4463_1_fu_997_p1 = add_ln4454_1_fu_987_p2[0:0];

assign trunc_ln4463_2_fu_1125_p1 = select_ln4463_1_fu_1117_p3[1:0];

assign trunc_ln4463_fu_943_p1 = i_0_i_reg_350[0:0];

assign trunc_ln4523_fu_1450_p1 = tmp_5_fu_1438_p5[3:0];

assign trunc_ln7535_1_fu_689_p1 = add_ln7529_1_fu_661_p2[0:0];

assign trunc_ln7535_fu_611_p1 = ap_phi_mux_j_0_phi_fu_321_p4[0:0];

assign vote_list_0_fu_1480_p2 = (32'd1 + tmp_6_fu_1454_p12);

assign xor_ln4474_1_fu_1256_p2 = (icmp_ln4474_1_reg_2169 ^ 1'd1);

assign xor_ln4474_fu_1211_p2 = (icmp_ln4474_reg_2162 ^ 1'd1);

assign xor_ln4533_fu_1601_p2 = (icmp_ln4533_fu_1595_p2 ^ 1'd1);

assign zext_ln4141_1_fu_865_p1 = select_ln4141_6_reg_2116;

assign zext_ln4141_fu_856_p1 = grp_popcount_fu_443_ap_return;

assign zext_ln4150_1_fu_919_p1 = grp_popcount_fu_443_ap_return;

assign zext_ln4150_2_fu_909_p1 = grp_popcount_fu_443_ap_return;

assign zext_ln4150_3_fu_899_p1 = grp_popcount_fu_443_ap_return;

assign zext_ln4150_4_fu_889_p1 = grp_popcount_fu_443_ap_return;

assign zext_ln4150_5_fu_879_p1 = grp_popcount_fu_443_ap_return;

assign zext_ln4150_fu_929_p1 = grp_popcount_fu_443_ap_return;

assign zext_ln4463_1_fu_1031_p1 = select_ln4463_3_fu_979_p3;

assign zext_ln4463_8_fu_993_p1 = add_ln4454_1_fu_987_p2;

assign zext_ln4463_fu_939_p1 = i_0_i_reg_350;

assign zext_ln4533_2_fu_1741_p1 = select_ln4533_2_reg_2427;

assign zext_ln4533_7_fu_1897_p1 = select_ln4533_6_fu_1891_p3;

assign zext_ln4533_8_fu_1982_p1 = select_ln4533_8_fu_1975_p3;

assign zext_ln4533_fu_1607_p1 = xor_ln4533_fu_1601_p2;

assign zext_ln7475_fu_518_p1 = i_0_reg_294;

assign zext_ln7531_fu_747_p1 = select_ln7535_reg_2054_pp1_iter1_reg;

assign zext_ln7534_fu_755_p1 = add_ln7534_fu_750_p2;

assign zext_ln7535_1_fu_667_p1 = add_ln7529_1_fu_661_p2;

assign zext_ln7535_fu_607_p1 = ap_phi_mux_j_0_phi_fu_321_p4;

always @ (posedge ap_clk) begin
    knn_set_0[10:9] <= 2'b00;
    knn_set_1[10:9] <= 2'b00;
    knn_set_2[10:9] <= 2'b00;
    knn_set_3[10:9] <= 2'b00;
    knn_set_4[10:9] <= 2'b00;
    knn_set[10:9] <= 2'b00;
    select_ln4463_2_reg_2156[2] <= 1'b0;
    select_ln4463_2_reg_2156[4] <= 1'b0;
end

endmodule //update_knn20
